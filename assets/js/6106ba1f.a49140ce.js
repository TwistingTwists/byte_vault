"use strict";(self.webpackChunkbytevault=self.webpackChunkbytevault||[]).push([[7768],{6711:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var r=s(8073),t=s(4848),i=s(8453);const o={slug:"neat-bash-script",title:"Neat bash script",date:new Date("2025-01-12T00:00:00.000Z"),authors:["abeeshake"],tags:["bash"]},d=void 0,a={authorsImageUrls:[void 0]},l=[{value:"1. Basic: Send a message to stderr",id:"1-basic-send-a-message-to-stderr",level:4},{value:"2. Intermediate: Functions and logging",id:"2-intermediate-functions-and-logging",level:4},{value:"3. Redirecting entire blocks",id:"3-redirecting-entire-blocks",level:4},{value:"4. Advanced: Using <code>exec</code> for global redirection",id:"4-advanced-using-exec-for-global-redirection",level:4},{value:"5. Super-advanced: Custom descriptors &amp; logging to files",id:"5-super-advanced-custom-descriptors--logging-to-files",level:4},{value:"Why stderr vs. stdout?",id:"why-stderr-vs-stdout",level:4},{value:"Rundown of <code>pushd</code>/<code>popd</code>, from simple to advanced:",id:"rundown-of-pushdpopd-from-simple-to-advanced",level:3}];function c(e){const n={code:"code",em:"em",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Neat bash script example.\nWe'll learn about ",(0,t.jsx)(n.code,{children:">&2"})," and ",(0,t.jsx)(n.code,{children:"pushd"})," and ",(0,t.jsx)(n.code,{children:"popd"})," in this script."]}),"\n","\n",(0,t.jsx)("summary",{children:(0,t.jsx)(s,{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'#!/usr/bin/env bash\n\nset -euo pipefail # -e: exit on error, -u: treat unset vars as error, -o pipefail: fail if any command in a pipeline fails\n\nexit_failure=1\n\nproject_root=$(git rev-parse --show-toplevel)\n\nyeet_name=${1:-}\nlocation=$project_root\n\nrender_file_template() {\n  if [ "$(uname)" == "Darwin" ]; then\n    sed -i \'\' "s/$1/$2/g" $3\n  else\n    sed -i "s/$1/$2/g" $3\n  fi\n}\n\nrender_yeet_template() {\n  render_file_template "__TARGET__" "$yeet_name" Makefile\n  render_file_template "__TARGET__" "$yeet_name" YEET\n}\n\nprompt_user() {\n  prompt=$1\n  default=${2:-}\n  while :; do\n    if [ -n "$default" ]; then\n      read -p "$prompt [default: $default]: " response\n    else\n      read -p "$prompt: " response\n    fi\n\n    if [ -n "$response" ]; then\n      echo "$response"\n      return\n    fi\n\n    if [ -z "$response" ] && [ -n "$default" ]; then\n      response=$default\n      echo "$response"\n      return\n    fi\n\n    >&2 echo "Invalid input." # Print error message to stderr\n  done\n}\n\nprocess_variables() {\n  if [ -z "$yeet_name" ]; then\n    yeet_name=$(prompt_user "What would you like to name the new yeet?")\n  fi\n}\n\nmain() {\n  process_variables\n\n  >&2 echo "Creating directory for $yeet_name"\n  if [ -d "$location/$yeet_name" ]; then\n    >&2 echo "Directory for $yeet_name already exists!"\n    exit $exit_failure\n  fi\n\n  mkdir -p "$location/$yeet_name"\n  cp -r .templates/yeet/* "$location/$yeet_name"\n  cp -r .templates/yeet/.clang-format "$location/$yeet_name"\n\n  pushd "$location/$yeet_name" > /dev/null 2>&1 # Save current dir, go to new dir (suppress output)\n    render_yeet_template\n    git init\n  popd > /dev/null 2>&1 # Return to previous dir (suppress output)\n}\n\npushd "$project_root" > /dev/null 2>&1\n  main\npopd > /dev/null 2>&1\n\n\n'})})})}),"\n",(0,t.jsx)(n.p,{children:"This is a bash script I found on internet. It uses some very good patterns."}),"\n",(0,t.jsxs)(n.p,{children:["Here\u2019s a progression of examples\u2014from the simplest to more advanced\u2014showing how and why you\u2019d redirect output to stderr with constructs like ",(0,t.jsx)(n.code,{children:">&2"}),"."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h4,{id:"1-basic-send-a-message-to-stderr",children:"1. Basic: Send a message to stderr"}),"\n",(0,t.jsxs)(n.p,{children:["By default, ",(0,t.jsx)(n.code,{children:"echo"})," writes to ",(0,t.jsx)(n.strong,{children:"stdout"})," (file descriptor 1). To send it to ",(0,t.jsx)(n.strong,{children:"stderr"})," (fd 2) instead:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'echo "Oops, something went wrong!" >&2\n'})}),"\n",(0,t.jsx)(n.p,{children:"This is equivalent to:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'echo "Oops, something went wrong!" 1>&2\n'})}),"\n",(0,t.jsx)(n.p,{children:"Here:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"1>"})," means \u201ctake stdout (fd 1)\u201d"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"2"})," is the target (stderr, fd 2)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Use this when you want your message to count as an error (so it won\u2019t be mixed with normal output if someone is piping or capturing only stdout)."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h4,{id:"2-intermediate-functions-and-logging",children:"2. Intermediate: Functions and logging"}),"\n",(0,t.jsx)(n.p,{children:"Wrap stderr-writes in a helper function for cleaner code:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'log_error() {\n  echo "ERROR: $*" >&2\n}\n\n# usage\nif ! cp "$src" "$dst"; then\n  log_error "Failed to copy $src to $dst"\n  exit 1\nfi\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Here, any call to ",(0,t.jsx)(n.code,{children:'log_error "\u2026\u201d'})," goes to stderr, keeping it separate from \u201chappy-path\u201d output."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h4,{id:"3-redirecting-entire-blocks",children:"3. Redirecting entire blocks"}),"\n",(0,t.jsxs)(n.p,{children:["You can redirect ",(0,t.jsx)(n.strong,{children:"all"})," output in a block to stderr:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'{\n  echo "Step 1 passed"\n  echo "Step 2 passed"\n  echo "Final check failed!"\n} >&2\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Everything inside ",(0,t.jsx)(n.code,{children:"{ \u2026 }"})," now writes to fd 2."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h4,{id:"4-advanced-using-exec-for-global-redirection",children:["4. Advanced: Using ",(0,t.jsx)(n.code,{children:"exec"})," for global redirection"]}),"\n",(0,t.jsxs)(n.p,{children:["If you want your entire script (or a large section) to send stdout to stderr, you can ",(0,t.jsx)(n.code,{children:"exec"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# At top of script, before any output:\nexec 1>&2\n\necho "This goes to stderr"\n# any subsequent echo also goes to stderr\n'})}),"\n",(0,t.jsx)(n.p,{children:"You can even swap streams:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Swap stdout and stderr for the remainder of the script:\nexec 3>&1 1>&2 2>&3 3>&-\n"})}),"\n",(0,t.jsx)(n.p,{children:"After this:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"What was stderr goes to stdout"}),"\n",(0,t.jsx)(n.li,{children:"What was stdout goes to stderr"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h4,{id:"5-super-advanced-custom-descriptors--logging-to-files",children:"5. Super-advanced: Custom descriptors & logging to files"}),"\n",(0,t.jsx)(n.p,{children:"Unix supports more fds than just 0,1,2. You can open your own:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Open fd 3 for appending to a logfile:\nexec 3>>/var/log/my_script.log\n\n# Send normal info to fd 3:\necho "All OK so far" >&3\n\n# Send errors to stderr as usual:\necho "Fatal error" >&2\n\n# Restore/close when done:\nexec 3>&-\n'})}),"\n",(0,t.jsx)(n.p,{children:"This lets you:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Keep \u201cinfo\u201d messages in a log file via fd 3"}),"\n",(0,t.jsx)(n.li,{children:"Keep \u201cerrors\u201d distinct on stderr"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h4,{id:"why-stderr-vs-stdout",children:"Why stderr vs. stdout?"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Separation of concerns"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"stdout"})," \u2192 data/results"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"stderr"})," \u2192 diagnostics/errors"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Safe piping"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"myscript.sh | grep Success\n"})}),"\n",(0,t.jsx)(n.p,{children:"only sees stdout successes, not debug or error chatter."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Better automation"})}),"\n",(0,t.jsx)(n.p,{children:"Tools can capture or redirect each stream independently."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h3,{id:"rundown-of-pushdpopd-from-simple-to-advanced",children:["Rundown of ",(0,t.jsx)(n.code,{children:"pushd"}),"/",(0,t.jsx)(n.code,{children:"popd"}),", from simple to advanced:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Basic directory stack"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pushd /path/to/dir    # cd into DIR, and push old cwd onto a stack\npopd                  # pop the top stack entry and cd back to it\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Use when you need to temporarily work in another directory and then return."})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Inspecting & nesting"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pushd /one\npushd /two\ndirs                  # shows stack order: /two /one /original\npopd                  # returns to /one (next entry on stack)\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Stack lets you nest multiple switches without manually tracking each path."})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Rotating through entries"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pushd A B C           # push A, then B, then C; cwd ends at C\ndirs                  # C B A\npushd +1              # rotate: bring second entry (B) to top; cwd=B\npushd +2              # now rotates third (A) to top; cwd=A\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Quickly cycle among saved locations by index instead of full paths."})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Silent switching"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pushd /tmp > /dev/null 2>&1  \npopd  > /dev/null 2>&1\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Suppresses the usual \u201cstack\u201d output when you just want the directory change."})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Robust scripting"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'pushd "$dir" || { echo "Cannot enter $dir" >&2; exit 1; }\n  # perform actions in $dir\u2026\npopd || exit 1\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Combine with error checks to ensure you always return (or bail) on failure."})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Why use it?"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Convenience:"})," No need to save and restore ",(0,t.jsx)(n.code,{children:"$OLDPWD"})," manually."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Clarity:"})," ",(0,t.jsx)(n.code,{children:"dirs"})," shows your navigation history."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Flexibility:"})," Rotate and jump by index for quick context switches."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>d});var r=s(6540);const t={},i=r.createContext(t);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(i.Provider,{value:n},e.children)}},8073:e=>{e.exports=JSON.parse('{"permalink":"/byte_vault/neat-bash-script","source":"@site/blog/2025-01-12-learning-bash.mdx","title":"Neat bash script","description":"Neat bash script example.","date":"2025-01-12T00:00:00.000Z","tags":[{"inline":false,"label":"Bash","permalink":"/byte_vault/tags/bash","description":"Bash scripting"}],"readingTime":4.73,"hasTruncateMarker":true,"authors":[{"name":"Abhishek Tripathi","title":"Curiosity brings awareness.","url":"https://github.com/TwistingTwists","page":{"permalink":"/byte_vault/authors/abeeshake"},"socials":{"x":"https://x.com/twistin456","github":"https://github.com/TwistingTwists"},"imageURL":"https://github.com/TwistingTwists.png","key":"abeeshake"}],"frontMatter":{"slug":"neat-bash-script","title":"Neat bash script","date":"2025-01-12T00:00:00.000Z","authors":["abeeshake"],"tags":["bash"]},"unlisted":false,"prevItem":{"title":"Rust tricks for the average developer (me)","permalink":"/byte_vault/rust-tips-tricks"},"nextItem":{"title":"Streaming HTTP to Disk","permalink":"/byte_vault/streaming-http-to-disk"}}')}}]);