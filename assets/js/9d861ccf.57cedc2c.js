"use strict";(self.webpackChunkbytevault=self.webpackChunkbytevault||[]).push([[5873],{3386:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>a,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var s=t(3652),r=t(4848),i=t(8453);const l={slug:"string-interning-rust",title:"String interning in Rust",date:new Date("2025-03-01T00:00:00.000Z"),authors:["abeeshake"],tags:["rust"],draft:!1},a=void 0,o={authorsImageUrls:[void 0]},d=[{value:"What is String Interning?",id:"what-is-string-interning",level:3},{value:"<strong>Why String Interning Matters in Real-World Scenarios</strong>",id:"why-string-interning-matters-in-real-world-scenarios",level:3},{value:"<strong>Real-World Use Cases</strong>",id:"real-world-use-cases",level:3},{value:"<strong>How It Works</strong>",id:"how-it-works",level:3},{value:"Implementation of String Interning in Rust",id:"implementation-of-string-interning-in-rust",level:3}];function g(n){const e={code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h3,{id:"what-is-string-interning",children:"What is String Interning?"}),"\n",(0,r.jsx)(e.p,{children:"String interning is a technique that ensures each unique string is stored only once in memory, reducing redundancy and improving performance."}),"\n",(0,r.jsx)(e.h3,{id:"why-string-interning-matters-in-real-world-scenarios",children:(0,r.jsx)(e.strong,{children:"Why String Interning Matters in Real-World Scenarios"})}),"\n",(0,r.jsxs)(e.p,{children:["String interning is ",(0,r.jsx)(e.strong,{children:"critical in performance-sensitive applications"})," where ",(0,r.jsx)(e.strong,{children:"redundant string storage leads to memory overhead and slower lookups"}),". Here\u2019s why it matters in real-world scenarios:"]}),"\n",(0,r.jsx)(e.h3,{id:"real-world-use-cases",children:(0,r.jsx)(e.strong,{children:"Real-World Use Cases"})}),"\n",(0,r.jsx)(e.p,{children:"String interning reduces memory usage and improves performance by storing each unique string only once."}),"\n",(0,r.jsx)(e.p,{children:"The following table highlights some real-world use cases where string interning is beneficial:"}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Use Case"}),(0,r.jsx)(e.th,{children:"Example"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Compiler and Interpreter Optimization"}),(0,r.jsx)(e.td,{children:"Rust\u2019s compiler, Python\u2019s CPython, and Java\u2019s JVM use string interning to optimize symbol tables."})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Embedded Systems & IoT"}),(0,r.jsxs)(e.td,{children:["Logging frameworks like ",(0,r.jsx)(e.code,{children:"defmt"})," use interning to minimize ",(0,r.jsx)(e.strong,{children:"flash storage usage"})," on microcontrollers."]})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Web Servers & API Performance"}),(0,r.jsx)(e.td,{children:"High-traffic APIs handling millions of requests often receive the same strings (e.g., headers, JSON keys)."})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Databases & Search Engines"}),(0,r.jsx)(e.td,{children:"Search engines like Elasticsearch and databases like PostgreSQL intern frequently queried strings."})]})]})]}),"\n",(0,r.jsx)(e.h3,{id:"how-it-works",children:(0,r.jsx)(e.strong,{children:"How It Works"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"InternedString::new()"})," returns an ",(0,r.jsx)(e.strong,{children:"empty interned string"}),"."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"InternedString::from(s)"})," interns a string, ensuring uniqueness."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"as_str()"}),", ",(0,r.jsx)(e.code,{children:"len()"}),", and ",(0,r.jsx)(e.code,{children:"is_empty()"})," mimic ",(0,r.jsx)(e.code,{children:"String"})," methods."]}),"\n",(0,r.jsxs)(e.li,{children:["A ",(0,r.jsx)(e.strong,{children:"global HashMap"})," stores interned strings, avoiding duplicates."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Thread safety"})," is ensured using ",(0,r.jsx)(e.code,{children:"Lazy<Mutex<HashMap>>"}),"."]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"implementation-of-string-interning-in-rust",children:"Implementation of String Interning in Rust"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-rust",children:'use std::collections::HashMap;\nuse std::sync::{Arc, Mutex};\nuse once_cell::sync::Lazy; // Ensures thread-safe global interner\n\n#[derive(Debug, Clone, PartialEq, Eq, Hash)]\npub struct InternedString {\n    inner: Arc<str>,\n}\n\n// Global interner (singleton)\nstatic INTERNER: Lazy<Mutex<HashMap<Arc<str>, ()>>> = Lazy::new(|| Mutex::new(HashMap::new()));\n\nimpl InternedString {\n    /// Creates an empty interned string (similar to `String::new()`)\n    pub fn new() -> Self {\n        Self::intern("")\n    }\n\n    /// Interns a given string and returns an InternedString\n    pub fn from<S: AsRef<str>>(s: S) -> Self {\n        Self::intern(s.as_ref())\n    }\n\n    /// Returns a reference to the interned string\n    pub fn as_str(&self) -> &str {\n        &self.inner\n    }\n\n    /// Returns the length of the interned string\n    pub fn len(&self) -> usize {\n        self.inner.len()\n    }\n\n    /// Checks if the interned string is empty\n    pub fn is_empty(&self) -> bool {\n        self.inner.is_empty()\n    }\n\n    /// Interns a string, ensuring no duplicates exist\n    fn intern(s: &str) -> Self {\n        let mut interner = INTERNER.lock().unwrap();\n\n        // If the string is already interned, return the existing reference\n        if let Some(existing) = interner.keys().find(|k| k.as_ref() == s) {\n            return InternedString {\n                inner: Arc::clone(existing),\n            };\n        }\n\n        // Otherwise, intern the new string\n        let arc_str = Arc::from(s);\n        interner.insert(Arc::clone(&arc_str), ());\n        \n        InternedString { inner: arc_str }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_empty_string() {\n        let empty1 = InternedString::new();\n        let empty2 = InternedString::new();\n        assert_eq!(empty1, empty2);\n        assert!(empty1.is_empty());\n    }\n\n    #[test]\n    fn test_interning() {\n        let s1 = InternedString::from("hello");\n        let s2 = InternedString::from("hello");\n        let s3 = InternedString::from("world");\n\n        assert_eq!(s1, s2);\n        assert_ne!(s1, s3);\n    }\n\n    #[test]\n    fn test_string_length() {\n        let s = InternedString::from("test");\n        assert_eq!(s.len(), 4);\n    }\n\n    #[test]\n    fn test_string_content() {\n        let s = InternedString::from("RustLang");\n        assert_eq!(s.as_str(), "RustLang");\n    }\n}\n'})})]})}function c(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(g,{...n})}):g(n)}},3652:n=>{n.exports=JSON.parse('{"permalink":"/byte_vault/blog/string-interning-rust","source":"@site/blog/2025-03-01-string-interning.mdx","title":"String interning in Rust","description":"What is String Interning?","date":"2025-03-01T00:00:00.000Z","tags":[{"inline":false,"label":"Rust","permalink":"/byte_vault/blog/tags/rust","description":"Rust lang"}],"readingTime":2.445,"hasTruncateMarker":false,"authors":[{"name":"Abhishek Tripathi","title":"Curiosity brings awareness.","url":"https://github.com/TwistingTwists","page":{"permalink":"/byte_vault/blog/authors/abeeshake"},"socials":{"x":"https://x.com/twistin456","github":"https://github.com/TwistingTwists"},"imageURL":"https://github.com/TwistingTwists.png","key":"abeeshake"}],"frontMatter":{"slug":"string-interning-rust","title":"String interning in Rust","date":"2025-03-01T00:00:00.000Z","authors":["abeeshake"],"tags":["rust"],"draft":false},"unlisted":false,"prevItem":{"title":"Reliable Structured Outputs with LLMs","permalink":"/byte_vault/blog/reliable-structured-outputs-with-llms"},"nextItem":{"title":"Streaming HTTP to Disk","permalink":"/byte_vault/blog/streaming-http-to-disk"}}')}}]);