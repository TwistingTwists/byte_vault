"use strict";(self.webpackChunkbytevault=self.webpackChunkbytevault||[]).push([[447],{1160:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"1brc-same-tricks-across-languages","metadata":{"permalink":"/byte_vault/blog/1brc-same-tricks-across-languages","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2024-12-22-1brc-common-learnings.mdx","source":"@site/blog/2024-12-22-1brc-common-learnings.mdx","title":"1brc - same tricks across languages","description":"The 1 Billion Row Challenge (1BRC) is a programming challenge focused on processing a large dataset of temperature measurements. If you\'re unfamiliar with it, you can learn more from these resources: 1 and 2.","date":"2024-10-25T00:00:00.000Z","tags":[{"inline":false,"label":"Performance","permalink":"/byte_vault/blog/tags/performance","description":"Blog posts related to improving and understanding performance."}],"readingTime":2.15,"hasTruncateMarker":true,"authors":[{"name":"Abhishek Tripathi","title":"Curiosity brings awareness.","url":"https://github.com/TwistingTwists","page":{"permalink":"/byte_vault/blog/authors/abeeshake"},"socials":{"x":"https://x.com/twistin456","github":"https://github.com/TwistingTwists"},"imageURL":"https://github.com/TwistingTwists.png","key":"abeeshake"}],"frontMatter":{"slug":"1brc-same-tricks-across-languages","title":"1brc - same tricks across languages","date":"2024-10-25T00:00:00.000Z","authors":["abeeshake"],"tags":["performance"]},"unlisted":false},"content":"The 1 Billion Row Challenge (1BRC) is a programming challenge focused on processing a large dataset of temperature measurements. If you\'re unfamiliar with it, you can learn more from these resources: [1](https://github.com/gunnarmorling/1brc) and [2](https://www.morling.dev/blog/1brc-results-are-in/).\\n\\nThis is a cheatsheet  of optimisations done for 1brc challenges. It tries to summarise and put the optimisations in perspective.\\n\\n\\n{/* truncate */}\\n\\n### Data encoding / parsing\\n\\n\\n| Trick                                         | Outcome                                                                                     | Note                                                                                                                                                 |\\n| :-------------------------------------------- | ------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| converting contents of file as string: don\'t! | [~10% perf](https://github.com/gunnarmorling/1brc/discussions/57#discussioncomment-8153186) | Don\'t convert the contents of the file to`String`. Simply process raw bytes.                                                                         |\\n| parsing float values<br />                    |                                                                                             | parsing after assuming only one place after decimal.                                                                                                 |\\n| parsing integer                               |                                                                                             | [Branchless Programming via Bit Manipulation](https://youtu.be/EFXxXFHpS0M?t=1255)<br /> this is not generalizable                                   |\\n| parsing the city name (finding`;` separator)  |                                                                                             | If the data looks like`Tokio;13.4` and we want to find `;`<br/><br/>using 8 operations, you can find `;`.<br /><br /><br />SWAR = SIMD as a register |\\n\\n### Reading files from disk\\n\\n\\n| Trick                                                                                                                                  | Outcome                                                                                     | Note                                                                                                                                                                                                                    |\\n| -------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| Reading in chunks[golang](https://www.bytesizego.com/blog/one-billion-row-challenge-go#:~:text=Reading%20file%3A%20Read%20in%20chunks) | [~10% perf](https://github.com/gunnarmorling/1brc/discussions/57#discussioncomment-8153186) |                                                                                                                                                                                                                         |\\n| mmap                                                                                                                                   |                                                                                             | [mmap the input file. Split input based on core count and run it with a thread per core.](https://github.com/gunnarmorling/1brc/discussions/57#discussioncomment-8041416)<br/><br/>mmap is an unsafe operation in Rust. |\\n\\n\\n### Float handling\\n\\n\\n| Trick                                        | Outcome                                                                                                         | Notes |\\n| -------------------------------------------- | --------------------------------------------------------------------------------------------------------------- | ----- |\\n| Don\'t do floating point operations. Use int. | [20% speed gains](https://github.com/gunnarmorling/1brc/discussions/57#discussioncomment-8024568)               |       |\\n| Use fixed size integers instead of float     | [~10% gain in golang](https://benhoyt.com/writings/go-1brc/#:~:text=Solution%204%3A%20fixed%20point%20integers) |       |\\n\\n### The Hashmap - simpler hash function\\n\\n\\n| Trick | Outcome | Note |\\n|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\\n| [Fixed Size hash table 10k](https://github.com/gunnarmorling/1brc/discussions/57#:~:text=Treat%20the%20first%20eight%20bytes%20of%20the%20name%20as%20a%20hash%20key%20into%20a%20fixed%20size%2010k%20item%20hash%20table.) | [~40% gain - the custom hash table cuts down the time from 41.3 seconds to 22.1s.](https://benhoyt.com/writings/go-1brc/#:~:text=the%20custom%20hash%20table%20cuts%20down%20the%20time%20from%2041.3%20seconds%20to%2022.1s.)|\\n How to resolve collisions?<br /><br />- Find first unoccupied slot<br />- <br />[if hash collide, goto next empty slot algorithm](https://benhoyt.com/writings/go-1brc/#:~:text=It%E2%80%99s%20a%20simple%20implementation%20that%20uses%20the%20FNV%2D1a%20hash%20algorithm%20with%20linear%20probing%3A%20if%20there%E2%80%99s%20a%20collision%2C%20use%20the%20next%20empty%20slot.)\\n| | Hash key - Integer, not String | [4x gain in a different competition](https://youtu.be/SVw9nKfVPx4?t=501) | Profiler showed that most of\\nthe time is spent in`Hashmap.get`.<br /> Not in 1brc, but in [other context](https://www.youtube.com/watch?v=SVw9nKfVPx4&t=501s), Hashmap.get was\\nthe bottleneck. hence this optimisation makes a lot of difference there, not in\\n1brc. |\\n\\n### With OS threads and parallelism - go brr!\\n\\n\\n| Trick                                                        | Outcome                                                                                                                                                                                                                                  | Notes                                                     |\\n| ------------------------------------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------- |\\n| address the go routine + rust tokio task + erlang processes? | [~ 4-6x gains](https://benhoyt.com/writings/go-1brc/#:~:text=Processing%20the%20input%20file%20in%20parallel%20provides%20a%20huge%20win%20over%20r1%2C%20taking%20the%20time%20from%201%20minute%2045%20seconds%20to%2022.6%20seconds.) | biggest gains are obtained by utilizing OS threads fully! |"}]}}')}}]);