"use strict";(self.webpackChunkbytevault=self.webpackChunkbytevault||[]).push([[3879],{6478:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>n,toc:()=>h});var n=s(9925),i=s(4848),r=s(8453);const a={slug:"1brc-same-tricks-across-languages",title:"1brc - same tricks across languages",date:new Date("2024-12-22T00:00:00.000Z"),authors:["abeeshake"],tags:["performance"]},o=void 0,l={authorsImageUrls:[void 0]},h=[{value:"Data encoding / parsing",id:"data-encoding--parsing",level:3},{value:"Reading files from disk",id:"reading-files-from-disk",level:3},{value:"Float handling",id:"float-handling",level:3},{value:"The Hashmap - simpler hash function",id:"the-hashmap---simpler-hash-function",level:3},{value:"With OS threads and parallelism - go brr!",id:"with-os-threads-and-parallelism---go-brr",level:3}];function c(e){const t={a:"a",code:"code",h3:"h3",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["The 1 Billion Row Challenge (1BRC) is a programming challenge focused on processing a large dataset of temperature measurements. If you're unfamiliar with it, you can learn more from these resources: ",(0,i.jsx)(t.a,{href:"https://github.com/gunnarmorling/1brc",children:"1"})," and ",(0,i.jsx)(t.a,{href:"https://www.morling.dev/blog/1brc-results-are-in/",children:"2"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"This is a cheatsheet  of optimisations done for 1brc challenges. It tries to summarise and put the optimisations in perspective."}),"\n","\n",(0,i.jsx)(t.h3,{id:"data-encoding--parsing",children:"Data encoding / parsing"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Trick"}),(0,i.jsx)(t.th,{children:"Outcome"}),(0,i.jsx)(t.th,{children:"Note"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"converting contents of file as string: don't!"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://github.com/gunnarmorling/1brc/discussions/57#discussioncomment-8153186",children:"~10% perf"})}),(0,i.jsxs)(t.td,{children:["Don't convert the contents of the file to",(0,i.jsx)(t.code,{children:"String"}),". Simply process raw bytes."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["parsing float values",(0,i.jsx)("br",{})]}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"parsing after assuming only one place after decimal."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"parsing integer"}),(0,i.jsx)(t.td,{}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.a,{href:"https://youtu.be/EFXxXFHpS0M?t=1255",children:"Branchless Programming via Bit Manipulation"}),(0,i.jsx)("br",{})," this is not generalizable"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["parsing the city name (finding",(0,i.jsx)(t.code,{children:";"})," separator)"]}),(0,i.jsx)(t.td,{}),(0,i.jsxs)(t.td,{children:["If the data looks like",(0,i.jsx)(t.code,{children:"Tokio;13.4"})," and we want to find ",(0,i.jsx)(t.code,{children:";"}),(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"using 8 operations, you can find ",(0,i.jsx)(t.code,{children:";"}),".",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"SWAR = SIMD as a register"]})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"reading-files-from-disk",children:"Reading files from disk"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Trick"}),(0,i.jsx)(t.th,{children:"Outcome"}),(0,i.jsx)(t.th,{children:"Note"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{children:["Reading in chunks",(0,i.jsx)(t.a,{href:"https://www.bytesizego.com/blog/one-billion-row-challenge-go#:~:text=Reading%20file%3A%20Read%20in%20chunks",children:"golang"})]}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://github.com/gunnarmorling/1brc/discussions/57#discussioncomment-8153186",children:"~10% perf"})}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"mmap"}),(0,i.jsx)(t.td,{}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.a,{href:"https://github.com/gunnarmorling/1brc/discussions/57#discussioncomment-8041416",children:"mmap the input file. Split input based on core count and run it with a thread per core."}),(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"mmap is an unsafe operation in Rust."]})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"float-handling",children:"Float handling"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Trick"}),(0,i.jsx)(t.th,{children:"Outcome"}),(0,i.jsx)(t.th,{children:"Notes"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Don't do floating point operations. Use int."}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://github.com/gunnarmorling/1brc/discussions/57#discussioncomment-8024568",children:"20% speed gains"})}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Use fixed size integers instead of float"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://benhoyt.com/writings/go-1brc/#:~:text=Solution%204%3A%20fixed%20point%20integers",children:"~10% gain in golang"})}),(0,i.jsx)(t.td,{})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"the-hashmap---simpler-hash-function",children:"The Hashmap - simpler hash function"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Trick"}),(0,i.jsx)(t.th,{children:"Outcome"}),(0,i.jsx)(t.th,{children:"Note"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://github.com/gunnarmorling/1brc/discussions/57#:~:text=Treat%20the%20first%20eight%20bytes%20of%20the%20name%20as%20a%20hash%20key%20into%20a%20fixed%20size%2010k%20item%20hash%20table.",children:"Fixed Size hash table 10k"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://benhoyt.com/writings/go-1brc/#:~:text=the%20custom%20hash%20table%20cuts%20down%20the%20time%20from%2041.3%20seconds%20to%2022.1s.",children:"~40% gain - the custom hash table cuts down the time from 41.3 seconds to 22.1s."})}),(0,i.jsxs)(t.td,{children:["How to resolve collisions?",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"- Find first unoccupied slot",(0,i.jsx)("br",{}),"- ",(0,i.jsx)("br",{}),(0,i.jsx)(t.a,{href:"https://benhoyt.com/writings/go-****1brc/#:~:text=It%E2%80%99s%20a%20simple%20implementation%20that%20uses%20the%20FNV%2D1a%20hash%20algorithm%20with%20linear%20probing%3A%20if%20there%E2%80%99s%20a%20collision%2C%20use%20the%20next%20empty%20slot.",children:"if hash collide, goto next empty slot algorithm"})]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Hash key - Integer, not String"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://youtu.be/SVw9nKfVPx4?t=501",children:"4x gain in a different competition"})}),(0,i.jsxs)(t.td,{children:["the time is spent in",(0,i.jsx)(t.code,{children:"Hashmap.get"}),".",(0,i.jsx)("br",{})," Not in 1brc, but in ",(0,i.jsx)(t.a,{href:"https://www.youtube.com/watch?v=SVw9nKfVPx4&t=501s",children:"other context"}),", Hashmap.get was the bottleneck. hence this optimisation makes a lot of difference there, not in 1brc."]})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"with-os-threads-and-parallelism---go-brr",children:"With OS threads and parallelism - go brr!"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Trick"}),(0,i.jsx)(t.th,{children:"Outcome"}),(0,i.jsx)(t.th,{children:"Notes"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"address the go routine + rust tokio task + erlang processes?"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://benhoyt.com/writings/go-1brc/#:~:text=Processing%20the%20input%20file%20in%20parallel%20provides%20a%20huge%20win%20over%20r1%2C%20taking%20the%20time%20from%201%20minute%2045%20seconds%20to%2022.6%20seconds.",children:"~ 4-6x gains"})}),(0,i.jsx)(t.td,{children:"biggest gains are obtained by utilizing OS threads fully!"})]})})]})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>o});var n=s(6540);const i={},r=n.createContext(i);function a(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(r.Provider,{value:t},e.children)}},9925:e=>{e.exports=JSON.parse('{"permalink":"/byte_vault/blog/1brc-same-tricks-across-languages","source":"@site/blog/2024-12-22-1brc-common-learnings.mdx","title":"1brc - same tricks across languages","description":"The 1 Billion Row Challenge (1BRC) is a programming challenge focused on processing a large dataset of temperature measurements. If you\'re unfamiliar with it, you can learn more from these resources: 1 and 2.","date":"2024-12-22T00:00:00.000Z","tags":[{"inline":false,"label":"Performance","permalink":"/byte_vault/blog/tags/performance","description":"Blog posts related to improving and understanding performance."}],"readingTime":2.16,"hasTruncateMarker":true,"authors":[{"name":"Abhishek Tripathi","title":"Curiosity brings awareness.","url":"https://github.com/TwistingTwists","page":{"permalink":"/byte_vault/blog/authors/abeeshake"},"socials":{"x":"https://x.com/twistin456","github":"https://github.com/TwistingTwists"},"imageURL":"https://github.com/TwistingTwists.png","key":"abeeshake"}],"frontMatter":{"slug":"1brc-same-tricks-across-languages","title":"1brc - same tricks across languages","date":"2024-12-22T00:00:00.000Z","authors":["abeeshake"],"tags":["performance"]},"unlisted":false,"prevItem":{"title":"Caddy Reverse Proxy Performance: 300% Boost with Unix Sockets","permalink":"/byte_vault/blog/how-to-solve-reverse-proxy-performance-issues-in-caddy-server-a-300-performance-boost-using-unix-sockets"}}')}}]);