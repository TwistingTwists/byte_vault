"use strict";(self.webpackChunkbytevault=self.webpackChunkbytevault||[]).push([[809],{2122:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>n,toc:()=>u});var n=s(9205),i=s(4848),r=s(8453);const a={slug:"deep-flattening-in-rust-using-recursive-types",title:"Deep Flattening in Rust - Using Recursive Types ",date:new Date("2024-12-31T00:00:00.000Z"),authors:["joel-medicala","abeeshake"],tags:["rust"]},o=void 0,l={authorsImageUrls:[void 0,void 0]},u=[{value:"Deep Flattening in Rust: A Recursive Adventure",id:"deep-flattening-in-rust-a-recursive-adventure",level:3},{value:"The Goal",id:"the-goal",level:4}];function c(e){const t={code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h3,{id:"deep-flattening-in-rust-a-recursive-adventure",children:"Deep Flattening in Rust: A Recursive Adventure"}),"\n",(0,i.jsxs)(t.p,{children:["Flattening nested data structures is a common problem in programming. However, flattening structures with an arbitrary depth\u2014like nested ",(0,i.jsx)(t.code,{children:"Vec"}),"s within ",(0,i.jsx)(t.code,{children:"Vec"}),"s\u2014can be tricky. Rust, with its strong type system and trait-based polymorphism, allows us to implement elegant solutions to such problems. In this post, we'll explore a recursive approach to deep flattening in Rust using traits, type inference, and iterators."]}),"\n",(0,i.jsx)(t.h4,{id:"the-goal",children:"The Goal"}),"\n",(0,i.jsx)(t.p,{children:"Given a deeply nested structure, such as:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-rust",children:"let nested_vec = vec![\n    vec![vec![1, 2, 3], vec![4, 5]],\n    vec![vec![6], vec![7, 8, 9]],\n];\n"})}),"\n",(0,i.jsx)(t.p,{children:"Our goal is to flatten it into:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-rust",children:"let flattened = vec![1, 2, 3, 4, 5, 6, 7, 8, 9];\n"})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>o});var n=s(6540);const i={},r=n.createContext(i);function a(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(r.Provider,{value:t},e.children)}},9205:e=>{e.exports=JSON.parse('{"permalink":"/byte_vault/blog/deep-flattening-in-rust-using-recursive-types","source":"@site/blog/2024-12-31-rust-deep-flatten.mdx","title":"Deep Flattening in Rust - Using Recursive Types ","description":"Deep Flattening in Rust: A Recursive Adventure","date":"2024-12-31T00:00:00.000Z","tags":[{"inline":false,"label":"Rust","permalink":"/byte_vault/blog/tags/rust","description":"Rust lang"}],"readingTime":2.995,"hasTruncateMarker":true,"authors":[{"name":"Joel Medicala","url":"https://github.com/JoeruCodes","page":{"permalink":"/byte_vault/blog/authors/joel-medicala"},"socials":{"x":"https://x.com/JoeruCodes","github":"https://github.com/JoeruCodes"},"imageURL":"https://github.com/JoeruCodes.png","key":"joel-medicala"},{"name":"Abhishek Tripathi","title":"Curiosity brings awareness.","url":"https://github.com/TwistingTwists","page":{"permalink":"/byte_vault/blog/authors/abeeshake"},"socials":{"x":"https://x.com/twistin456","github":"https://github.com/TwistingTwists"},"imageURL":"https://github.com/TwistingTwists.png","key":"abeeshake"}],"frontMatter":{"slug":"deep-flattening-in-rust-using-recursive-types","title":"Deep Flattening in Rust - Using Recursive Types ","date":"2024-12-31T00:00:00.000Z","authors":["joel-medicala","abeeshake"],"tags":["rust"]},"unlisted":false,"prevItem":{"title":"Understanding DDIA - Chapter 01,02","permalink":"/byte_vault/blog/ch-01-ddia"},"nextItem":{"title":"Caddy Reverse Proxy Performance: 300% Boost with Unix Sockets","permalink":"/byte_vault/blog/how-to-solve-reverse-proxy-performance-issues-in-caddy-server-a-300-performance-boost-using-unix-sockets"}}')}}]);