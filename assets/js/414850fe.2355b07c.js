"use strict";(self.webpackChunkbytevault=self.webpackChunkbytevault||[]).push([[7942],{7158:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var a=n(1936),s=n(4848),r=n(8453);const i={slug:"reliable-structured-outputs-with-llms",title:"Reliable Structured Outputs with LLMs",date:new Date("2025-03-01T00:00:00.000Z"),draft:!1,authors:["abeeshake"],tags:["json-parser","llm"]},o=void 0,l={authorsImageUrls:[void 0]},d=[{value:"Ensuring Deterministic Outputs from LLMs",id:"ensuring-deterministic-outputs-from-llms",level:3}];function c(e){const t={a:"a",code:"code",em:"em",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h3,{id:"ensuring-deterministic-outputs-from-llms",children:"Ensuring Deterministic Outputs from LLMs"}),"\n",(0,s.jsx)(t.p,{children:"There are several strategies to obtain structured outputs from LLMs."}),"\n",(0,s.jsx)(t.p,{children:"In Python, libraries such as Pydantic and Instructor facilitate structured output via JSON schema-based tool invocation. If you have the capability to host your own model, sglang is a viable option."}),"\n",(0,s.jsx)(t.p,{children:"Pydantic validators are highly effective, provided that the input is in the form of a valid JSON string."}),"\n",(0,s.jsx)(t.p,{children:"Let's see by example. For starters, here is the schema we want to parse."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'from pydantic import BaseModel, ValidationError\n\nclass User(BaseModel):\n    id: int\n    name: str\n    email: str\n    active: bool = True  # default value\n\n# JSON representation of the data\njson_data = \'\'\'\n{\n    "id": 123,\n    "name": "Alice",\n    "email": "alice@example.com"\n}\n\'\'\'\n\ntry:\n     # Directly validate and parse the JSON string\n    user = User.model_validate_json(json_data)\n    print("Validated Data:", user)\nexcept ValidationError as e:\n    print("Validation Error:", e.json())\n\n'})}),"\n",(0,s.jsxs)(t.p,{children:["This works. Pydantic has a pretty solid ",(0,s.jsx)(t.em,{children:"json"})," to data model convertor. But it has to be a valid json string. Let's explore further."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'\n# JSON representation of the data\n# typical replies of a small LLM which does not adhere well to \'output_json\' command\njson_data = \'\'\'\nHere is your json\n{\n    "id": 123,\n    "name": "Alice",\n    "email": "alice@example.com"\n}\n\'\'\'\n\ntry:\n     # Directly validate and parse the JSON string using the new method\n    user = User.model_validate_json(json_data)\n    print("Validated Data:", user)\nexcept ValidationError as e:\n    print("Validation Error:", e.json())\n\n\n'})}),"\n",(0,s.jsx)(t.p,{children:"Error is:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'Validation Error: [{"type":"json_invalid","loc":[],"msg":"Invalid JSON: expected value at line 2 column 1","input":"\\nHere is your json\\n{\\n    \\"id\\": 123,\\n    \\"name\\": \\"Alice\\",\\n    \\"email\\": \\"alice@example.com\\"\\n}\\n","ctx":{"error":"expected value at line 2 column 1"},"url":"https://errors.pydantic.dev/2.10/v/json_invalid"}]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Now, let's add one more step in the mix. Let's use the json_partial_py library to parse the JSON string. and then pass it to pydantic."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'\nfrom json_partial_py import to_json_string # <---- this is a new import\n\n# typical replies of a small LLM which does not adhere well to \'output_json\' command\njson_data = \'\'\'\nHere is your json\n{\n    "id": 123,\n    "name": "Alice",\n    "email": "alice@example.com"\n}\n\'\'\'\n\ntry:\n    stringified_json = to_json_string(json_data)\n     # Directly validate and parse the JSON string using the new method\n    user = User.model_validate_json(stringified_json)\n    print("Validated Data:", user)\nexcept ValidationError as e:\n    print("Validation Error:", e.json())\n\n\n'})}),"\n",(0,s.jsx)(t.p,{children:"and voila!! Now you can rest assured that you will get clean json parsed from the LLM output."}),"\n",(0,s.jsxs)(t.p,{children:["P.S. I am author of the ",(0,s.jsxs)(t.a,{href:"https://pypi.org/project/json_partial_python/",children:[(0,s.jsx)(t.code,{children:"json_partial_py"})," library"]}),". It was extracted from ",(0,s.jsx)(t.a,{href:"https://github.com/BoundaryML/baml?tab=readme-ov-file",children:"baml project"}),"."]})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var a=n(6540);const s={},r=a.createContext(s);function i(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:t},e.children)}},1936:e=>{e.exports=JSON.parse('{"permalink":"/byte_vault/reliable-structured-outputs-with-llms","source":"@site/blog/2025-03-01-parsing-json-from-llm.mdx","title":"Reliable Structured Outputs with LLMs","description":"Ensuring Deterministic Outputs from LLMs","date":"2025-03-01T00:00:00.000Z","tags":[{"inline":false,"label":"JSON Parser","permalink":"/byte_vault/tags/json-parser","description":"Parsing JSON"},{"inline":false,"label":"LLM","permalink":"/byte_vault/tags/llm","description":"Large Language Models"}],"readingTime":1.95,"hasTruncateMarker":false,"authors":[{"name":"Abhishek Tripathi","title":"Curiosity brings awareness.","url":"https://github.com/TwistingTwists","page":{"permalink":"/byte_vault/authors/abeeshake"},"socials":{"x":"https://x.com/twistin456","github":"https://github.com/TwistingTwists"},"imageURL":"https://github.com/TwistingTwists.png","key":"abeeshake"}],"frontMatter":{"slug":"reliable-structured-outputs-with-llms","title":"Reliable Structured Outputs with LLMs","date":"2025-03-01T00:00:00.000Z","draft":false,"authors":["abeeshake"],"tags":["json-parser","llm"]},"unlisted":false,"prevItem":{"title":"Connection Pooling - in Depth","permalink":"/byte_vault/connection-pooling-in-depth"},"nextItem":{"title":"String interning in Rust","permalink":"/byte_vault/string-interning-rust"}}')}}]);