<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="rss.xsl"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Byte Vault Blog</title>
        <link>https://twistingtwists.github.io/byte_vault</link>
        <description>Byte Vault Blog</description>
        <lastBuildDate>Mon, 21 Jul 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[The Day I Taught Claude Code to Work Without Me (And How You Can Too)]]></title>
            <link>https://twistingtwists.github.io/byte_vault/claude-code-context-engineering-v2</link>
            <guid>https://twistingtwists.github.io/byte_vault/claude-code-context-engineering-v2</guid>
            <pubDate>Mon, 21 Jul 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[<TldrCallout]]></description>
            <content:encoded><![CDATA[<div style="border:2px solid #ffb300;border-radius:8px;background:#fffbe7;padding:1em;margin:1em 0;box-shadow:0 2px 8px rgba(0,0,0,0.06)"><b style="font-size:1.2em">🧃 TL;DR</b><ul style="margin:0"><li><b>Problem:</b> <!-- -->You're trapped micromanaging Claude Code instead of building</li><li><b>Solution:</b> <!-- -->Train Claude Code once, then let it work autonomously</li><li><b>How it Works:</b> <!-- -->Strategic context engineering: CLAUDE.md files, systematic workflows, and learning capture</li><li><b>Benefit:</b> <!-- -->Claude Code becomes your autonomous teammate</li></ul></div>
<p>Here is <a href="https://gist.github.com/tripathi456/bfaf9add4b70bff131cd574c2f93cfac" target="_blank" rel="noopener noreferrer">CLAUDE.md</a></p>
<!-- -->
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="day-0-just-moved-from-cursor-to-claude-code">Day 0: Just moved from cursor to claude code<a href="https://twistingtwists.github.io/byte_vault/claude-code-context-engineering-v2#day-0-just-moved-from-cursor-to-claude-code" class="hash-link" aria-label="Direct link to Day 0: Just moved from cursor to claude code" title="Direct link to Day 0: Just moved from cursor to claude code">​</a></h2>
<p><em>It's 11 PM on a Tuesday. My token budget just hit zero. Claude Code is asking me the same question for the fourth time: "What coding style does this project use?" I've spent 6 hours being a glorified copy-paste machine, explaining the same context over and over.</em></p>
<p><em>Sound familiar?</em></p>
<p>That night, I realized something critical: <strong>Claude Code is teachable</strong>. But I was the worst teacher on Earth.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="day-1-fighting-claude-code-the-problem">Day 1: Fighting Claude Code (The Problem)<a href="https://twistingtwists.github.io/byte_vault/claude-code-context-engineering-v2#day-1-fighting-claude-code-the-problem" class="hash-link" aria-label="Direct link to Day 1: Fighting Claude Code (The Problem)" title="Direct link to Day 1: Fighting Claude Code (The Problem)">​</a></h2>
<p>Every conversation was Groundhog Day:</p>
<ul>
<li>"What's our testing framework again?"</li>
<li>"How do we name files in this project?"</li>
<li>"What's the deployment process?"</li>
</ul>
<p>I was Claude Code's personal Wikipedia. <strong>This had to change.</strong></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="day-2-the-teaching-template-the-mentor">Day 2: The Teaching Template (The Mentor)<a href="https://twistingtwists.github.io/byte_vault/claude-code-context-engineering-v2#day-2-the-teaching-template-the-mentor" class="hash-link" aria-label="Direct link to Day 2: The Teaching Template (The Mentor)" title="Direct link to Day 2: The Teaching Template (The Mentor)">​</a></h2>
<blockquote>
<p>What if Claude Code could remember your project like a team member who's been there for years?</p>
</blockquote>
<p>Instead of explaining everything every time, I wrote a template. The gist is:</p>
<div class="language-md codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-md codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token title important punctuation" style="color:#393A34">#</span><span class="token title important"> Communication: Be concise, reference past learnings from docs/work/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token title important punctuation" style="color:#393A34">#</span><span class="token title important"> File Naming: YYYY-MM-DD-[001]-[category]-[summary].md  </span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token title important punctuation" style="color:#393A34">#</span><span class="token title important"> Never code without checking docs/work/ for similar past solutions</span><br></span></code></pre></div></div>
<p>That's it. <strong>This eliminated hours of repetitive context.</strong></p>
<div class="my-4"><button class="inline-flex items-center gap-2 text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 rounded-md px-2 py-1 -mx-2 -my-1" aria-expanded="false"><svg class="w-4 h-4 transition-transform duration-200" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path></svg>See the prompt →</button><div class="overflow-hidden transition-all duration-300 ease-in-out max-h-0 opacity-0"><div class="border-l-2 border-gray-200 dark:border-gray-700 pl-4 text-sm"><div class="language-md codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-md codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token title important punctuation" style="color:#393A34">#</span><span class="token title important"> Project: [Your Project Name]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token title important punctuation" style="color:#393A34">##</span><span class="token title important"> Tech Stack &amp; Tooling</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token bold content">Language</span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token plain">: Python 3.11+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token bold content">Package Manager</span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token plain">: </span><span class="token code-snippet code keyword" style="color:#00009f">`uv`</span><span class="token plain"> (use </span><span class="token code-snippet code keyword" style="color:#00009f">`uv add &lt;dependency&gt;`</span><span class="token plain">, </span><span class="token code-snippet code keyword" style="color:#00009f">`uv run &lt;script&gt;`</span><span class="token plain">)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token bold content">Testing</span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token plain">: pytest with coverage</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token bold content">Linting</span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token plain">: ruff + mypy</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token title important punctuation" style="color:#393A34">##</span><span class="token title important"> Systematic File Naming</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Format: </span><span class="token code-snippet code keyword" style="color:#00009f">`YYYY-MM-DD-[001-999]-[category]-[four-word-summary].md`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Folder: </span><span class="token code-snippet code keyword" style="color:#00009f">`docs/work/`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Categories: </span><span class="token code-snippet code keyword" style="color:#00009f">`bug`</span><span class="token plain"> | </span><span class="token code-snippet code keyword" style="color:#00009f">`feature`</span><span class="token plain"> | </span><span class="token code-snippet code keyword" style="color:#00009f">`task`</span><span class="token plain"> | </span><span class="token code-snippet code keyword" style="color:#00009f">`research`</span><span class="token plain"> | </span><span class="token code-snippet code keyword" style="color:#00009f">`learnings`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Examples:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token code-snippet code keyword" style="color:#00009f">`2025-07-18-001-feature-user-authentication-system.md`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token code-snippet code keyword" style="color:#00009f">`2025-07-18-002-bug-database-connection-timeout.md`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token title important punctuation" style="color:#393A34">##</span><span class="token title important"> Communication Style</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token bold content">Concise</span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token plain">: No fluff, direct responses</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token bold content">Evidence-based</span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token plain">: Show, don't just tell</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token bold content">Contextual</span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token plain">: Reference past learnings from </span><span class="token code-snippet code keyword" style="color:#00009f">`docs/work/`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token title important punctuation" style="color:#393A34">##</span><span class="token title important"> Planning Protocol</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">1.</span><span class="token plain"> </span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token bold content">Context Gathering</span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token plain">: Check </span><span class="token code-snippet code keyword" style="color:#00009f">`docs/work/`</span><span class="token plain"> for relevant past decisions</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">2.</span><span class="token plain"> </span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token bold content">Assumption Documentation</span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token plain">: Explicit assumptions in plan files</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">3.</span><span class="token plain"> </span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token bold content">Execution Gate</span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token plain">: Only proceed after planning is complete</span><br></span></code></pre></div></div></div></div></div>
<p><strong>The transformation was instant.</strong> Claude Code started referencing past decisions, avoiding repeated mistakes, and building on previous work. <strong>It finally felt like working with a teammate.</strong></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="day-3-the-learning-moment---30-context---the-training">Day 3: The Learning Moment - 30% context - (The Training)<a href="https://twistingtwists.github.io/byte_vault/claude-code-context-engineering-v2#day-3-the-learning-moment---30-context---the-training" class="hash-link" aria-label="Direct link to Day 3: The Learning Moment - 30% context - (The Training)" title="Direct link to Day 3: The Learning Moment - 30% context - (The Training)">​</a></h2>
<blockquote>
<p>What if Claude Code could learn from every mistake and never repeat it?</p>
</blockquote>
<p>When your context hits 30%, you have one chance to crystallize everything learned. Miss it, and you go back to day 1.</p>
<div class="my-4"><button class="inline-flex items-center gap-2 text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 rounded-md px-2 py-1 -mx-2 -my-1" aria-expanded="false"><svg class="w-4 h-4 transition-transform duration-200" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path></svg>See the prompt →</button><div class="overflow-hidden transition-all duration-300 ease-in-out max-h-0 opacity-0"><div class="border-l-2 border-gray-200 dark:border-gray-700 pl-4 text-sm"><div class="language-md codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-md codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">When context drops below 30%: </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">1.</span><span class="token plain"> Document every decision made</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">2.</span><span class="token plain"> List what failed (with code snippets)  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">3.</span><span class="token plain"> Note what worked brilliantly</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">4.</span><span class="token plain"> Write handoff notes for next session</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Use the </span><span class="token code-snippet code keyword" style="color:#00009f">`Systematic File Naming`</span><span class="token plain"> given above.</span><br></span></code></pre></div></div></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="day-4-the-autonomous-engineer-the-victory">Day 4: The Autonomous Engineer (The Victory)<a href="https://twistingtwists.github.io/byte_vault/claude-code-context-engineering-v2#day-4-the-autonomous-engineer-the-victory" class="hash-link" aria-label="Direct link to Day 4: The Autonomous Engineer (The Victory)" title="Direct link to Day 4: The Autonomous Engineer (The Victory)">​</a></h2>
<p>I saw this tweet - <a href="https://x.com/_svs_/status/1928753160337637726" target="_blank" rel="noopener noreferrer">@svs used Claude Code as an MCP client to write an MCP server</a>.</p>
<p>Something magical discovered: <strong>When put in verifiable workflows, Claude Code started working much better!</strong>:</p>
<ul>
<li>Write code → Run tests → Fix failures → Repeat</li>
<li>Build feature → Deploy to staging → Check logs → Iterate</li>
<li>Analyze data → Generate insights → Verify against sources → Summarize</li>
</ul>
<p><strong>I wasn't micromanaging anymore. I was collaborating.</strong></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-war-stories-from-other-folks">The War Stories from other folks<a href="https://twistingtwists.github.io/byte_vault/claude-code-context-engineering-v2#the-war-stories-from-other-folks" class="hash-link" aria-label="Direct link to The War Stories from other folks" title="Direct link to The War Stories from other folks">​</a></h2>
<p>Met awesome folks at <a href="https://hasgeek.com/fifthelephant/2025/" target="_blank" rel="noopener noreferrer">Fifth Elephant Conference</a> where we shared claude code learnings.</p>
<div class="relative bg-emerald-50/30 dark:bg-emerald-950/10 rounded-xl p-6 my-8 border-2 border-emerald-200 dark:border-emerald-800"><div class="absolute top-0 right-0 w-12 h-12 overflow-hidden"><div class="absolute top-0 right-0 w-0 h-0 border-l-12 border-b-12 border-l-transparent border-b-emerald-200 dark:border-b-emerald-800"></div></div><div class="flex items-center gap-3 mb-4"><div class="flex-shrink-0 w-10 h-10 bg-emerald-100 dark:bg-emerald-900/30 rounded-full flex items-center justify-center"><svg class="w-5 h-5 text-emerald-600 dark:text-emerald-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path></svg></div><div><div class="text-xs font-medium text-emerald-700 dark:text-emerald-300 uppercase tracking-wide">Pro Tips from</div><a href="https://www.linkedin.com/in/codingnirvana/" target="_blank" rel="noopener noreferrer" class="text-lg font-semibold text-emerald-900 dark:text-emerald-100 hover:text-emerald-700 dark:hover:text-emerald-300 transition-colors">Rajesh</a></div></div><div class="border-l-4 border-emerald-300 dark:border-emerald-700 pl-4 text-gray-700 dark:text-gray-300"><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-token-budget-hack-that-doubled-my-productivity">The Token Budget Hack That Doubled My Productivity<a href="https://twistingtwists.github.io/byte_vault/claude-code-context-engineering-v2#the-token-budget-hack-that-doubled-my-productivity" class="hash-link" aria-label="Direct link to The Token Budget Hack That Doubled My Productivity" title="Direct link to The Token Budget Hack That Doubled My Productivity">​</a></h3><p>Rajesh was burning through tokens like crazy at his startup. Then he discovered something weird about Claude's <a href="https://support.anthropic.com/en/articles/11145838-using-claude-code-with-your-pro-or-max-plan" target="_blank" rel="noopener noreferrer">5-hour windows</a>.</p><p><strong>His discovery:</strong> Start sessions at 7 AM instead of 9 AM.</p><p>Why? The overlapping windows create a "double token zone" during peak hours:</p><p><strong>Before:</strong> 9am-2pm, 2pm-7pm (standard)<br>
<strong>After:</strong> 7am-12pm, 12pm-5pm, 5pm-10pm (overlapping)</p><p><strong>Result:</strong> Between 9am-5pm = <strong>double tokens available</strong></p><svg viewBox="0 0 800 200" xmlns="http://www.w3.org/2000/svg"><line x1="50" y1="180" x2="750" y2="180" stroke="#e5e7eb" stroke-width="2"></line><text x="50" y="195" font-family="Arial" font-size="12" fill="#6b7280" text-anchor="middle">7am</text><text x="150" y="195" font-family="Arial" font-size="12" fill="#6b7280" text-anchor="middle">9am</text><text x="300" y="195" font-family="Arial" font-size="12" fill="#6b7280" text-anchor="middle">12pm</text><text x="400" y="195" font-family="Arial" font-size="12" fill="#6b7280" text-anchor="middle">2pm</text><text x="550" y="195" font-family="Arial" font-size="12" fill="#6b7280" text-anchor="middle">5pm</text><text x="650" y="195" font-family="Arial" font-size="12" fill="#6b7280" text-anchor="middle">7pm</text><text x="750" y="195" font-family="Arial" font-size="12" fill="#6b7280" text-anchor="middle">10pm</text><rect x="150" y="25" width="500" height="140" fill="#10b981" opacity="0.1" rx="6"></rect><rect x="150" y="30" width="500" height="25" fill="#3b82f6" rx="4"></rect><text x="160" y="47" font-family="Arial" font-size="13" fill="white">Standard: 9am-7pm</text><rect x="50" y="80" width="250" height="20" fill="#dc2626" rx="4"></rect><text x="60" y="93" font-family="Arial" font-size="12" fill="white">Window A: 7am-12pm</text><rect x="300" y="110" width="250" height="20" fill="#8b5cf6" rx="4"></rect><text x="310" y="123" font-family="Arial" font-size="12" fill="white">Window B: 12pm-5pm</text><rect x="550" y="140" width="200" height="20" fill="#06b6d4" rx="4"></rect><text x="560" y="153" font-family="Arial" font-size="12" fill="white">Window C: 5pm-10pm</text><text x="400" y="20" font-family="Arial" font-size="14" fill="#10b981" text-anchor="middle" font-weight="bold">Double Tokens in Overlap Zones</text></svg><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-csv-strategy-that-saved-hours">The CSV Strategy That Saved Hours<a href="https://twistingtwists.github.io/byte_vault/claude-code-context-engineering-v2#the-csv-strategy-that-saved-hours" class="hash-link" aria-label="Direct link to The CSV Strategy That Saved Hours" title="Direct link to The CSV Strategy That Saved Hours">​</a></h3><p>Rajesh's team was dealing with lots of data analysis requests. CSV files everywhere. Claude kept hitting context limits trying to process raw data.</p><p><strong>The breakthrough:</strong> Stop feeding Claude data. Feed it scripts.</p><p><strong>Old way:</strong> "Here's a 10MB CSV, analyze it"<br>
<strong>New way:</strong> "Write a script to analyze this CSV type, then run it"</p><p><strong>Why it works:</strong> Scripts are tiny. Results are focused. Claude guides itself using its own analysis output.</p></div></div>
<div class="relative bg-emerald-50/30 dark:bg-emerald-950/10 rounded-xl p-6 my-8 border-2 border-emerald-200 dark:border-emerald-800"><div class="absolute top-0 right-0 w-12 h-12 overflow-hidden"><div class="absolute top-0 right-0 w-0 h-0 border-l-12 border-b-12 border-l-transparent border-b-emerald-200 dark:border-b-emerald-800"></div></div><div class="flex items-center gap-3 mb-4"><div class="flex-shrink-0 w-10 h-10 bg-emerald-100 dark:bg-emerald-900/30 rounded-full flex items-center justify-center"><svg class="w-5 h-5 text-emerald-600 dark:text-emerald-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path></svg></div><div><div class="text-xs font-medium text-emerald-700 dark:text-emerald-300 uppercase tracking-wide">Pro Tips from</div><a href="https://www.shelfradar.ai/" target="_blank" rel="noopener noreferrer" class="text-lg font-semibold text-emerald-900 dark:text-emerald-100 hover:text-emerald-700 dark:hover:text-emerald-300 transition-colors">Ashwin</a></div></div><div class="border-l-4 border-emerald-300 dark:border-emerald-700 pl-4 text-gray-700 dark:text-gray-300"><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-accidental-discovery-that-changed-everything">The Accidental Discovery That Changed Everything<a href="https://twistingtwists.github.io/byte_vault/claude-code-context-engineering-v2#the-accidental-discovery-that-changed-everything" class="hash-link" aria-label="Direct link to The Accidental Discovery That Changed Everything" title="Direct link to The Accidental Discovery That Changed Everything">​</a></h3><p>Ashwin was debugging a frustrating session. In a moment of rage, he accidentally hit ESC four times.</p><p><strong>What happened next blew his mind.</strong></p><p>Claude Code showed him a prompt history he'd never seen before. Every conversation. Every context. <strong>Time travel for developers.</strong></p><p><strong>The magic combo:</strong> ESC + ESC + ESC + ESC = Prompt history navigation</p><p><strong>Game changer:</strong> You can resurrect any previous session state instantly.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="claude-code-as-your-database-whisperer">Claude Code as Your Database Whisperer<a href="https://twistingtwists.github.io/byte_vault/claude-code-context-engineering-v2#claude-code-as-your-database-whisperer" class="hash-link" aria-label="Direct link to Claude Code as Your Database Whisperer" title="Direct link to Claude Code as Your Database Whisperer">​</a></h3><p>At ShelfRadar, Ashwin deployed Claude Code as their internal SQL agent.</p><p><strong>The setup:</strong> Claude Code + database schema = autonomous query optimizer</p><p><strong>The result:</strong></p><ul>
<li>Ad-hoc queries refined automatically</li>
<li>Schema changes don't break queries</li>
<li>Claude evolves with your database</li>
</ul></div></div>
<p><strong>The question isn't whether Claude Code is teachable.</strong><br>
<strong>The question is: Are you ready to become its teacher?</strong></p>
<hr>
<p><em>This revolution moves fast. By the time you read this, someone's already teaching Claude Code to do things we haven't imagined yet.</em></p>
<p><strong>Further Reading:</strong></p>
<ul>
<li><a href="https://manus.im/blog/Context-Engineering-for-AI-Agents-Lessons-from-Building-Manus" target="_blank" rel="noopener noreferrer">Context Engineering by Manus</a></li>
<li><a href="https://southbridge-research.notion.site/claude-code-an-agentic-cleanroom-analysis" target="_blank" rel="noopener noreferrer">Hrishi's Claude Code Analysis</a></li>
</ul>]]></content:encoded>
            <category>AI</category>
            <category>Context Engineering</category>
            <category>claude-code</category>
            <category>productivity</category>
        </item>
        <item>
            <title><![CDATA[DB-010: Dual Anomalies]]></title>
            <link>https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dual-anomalies</link>
            <guid>https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dual-anomalies</guid>
            <pubDate>Thu, 12 Jun 2025 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div class="tableOfContentsInline_prmo"></div>
<!-- -->
<div class="relative"><div class="w-full min-h-screen bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 p-4 sm:p-6 font-sans"><header class="mb-6"><h1 class="text-2xl sm:text-3xl font-bold mb-1">Combined Anomaly: Dirty Read Leads to Lost Update</h1><p class="text-sm text-gray-600 dark:text-gray-400">A more complex scenario with 3 transactions on a non-MVCC system. It shows how T2 performing a 'Dirty Read' on T1's uncommitted data directly enables the 'Lost Update' anomaly when T1 later aborts.</p></header><div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl p-4 mb-6"><div class="flex flex-col sm:flex-row items-center justify-between gap-3 mb-3"><div class="flex gap-2 flex-wrap justify-center"><button class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:bg-gray-400 text-sm">Auto Run</button><button class="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 text-sm">Reset</button><div class="sm:border-l border-gray-300 dark:border-gray-700 sm:pl-2 flex gap-2"><button disabled="" class="px-3 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 disabled:bg-gray-400 text-sm">← Step</button><button class="px-3 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 disabled:bg-gray-400 text-sm">Step →</button></div></div><div class="text-right text-xs sm:text-sm"><div class="font-mono text-gray-700 dark:text-gray-300">Step: <!-- -->0<!-- -->/<!-- -->10<!-- --> | Time: <!-- -->0</div><div class="text-gray-500 dark:text-gray-400">Next TxID: <!-- -->1</div></div></div></div><div class="grid grid-cols-1 lg:grid-cols-5 gap-4 mb-6 text-xs sm:text-sm"><div class="lg:col-span-3 bg-white dark:bg-gray-800 p-4 rounded-lg shadow-xl"><h3 class="font-semibold mb-3 text-base sm:text-lg border-b border-gray-200 dark:border-gray-700 pb-2">Database State (No Versions)</h3></div><div class="lg:col-span-2 space-y-4"><div class="bg-white dark:bg-gray-800 p-3 rounded-lg shadow-xl"><h3 class="font-semibold mb-2 border-b border-gray-200 dark:border-gray-700 pb-1 text-sm sm:text-base">Current Operation</h3><div class="text-gray-500 italic">None</div></div><div class="bg-white dark:bg-gray-800 p-3 rounded-lg shadow-xl max-h-96 overflow-y-auto"><h3 class="font-semibold mb-2 border-b border-gray-200 dark:border-gray-700 pb-1 text-sm sm:text-base">Transaction States &amp; Undo Logs</h3><div class="text-gray-500 italic text-xs">No active transactions.</div></div></div></div><div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl p-4 sm:p-6"><h2 class="text-base sm:text-xl font-semibold mb-2 text-gray-800 dark:text-gray-200">Transaction Timelines</h2><div class="relative mb-4 pt-4"><div class="absolute top-4 left-0 right-0 h-px bg-gray-300 dark:bg-gray-600"></div><div class="flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-2 px-[2.5%] w-[95%]"><div class="relative flex flex-col items-center"><div class="absolute w-px h-2 bg-gray-300 dark:bg-gray-600 -top-2"></div><div>0</div></div><div class="relative flex flex-col items-center"><div class="absolute w-px h-2 bg-gray-300 dark:bg-gray-600 -top-2"></div><div>10</div></div><div class="relative flex flex-col items-center"><div class="absolute w-px h-2 bg-gray-300 dark:bg-gray-600 -top-2"></div><div>20</div></div><div class="relative flex flex-col items-center"><div class="absolute w-px h-2 bg-gray-300 dark:bg-gray-600 -top-2"></div><div>30</div></div><div class="relative flex flex-col items-center"><div class="absolute w-px h-2 bg-gray-300 dark:bg-gray-600 -top-2"></div><div>40</div></div><div class="relative flex flex-col items-center"><div class="absolute w-px h-2 bg-gray-300 dark:bg-gray-600 -top-2"></div><div>50</div></div><div class="relative flex flex-col items-center"><div class="absolute w-px h-2 bg-gray-300 dark:bg-gray-600 -top-2"></div><div>60</div></div><div class="relative flex flex-col items-center"><div class="absolute w-px h-2 bg-gray-300 dark:bg-gray-600 -top-2"></div><div>70</div></div><div class="relative flex flex-col items-center"><div class="absolute w-px h-2 bg-gray-300 dark:bg-gray-600 -top-2"></div><div>80</div></div><div class="relative flex flex-col items-center"><div class="absolute w-px h-2 bg-gray-300 dark:bg-gray-600 -top-2"></div><div>90</div></div><div class="relative flex flex-col items-center"><div class="absolute w-px h-2 bg-gray-300 dark:bg-gray-600 -top-2"></div><div>100</div></div></div></div><div class="space-y-3 relative"><div class="relative"><div class="flex items-center mb-0.5"><div class="w-2.5 h-2.5 rounded-full mr-1.5 shrink-0" style="background-color:#3b82f6"></div><h3 class="text-xs sm:text-sm font-semibold text-gray-800 dark:text-gray-200">T1</h3></div><div class="relative h-6 bg-gray-100 dark:bg-gray-700 rounded"><div class="absolute top-0 left-0 h-full rounded opacity-30" style="background-color:#3b82f6;width:86.36363636363636%"></div><div class="absolute top-0.5 w-5 h-5 rounded-full border flex items-center justify-center text-[9px] font-bold transition-all bg-gray-200 dark:bg-gray-600 opacity-70 border-gray-400" style="left:calc(8.636363636363637% - 10px);color:text-gray-500" title="BEGIN">B</div><div class="absolute top-0.5 w-5 h-5 rounded-full border flex items-center justify-center text-[9px] font-bold transition-all bg-gray-200 dark:bg-gray-600 opacity-70 border-gray-400" style="left:calc(25.909090909090907% - 10px);color:text-gray-500" title="WRITE">W</div><div class="absolute top-0.5 w-5 h-5 rounded-full border flex items-center justify-center text-[9px] font-bold transition-all bg-gray-200 dark:bg-gray-600 opacity-70 border-gray-400" style="left:calc(86.36363636363636% - 10px);color:text-gray-500" title="ABORT">A</div></div></div><div class="relative"><div class="flex items-center mb-0.5"><div class="w-2.5 h-2.5 rounded-full mr-1.5 shrink-0" style="background-color:#e11d48"></div><h3 class="text-xs sm:text-sm font-semibold text-gray-800 dark:text-gray-200">T2</h3></div><div class="relative h-6 bg-gray-100 dark:bg-gray-700 rounded"><div class="absolute top-0 left-0 h-full rounded opacity-30" style="background-color:#e11d48;width:69.0909090909091%"></div><div class="absolute top-0.5 w-5 h-5 rounded-full border flex items-center justify-center text-[9px] font-bold transition-all bg-gray-200 dark:bg-gray-600 opacity-70 border-gray-400" style="left:calc(17.272727272727273% - 10px);color:text-gray-500" title="BEGIN">B</div><div class="absolute top-0.5 w-5 h-5 rounded-full border flex items-center justify-center text-[9px] font-bold transition-all bg-gray-200 dark:bg-gray-600 opacity-70 border-gray-400" style="left:calc(43.18181818181818% - 10px);color:text-gray-500" title="READ">R</div><div class="absolute top-0.5 w-5 h-5 rounded-full border flex items-center justify-center text-[9px] font-bold transition-all bg-gray-200 dark:bg-gray-600 opacity-70 border-gray-400" style="left:calc(51.81818181818181% - 10px);color:text-gray-500" title="WRITE">W</div><div class="absolute top-0.5 w-5 h-5 rounded-full border flex items-center justify-center text-[9px] font-bold transition-all bg-gray-200 dark:bg-gray-600 opacity-70 border-gray-400" style="left:calc(69.0909090909091% - 10px);color:text-gray-500" title="COMMIT">C</div></div></div><div class="relative"><div class="flex items-center mb-0.5"><div class="w-2.5 h-2.5 rounded-full mr-1.5 shrink-0" style="background-color:#f59e0b"></div><h3 class="text-xs sm:text-sm font-semibold text-gray-800 dark:text-gray-200">T3</h3></div><div class="relative h-6 bg-gray-100 dark:bg-gray-700 rounded"><div class="absolute top-0 left-0 h-full rounded opacity-30" style="background-color:#f59e0b;width:77.72727272727273%"></div><div class="absolute top-0.5 w-5 h-5 rounded-full border flex items-center justify-center text-[9px] font-bold transition-all bg-gray-200 dark:bg-gray-600 opacity-70 border-gray-400" style="left:calc(34.54545454545455% - 10px);color:text-gray-500" title="BEGIN">B</div><div class="absolute top-0.5 w-5 h-5 rounded-full border flex items-center justify-center text-[9px] font-bold transition-all bg-gray-200 dark:bg-gray-600 opacity-70 border-gray-400" style="left:calc(60.45454545454545% - 10px);color:text-gray-500" title="READ">R</div><div class="absolute top-0.5 w-5 h-5 rounded-full border flex items-center justify-center text-[9px] font-bold transition-all bg-gray-200 dark:bg-gray-600 opacity-70 border-gray-400" style="left:calc(77.72727272727273% - 10px);color:text-gray-500" title="COMMIT">C</div></div></div></div></div></div><button class="absolute right-4 top-4 z-50 flex items-center gap-2 px-3 py-2 rounded-lg bg-blue-600 hover:bg-blue-700 text-white transition-colors duration-200"><svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M3 4a1 1 0 011-1h4a1 1 0 010 2H5.414l2.293 2.293a1 1 0 11-1.414 1.414L4 6.414V8a1 1 0 01-2 0V4zm14 0a1 1 0 00-1-1h-4a1 1 0 100 2h2.586l-2.293 2.293a1 1 0 001.414 1.414L16 6.414V8a1 1 0 102 0V4zM3 16a1 1 0 001 1h4a1 1 0 100-2H5.414l2.293-2.293a1 1 0 00-1.414-1.414L4 13.586V12a1 1 0 10-2 0v4zm14 0a1 1 0 01-1 1h-4a1 1 0 110-2h2.586l-2.293-2.293a1 1 0 011.414-1.414L16 13.586V12a1 1 0 112 0v4z" clip-rule="evenodd"></path></svg>Full Screen</button></div>]]></content:encoded>
            <category>Databases</category>
            <category>Transactions</category>
            <category>MVCC</category>
        </item>
        <item>
            <title><![CDATA[DB-008: Phantom Read]]></title>
            <link>https://twistingtwists.github.io/byte_vault/database-isolation-phantom-read</link>
            <guid>https://twistingtwists.github.io/byte_vault/database-isolation-phantom-read</guid>
            <pubDate>Sat, 07 Jun 2025 00:01:00 GMT</pubDate>
            <content:encoded><![CDATA[<div class="tableOfContentsInline_prmo"></div>
<!-- -->
<div class="relative"><div class="w-full min-h-screen bg-gray-50 dark:bg-gray-900 p-6 font-sans"><div class="mb-6"><h1 class="text-3xl font-bold text-gray-800 dark:text-gray-100 mb-2">Transaction Timeline: Phantom Read Anomaly</h1><p class="text-gray-600 dark:text-gray-400">T1 scans for 'Engineering' employees. T2 inserts and commits a new 'Engineering' employee. T1's subsequent identical scan finds this new 'phantom' row.</p></div><div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 mb-6"><div class="flex items-center justify-between mb-4"><div class="flex gap-3"><button class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:bg-gray-400">Auto Run</button><button class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700">Reset</button><div class="border-l border-gray-300 dark:border-gray-600 pl-3 flex gap-2"><button disabled="" class="px-3 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 disabled:bg-gray-400">← Step</button><button class="px-3 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 disabled:bg-gray-400">Step →</button></div></div><div class="text-right"><div class="text-lg font-mono dark:text-gray-100">Step: <!-- -->0<!-- --> / <!-- -->7</div><div class="text-xs text-gray-500 dark:text-gray-400">Time: <!-- -->0</div></div></div><div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm"><div class="p-3 rounded bg-gray-100 dark:bg-gray-700"><h3 class="font-semibold mb-2 dark:text-gray-200">Committed Database State</h3><div class="mb-2"><h4 class="font-medium text-sm dark:text-gray-300 capitalize">employees</h4><table class="w-full text-xs table-auto"><thead class="text-left dark:text-gray-300"><tr><th class="p-1 border-b dark:border-gray-600 font-normal">id</th><th class="p-1 border-b dark:border-gray-600 font-normal">name</th><th class="p-1 border-b dark:border-gray-600 font-normal">department</th><th class="p-1 border-b dark:border-gray-600 font-normal">salary</th></tr></thead><tbody class="dark:text-gray-100"><tr class=""><td class="p-1 border-b dark:border-gray-700">1</td><td class="p-1 border-b dark:border-gray-700">Alice</td><td class="p-1 border-b dark:border-gray-700">Engineering</td><td class="p-1 border-b dark:border-gray-700">90000</td></tr><tr class=""><td class="p-1 border-b dark:border-gray-700">2</td><td class="p-1 border-b dark:border-gray-700">Bob</td><td class="p-1 border-b dark:border-gray-700">Sales</td><td class="p-1 border-b dark:border-gray-700">75000</td></tr><tr class=""><td class="p-1 border-b dark:border-gray-700">4</td><td class="p-1 border-b dark:border-gray-700">David</td><td class="p-1 border-b dark:border-gray-700">Engineering</td><td class="p-1 border-b dark:border-gray-700">85000</td></tr></tbody></table></div></div><div class="p-3 rounded bg-yellow-100 dark:bg-yellow-900/50"><h3 class="font-semibold mb-2 dark:text-gray-200">Uncommitted Inserts</h3><div class="text-gray-500 dark:text-gray-400 italic">None</div></div><div class="p-3 rounded bg-green-100 dark:bg-green-900/50"><h3 class="font-semibold mb-2 dark:text-gray-200">Scan Log</h3><div class="text-gray-500 dark:text-gray-400 italic">No scans yet</div></div><div class="p-3 rounded bg-blue-100 dark:bg-gray-700"><h3 class="font-semibold mb-2 dark:text-gray-200">Current Operation</h3><div class="text-gray-500 dark:text-gray-400 italic">None</div></div></div></div><div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6"><h2 class="text-xl font-semibold mb-4 dark:text-gray-100">Transaction Timelines</h2><div class="relative mb-6 pt-3"><div class="absolute top-4 left-0 right-0 h-px bg-gray-300 dark:bg-gray-600"></div><div class="flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-2 px-[2.5%] w-[95%]"><div class="relative flex flex-col items-center"><div class="absolute w-px h-2 bg-gray-300 dark:bg-gray-600 -top-2"></div><div>0</div></div><div class="relative flex flex-col items-center"><div class="absolute w-px h-2 bg-gray-300 dark:bg-gray-600 -top-2"></div><div>10</div></div><div class="relative flex flex-col items-center"><div class="absolute w-px h-2 bg-gray-300 dark:bg-gray-600 -top-2"></div><div>20</div></div><div class="relative flex flex-col items-center"><div class="absolute w-px h-2 bg-gray-300 dark:bg-gray-600 -top-2"></div><div>30</div></div><div class="relative flex flex-col items-center"><div class="absolute w-px h-2 bg-gray-300 dark:bg-gray-600 -top-2"></div><div>40</div></div><div class="relative flex flex-col items-center"><div class="absolute w-px h-2 bg-gray-300 dark:bg-gray-600 -top-2"></div><div>50</div></div><div class="relative flex flex-col items-center"><div class="absolute w-px h-2 bg-gray-300 dark:bg-gray-600 -top-2"></div><div>60</div></div></div></div><div class="space-y-6"><div class="relative"><div class="flex items-center mb-2"><div class="w-3 h-3 rounded-full mr-3 flex-shrink-0" style="background-color:#22c55e"></div><h3 class="text-lg font-semibold dark:text-gray-100">T1</h3></div><div class="relative h-8 bg-gray-100 dark:bg-gray-700 rounded"><div class="absolute top-0 left-0 h-full rounded opacity-30" style="background-color:#22c55e;width:81.42857142857143%"></div><div class="absolute top-0.5 w-7 h-7 rounded-full border-2 flex items-center justify-center text-xs font-bold transition-all duration-300 group bg-gray-200 dark:bg-gray-600 opacity-70" style="left:calc(0% - 18px);border-color:#22c55e;color:#6b7280" title="BEGIN">B</div><div class="absolute top-0.5 w-7 h-7 rounded-full border-2 flex items-center justify-center text-xs font-bold transition-all duration-300 group bg-gray-200 dark:bg-gray-600 opacity-70" style="left:calc(13.571428571428571% - 18px);border-color:#22c55e;color:#6b7280" title="SCAN employees (ID:s1)">S</div><div class="absolute top-0.5 w-7 h-7 rounded-full border-2 flex items-center justify-center text-xs font-bold transition-all duration-300 group bg-gray-200 dark:bg-gray-600 opacity-70" style="left:calc(67.85714285714286% - 18px);border-color:#22c55e;color:#6b7280" title="SCAN employees (ID:s2)">S</div><div class="absolute top-0.5 w-7 h-7 rounded-full border-2 flex items-center justify-center text-xs font-bold transition-all duration-300 group bg-gray-200 dark:bg-gray-600 opacity-70" style="left:calc(81.42857142857143% - 18px);border-color:#22c55e;color:#6b7280" title="COMMIT">C</div></div></div><div class="relative"><div class="flex items-center mb-2"><div class="w-3 h-3 rounded-full mr-3 flex-shrink-0" style="background-color:#f59e0b"></div><h3 class="text-lg font-semibold dark:text-gray-100">T2</h3></div><div class="relative h-8 bg-gray-100 dark:bg-gray-700 rounded"><div class="absolute top-0 left-0 h-full rounded opacity-30" style="background-color:#f59e0b;width:47.5%"></div><div class="absolute top-0.5 w-7 h-7 rounded-full border-2 flex items-center justify-center text-xs font-bold transition-all duration-300 group bg-gray-200 dark:bg-gray-600 opacity-70" style="left:calc(6.785714285714286% - 18px);border-color:#f59e0b;color:#6b7280" title="BEGIN">B</div><div class="absolute top-0.5 w-7 h-7 rounded-full border-2 flex items-center justify-center text-xs font-bold transition-all duration-300 group bg-gray-200 dark:bg-gray-600 opacity-70" style="left:calc(33.92857142857143% - 18px);border-color:#f59e0b;color:#6b7280" title="INSERT employees (ID:i1) - Data: Charlie">I</div><div class="absolute top-0.5 w-7 h-7 rounded-full border-2 flex items-center justify-center text-xs font-bold transition-all duration-300 group bg-gray-200 dark:bg-gray-600 opacity-70" style="left:calc(47.5% - 18px);border-color:#f59e0b;color:#6b7280" title="COMMIT">C</div></div></div></div><div class="mt-8 pt-4 border-t border-gray-200 dark:border-gray-700"><h4 class="font-semibold mb-2 dark:text-gray-100">Legend</h4><div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-x-4 gap-y-2 text-sm dark:text-gray-300"><div class="flex items-center gap-2"><div class="w-6 h-6 rounded-full border-2 border-gray-500 dark:border-gray-400 bg-white dark:bg-gray-700 flex items-center justify-center text-xs font-bold text-gray-700 dark:text-gray-200">B</div><span>Begin</span></div><div class="flex items-center gap-2"><div class="w-6 h-6 rounded-full border-2 border-gray-500 dark:border-gray-400 bg-white dark:bg-gray-700 flex items-center justify-center text-xs font-bold text-gray-700 dark:text-gray-200">S</div><span>Scan (Range Query)</span></div><div class="flex items-center gap-2"><div class="w-6 h-6 rounded-full border-2 border-gray-500 dark:border-gray-400 bg-white dark:bg-gray-700 flex items-center justify-center text-xs font-bold text-gray-700 dark:text-gray-200">I</div><span>Insert</span></div><div class="flex items-center gap-2"><div class="w-6 h-6 rounded-full border-2 border-gray-500 dark:border-gray-400 bg-white dark:bg-gray-700 flex items-center justify-center text-xs font-bold text-gray-700 dark:text-gray-200">C</div><span>Commit</span></div><div class="flex items-center gap-2"><div class="w-6 h-6 rounded-full border-2 border-gray-500 dark:border-gray-400 bg-white dark:bg-gray-700 flex items-center justify-center text-xs font-bold text-gray-700 dark:text-gray-200">A</div><span>Abort</span></div></div></div></div><div class="mt-6 bg-yellow-50 dark:bg-yellow-900/30 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4"><h3 class="font-semibold text-yellow-800 dark:text-yellow-200 mb-2">Understanding Phantom Reads</h3><p class="text-yellow-700 dark:text-yellow-300 text-sm mb-3">A <strong>Phantom Read</strong> occurs when a transaction executes a range query (e.g., "find all employees in Engineering") twice, and the set of rows returned by the second query is different from the first. This happens because another transaction has inserted or deleted rows that match the query's criteria and committed those changes in between the two queries of the first transaction. The newly appeared (or disappeared) rows are called "phantoms."</p><div class="bg-yellow-100 dark:bg-yellow-900/50 p-3 rounded text-sm mt-2"><h4 class="font-semibold mb-1 dark:text-yellow-100">Key Observation Points:</h4><ul class="text-xs space-y-1 list-disc list-inside text-yellow-700 dark:text-yellow-300"><li><strong>Step 2:</strong> T1's first scan of 'Engineering' employees finds Alice and David.</li><li><strong>Step 4 &amp; 5:</strong> T2 inserts 'Charlie' into 'Engineering' and commits this change.</li><li><strong>Step 6:</strong> T1's second scan of 'Engineering' employees now finds Alice, David, AND 'Charlie'. 'Charlie' is the phantom row.</li><li>This anomaly can lead to inconsistencies if T1 was performing calculations or making decisions based on the assumption that the set of rows matching its criteria would not change during its execution.</li><li>Phantom reads are typically prevented by higher isolation levels like Serializable, or by specific locking strategies (e.g., predicate locks, though not widely implemented, or careful range locking).</li></ul></div></div></div><button class="absolute right-4 top-4 z-50 flex items-center gap-2 px-3 py-2 rounded-lg bg-blue-600 hover:bg-blue-700 text-white transition-colors duration-200"><svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M3 4a1 1 0 011-1h4a1 1 0 010 2H5.414l2.293 2.293a1 1 0 11-1.414 1.414L4 6.414V8a1 1 0 01-2 0V4zm14 0a1 1 0 00-1-1h-4a1 1 0 100 2h2.586l-2.293 2.293a1 1 0 001.414 1.414L16 6.414V8a1 1 0 102 0V4zM3 16a1 1 0 001 1h4a1 1 0 100-2H5.414l2.293-2.293a1 1 0 00-1.414-1.414L4 13.586V12a1 1 0 10-2 0v4zm14 0a1 1 0 01-1 1h-4a1 1 0 110-2h2.586l-2.293-2.293a1 1 0 011.414-1.414L16 13.586V12a1 1 0 112 0v4z" clip-rule="evenodd"></path></svg>Full Screen</button></div>]]></content:encoded>
            <category>Databases</category>
            <category>Transactions</category>
        </item>
        <item>
            <title><![CDATA[DB-007: MVCC Visibility Rules]]></title>
            <link>https://twistingtwists.github.io/byte_vault/database-isolation-visualised-mvcc-visibility-rules</link>
            <guid>https://twistingtwists.github.io/byte_vault/database-isolation-visualised-mvcc-visibility-rules</guid>
            <pubDate>Fri, 23 May 2025 00:01:00 GMT</pubDate>
            <content:encoded><![CDATA[<div class="tableOfContentsInline_prmo"></div>
<!-- -->
<div class="relative"><div class="w-full min-h-screen bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 p-4 sm:p-6 font-sans"><header class="mb-6"><h1 class="text-2xl sm:text-3xl font-bold mb-1">MVCC Visibility Rules Demonstration</h1><p class="text-sm text-gray-600 dark:text-gray-400">Illustrates how transactions see data based on snapshot isolation. Focus on T3's reads and how its snapshot (taken at t=40) affects what it sees from T1 and T2, even after they commit.</p></header><div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl p-4 mb-6"><div class="flex flex-col sm:flex-row items-center justify-between gap-3 mb-3"><div class="flex gap-2 flex-wrap justify-center"><button class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:bg-gray-400 dark:disabled:bg-gray-600 text-sm">Auto Run</button><button class="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 dark:bg-gray-600 dark:hover:bg-gray-700 text-sm">Reset</button><div class="sm:border-l border-gray-300 dark:border-gray-700 sm:pl-2 flex gap-2"><button disabled="" class="px-3 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 disabled:bg-gray-400 dark:disabled:bg-gray-600 text-sm">← Step</button><button class="px-3 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 disabled:bg-gray-400 dark:disabled:bg-gray-600 text-sm">Step →</button></div></div><div class="text-right text-xs sm:text-sm"><div class="font-mono text-gray-700 dark:text-gray-300">Step: <!-- -->0<!-- -->/<!-- -->14<!-- --> | Time: <!-- -->0</div><div class="text-gray-500 dark:text-gray-400">Next TxID: <!-- -->1<!-- --> | Committed: [<!-- -->0<!-- -->]</div></div></div></div><div class="grid grid-cols-1 lg:grid-cols-5 gap-4 mb-6 text-xs sm:text-sm"><div class="lg:col-span-3 bg-white dark:bg-gray-800 p-4 rounded-lg shadow-xl"><h3 class="font-semibold mb-3 text-base sm:text-lg border-b border-gray-200 dark:border-gray-700 pb-2 text-gray-800 dark:text-gray-200">Data Item Versions (Global State)</h3></div><div class="lg:col-span-2 space-y-4"><div class="bg-white dark:bg-gray-800 p-3 rounded-lg shadow-xl"><h3 class="font-semibold mb-2 border-b border-gray-200 dark:border-gray-700 pb-1 text-sm sm:text-base text-gray-800 dark:text-gray-200">Current Operation</h3><div class="text-gray-500 dark:text-gray-400 italic">None</div></div><div class="bg-white dark:bg-gray-800 p-3 rounded-lg shadow-xl max-h-80 overflow-y-auto"><h3 class="font-semibold mb-2 border-b border-gray-200 dark:border-gray-700 pb-1 text-sm sm:text-base text-gray-800 dark:text-gray-200">Transaction States &amp; Snapshots</h3><div class="text-gray-500 dark:text-gray-400 italic text-xs">No active transactions.</div></div></div></div><div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl p-4 sm:p-6"><h2 class="text-base sm:text-xl font-semibold mb-2 text-gray-800 dark:text-gray-200">Transaction Timelines</h2> <div class="relative mb-4 pt-4"> <div class="absolute top-4 left-0 right-0 h-px bg-gray-300 dark:bg-gray-600 z-0"></div> <div class="flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-2 px-[2.5%] w-[95%] relative z-10"> <div class="relative flex flex-col items-center"><div class="absolute w-px h-2 bg-gray-300 dark:bg-gray-600 -top-2"></div><div>0</div></div><div class="relative flex flex-col items-center"><div class="absolute w-px h-2 bg-gray-300 dark:bg-gray-600 -top-2"></div><div>10</div></div><div class="relative flex flex-col items-center"><div class="absolute w-px h-2 bg-gray-300 dark:bg-gray-600 -top-2"></div><div>20</div></div><div class="relative flex flex-col items-center"><div class="absolute w-px h-2 bg-gray-300 dark:bg-gray-600 -top-2"></div><div>30</div></div><div class="relative flex flex-col items-center"><div class="absolute w-px h-2 bg-gray-300 dark:bg-gray-600 -top-2"></div><div>40</div></div><div class="relative flex flex-col items-center"><div class="absolute w-px h-2 bg-gray-300 dark:bg-gray-600 -top-2"></div><div>50</div></div><div class="relative flex flex-col items-center"><div class="absolute w-px h-2 bg-gray-300 dark:bg-gray-600 -top-2"></div><div>60</div></div><div class="relative flex flex-col items-center"><div class="absolute w-px h-2 bg-gray-300 dark:bg-gray-600 -top-2"></div><div>70</div></div></div></div><div class="space-y-3 relative"> <div class="relative"><div class="flex items-center mb-0.5"> <div class="w-2.5 h-2.5 rounded-full mr-1.5 flex-shrink-0" style="background-color:#3b82f6"></div> <h3 class="text-xs sm:text-sm font-semibold text-gray-800 dark:text-gray-200">T1</h3></div><div class="relative h-6 bg-gray-100 dark:bg-gray-700 rounded"> <div class="absolute top-0 left-0 h-full rounded opacity-30" style="background-color:#3b82f6;width:53.4375%"></div><div class="absolute top-0.5 w-5 h-5 rounded-full border flex items-center justify-center text-[9px] font-bold transition-all duration-300 group bg-gray-200 dark:bg-gray-600 opacity-70 border-gray-400 dark:border-gray-500 border" style="left:calc(0% - 10px);color:text-gray-500 dark:text-gray-400" title="BEGIN">B</div><div class="absolute top-0.5 w-5 h-5 rounded-full border flex items-center justify-center text-[9px] font-bold transition-all duration-300 group bg-gray-200 dark:bg-gray-600 opacity-70 border-gray-400 dark:border-gray-500 border" style="left:calc(5.9375% - 10px);color:text-gray-500 dark:text-gray-400" title="READ DataA">R</div><div class="absolute top-0.5 w-5 h-5 rounded-full border flex items-center justify-center text-[9px] font-bold transition-all duration-300 group bg-gray-200 dark:bg-gray-600 opacity-70 border-gray-400 dark:border-gray-500 border" style="left:calc(11.875% - 10px);color:text-gray-500 dark:text-gray-400" title="WRITE DataA = 110">W</div><div class="absolute top-0.5 w-5 h-5 rounded-full border flex items-center justify-center text-[9px] font-bold transition-all duration-300 group bg-gray-200 dark:bg-gray-600 opacity-70 border-gray-400 dark:border-gray-500 border" style="left:calc(17.8125% - 10px);color:text-gray-500 dark:text-gray-400" title="READ DataA">R</div><div class="absolute top-0.5 w-5 h-5 rounded-full border flex items-center justify-center text-[9px] font-bold transition-all duration-300 group bg-gray-200 dark:bg-gray-600 opacity-70 border-gray-400 dark:border-gray-500 border" style="left:calc(53.4375% - 10px);color:text-gray-500 dark:text-gray-400" title="COMMIT">C</div></div></div><div class="relative"><div class="flex items-center mb-0.5"> <div class="w-2.5 h-2.5 rounded-full mr-1.5 flex-shrink-0" style="background-color:#10b981"></div> <h3 class="text-xs sm:text-sm font-semibold text-gray-800 dark:text-gray-200">T2</h3></div><div class="relative h-6 bg-gray-100 dark:bg-gray-700 rounded"> <div class="absolute top-0 left-0 h-full rounded opacity-30" style="background-color:#10b981;width:59.375%"></div><div class="absolute top-0.5 w-5 h-5 rounded-full border flex items-center justify-center text-[9px] font-bold transition-all duration-300 group bg-gray-200 dark:bg-gray-600 opacity-70 border-gray-400 dark:border-gray-500 border" style="left:calc(23.75% - 10px);color:text-gray-500 dark:text-gray-400" title="BEGIN">B</div><div class="absolute top-0.5 w-5 h-5 rounded-full border flex items-center justify-center text-[9px] font-bold transition-all duration-300 group bg-gray-200 dark:bg-gray-600 opacity-70 border-gray-400 dark:border-gray-500 border" style="left:calc(29.6875% - 10px);color:text-gray-500 dark:text-gray-400" title="READ DataA">R</div><div class="absolute top-0.5 w-5 h-5 rounded-full border flex items-center justify-center text-[9px] font-bold transition-all duration-300 group bg-gray-200 dark:bg-gray-600 opacity-70 border-gray-400 dark:border-gray-500 border" style="left:calc(35.625% - 10px);color:text-gray-500 dark:text-gray-400" title="WRITE DataB = 520">W</div><div class="absolute top-0.5 w-5 h-5 rounded-full border flex items-center justify-center text-[9px] font-bold transition-all duration-300 group bg-gray-200 dark:bg-gray-600 opacity-70 border-gray-400 dark:border-gray-500 border" style="left:calc(41.5625% - 10px);color:text-gray-500 dark:text-gray-400" title="READ DataB">R</div><div class="absolute top-0.5 w-5 h-5 rounded-full border flex items-center justify-center text-[9px] font-bold transition-all duration-300 group bg-gray-200 dark:bg-gray-600 opacity-70 border-gray-400 dark:border-gray-500 border" style="left:calc(59.375% - 10px);color:text-gray-500 dark:text-gray-400" title="COMMIT">C</div></div></div><div class="relative"><div class="flex items-center mb-0.5"> <div class="w-2.5 h-2.5 rounded-full mr-1.5 flex-shrink-0" style="background-color:#f59e0b"></div> <h3 class="text-xs sm:text-sm font-semibold text-gray-800 dark:text-gray-200">T3</h3></div><div class="relative h-6 bg-gray-100 dark:bg-gray-700 rounded"> <div class="absolute top-0 left-0 h-full rounded opacity-30" style="background-color:#f59e0b;width:83.125%"></div><div class="absolute top-0.5 w-5 h-5 rounded-full border flex items-center justify-center text-[9px] font-bold transition-all duration-300 group bg-gray-200 dark:bg-gray-600 opacity-70 border-gray-400 dark:border-gray-500 border" style="left:calc(47.5% - 10px);color:text-gray-500 dark:text-gray-400" title="BEGIN">B</div><div class="absolute top-0.5 w-5 h-5 rounded-full border flex items-center justify-center text-[9px] font-bold transition-all duration-300 group bg-gray-200 dark:bg-gray-600 opacity-70 border-gray-400 dark:border-gray-500 border" style="left:calc(65.3125% - 10px);color:text-gray-500 dark:text-gray-400" title="READ DataA">R</div><div class="absolute top-0.5 w-5 h-5 rounded-full border flex items-center justify-center text-[9px] font-bold transition-all duration-300 group bg-gray-200 dark:bg-gray-600 opacity-70 border-gray-400 dark:border-gray-500 border" style="left:calc(71.25% - 10px);color:text-gray-500 dark:text-gray-400" title="READ DataB">R</div><div class="absolute top-0.5 w-5 h-5 rounded-full border flex items-center justify-center text-[9px] font-bold transition-all duration-300 group bg-gray-200 dark:bg-gray-600 opacity-70 border-gray-400 dark:border-gray-500 border" style="left:calc(83.125% - 10px);color:text-gray-500 dark:text-gray-400" title="COMMIT">C</div></div></div></div><div class="mt-6 pt-3 border-t border-gray-200 dark:border-gray-700 text-xs"><h4 class="font-semibold mb-1 text-gray-700 dark:text-gray-300">Legend</h4><div class="flex flex-wrap gap-x-3 gap-y-1 text-gray-600 dark:text-gray-400"><div class="flex items-center gap-1.5"><div class="w-5 h-5 rounded-full border-2 border-gray-400 dark:border-gray-500 bg-gray-50 dark:bg-gray-700 flex items-center justify-center font-bold text-gray-700 dark:text-gray-200">B</div><span>Begin</span></div><div class="flex items-center gap-1.5"><div class="w-5 h-5 rounded-full border-2 border-gray-400 dark:border-gray-500 bg-gray-50 dark:bg-gray-700 flex items-center justify-center font-bold text-gray-700 dark:text-gray-200">R</div><span>Read</span></div><div class="flex items-center gap-1.5"><div class="w-5 h-5 rounded-full border-2 border-gray-400 dark:border-gray-500 bg-gray-50 dark:bg-gray-700 flex items-center justify-center font-bold text-gray-700 dark:text-gray-200">W</div><span>Write</span></div><div class="flex items-center gap-1.5"><div class="w-5 h-5 rounded-full border-2 border-gray-400 dark:border-gray-500 bg-gray-50 dark:bg-gray-700 flex items-center justify-center font-bold text-gray-700 dark:text-gray-200">C</div><span>Commit</span></div><div class="flex items-center gap-1.5"><div class="w-5 h-5 rounded-full border-2 border-gray-400 dark:border-gray-500 bg-gray-50 dark:bg-gray-700 flex items-center justify-center font-bold text-gray-700 dark:text-gray-200">A</div><span>Abort</span></div></div></div></div></div><button class="absolute right-4 top-4 z-50 flex items-center gap-2 px-3 py-2 rounded-lg bg-blue-600 hover:bg-blue-700 text-white transition-colors duration-200"><svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M3 4a1 1 0 011-1h4a1 1 0 010 2H5.414l2.293 2.293a1 1 0 11-1.414 1.414L4 6.414V8a1 1 0 01-2 0V4zm14 0a1 1 0 00-1-1h-4a1 1 0 100 2h2.586l-2.293 2.293a1 1 0 001.414 1.414L16 6.414V8a1 1 0 102 0V4zM3 16a1 1 0 001 1h4a1 1 0 100-2H5.414l2.293-2.293a1 1 0 00-1.414-1.414L4 13.586V12a1 1 0 10-2 0v4zm14 0a1 1 0 01-1 1h-4a1 1 0 110-2h2.586l-2.293-2.293a1 1 0 011.414-1.414L16 13.586V12a1 1 0 112 0v4z" clip-rule="evenodd"></path></svg>Full Screen</button></div>]]></content:encoded>
            <category>Databases</category>
            <category>Transactions</category>
        </item>
        <item>
            <title><![CDATA[DB-001: Database Isolation (dirty reads)]]></title>
            <link>https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads</link>
            <guid>https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads</guid>
            <pubDate>Mon, 21 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Understanding Dirty Reads: A Database Isolation Problem]]></description>
            <content:encoded><![CDATA[<div class="tableOfContentsInline_prmo"><ul class="table-of-contents"><li><a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#understanding-dirty-reads-a-database-isolation-problem">Understanding Dirty Reads: A Database Isolation Problem</a><ul><li><a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#what-is-a-dirty-read">What is a Dirty Read?</a></li><li><a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#example-scenario">Example Scenario</a></li><li><a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#step-by-step-dirty-read-in-action">Step-by-Step: Dirty Read in Action</a></li></ul></li><li><a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#why-is-this-a-problem">Why is This a Problem?</a></li><li><a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#visualizing-the-dirty-read">Visualizing the Dirty Read</a></li><li><a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#conclusion">Conclusion</a></li></ul></div>
<!-- -->
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="understanding-dirty-reads-a-database-isolation-problem">Understanding Dirty Reads: A Database Isolation Problem<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#understanding-dirty-reads-a-database-isolation-problem" class="hash-link" aria-label="Direct link to Understanding Dirty Reads: A Database Isolation Problem" title="Direct link to Understanding Dirty Reads: A Database Isolation Problem">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-a-dirty-read">What is a Dirty Read?<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#what-is-a-dirty-read" class="hash-link" aria-label="Direct link to What is a Dirty Read?" title="Direct link to What is a Dirty Read?">​</a></h3>
<p>A <strong>dirty read</strong> occurs when a transaction reads data that has been written by another transaction but not yet committed. If the writing transaction rolls back, the data read by the first transaction becomes invalid—hence, "dirty."</p>
<p>This can lead to inconsistent or incorrect results in applications, especially in systems where multiple users or processes are accessing and modifying the data concurrently.</p>
<!-- -->
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="example-scenario">Example Scenario<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#example-scenario" class="hash-link" aria-label="Direct link to Example Scenario" title="Direct link to Example Scenario">​</a></h3>
<p>Let's walk through a concrete example to see how a dirty read can happen.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="initial-database-state">Initial Database State<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#initial-database-state" class="hash-link" aria-label="Direct link to Initial Database State" title="Direct link to Initial Database State">​</a></h4>
<p>Suppose we have a simple database table:</p>
<table><thead><tr><th>key</th><th>value</th></tr></thead><tbody><tr><td>name</td><td>abhishek</td></tr><tr><td>age</td><td>42</td></tr></tbody></table>
<p>Two transactions, <strong>T1</strong> and <strong>T2</strong>, will interact with the <code>name</code> row.</p>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="step-by-step-dirty-read-in-action">Step-by-Step: Dirty Read in Action<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#step-by-step-dirty-read-in-action" class="hash-link" aria-label="Direct link to Step-by-Step: Dirty Read in Action" title="Direct link to Step-by-Step: Dirty Read in Action">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-t1-reads-the-original-value">1. T1 Reads the Original Value<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#1-t1-reads-the-original-value" class="hash-link" aria-label="Direct link to 1. T1 Reads the Original Value" title="Direct link to 1. T1 Reads the Original Value">​</a></h4>
<ul>
<li><strong>T1</strong> starts and reads the value of <code>name</code>.</li>
<li>It sees:<br>
<code>name = 'abhishek'</code> (the committed value).</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="2-t2-updates-the-value-but-doesnt-commit">2. T2 Updates the Value (But Doesn't Commit)<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#2-t2-updates-the-value-but-doesnt-commit" class="hash-link" aria-label="Direct link to 2. T2 Updates the Value (But Doesn't Commit)" title="Direct link to 2. T2 Updates the Value (But Doesn't Commit)">​</a></h4>
<ul>
<li><strong>T2</strong> starts and updates <code>name</code> to <code>'john'</code>.</li>
<li>This change is <strong>not yet committed</strong> to the database.</li>
<li>Other transactions should ideally not see this uncommitted value.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="3-t1-reads-again-dirty-read">3. T1 Reads Again (Dirty Read!)<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#3-t1-reads-again-dirty-read" class="hash-link" aria-label="Direct link to 3. T1 Reads Again (Dirty Read!)" title="Direct link to 3. T1 Reads Again (Dirty Read!)">​</a></h4>
<ul>
<li><strong>T1</strong> reads the value of <code>name</code> again.</li>
<li><strong>Because the database isolation level is low (e.g., READ UNCOMMITTED), T1 sees <code>name = 'john'</code></strong>, even though T2 hasn't committed.</li>
<li>This is a <strong>dirty read</strong>: T1 is reading data that might be rolled back.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="4-t2-commits">4. T2 Commits<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#4-t2-commits" class="hash-link" aria-label="Direct link to 4. T2 Commits" title="Direct link to 4. T2 Commits">​</a></h4>
<ul>
<li><strong>T2</strong> now commits its change.</li>
<li><code>name = 'john'</code> is now the official, permanent value.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="5-t1-commits">5. T1 Commits<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#5-t1-commits" class="hash-link" aria-label="Direct link to 5. T1 Commits" title="Direct link to 5. T1 Commits">​</a></h4>
<ul>
<li><strong>T1</strong> commits, possibly basing its logic on the dirty value it read earlier.</li>
</ul>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-is-this-a-problem">Why is This a Problem?<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#why-is-this-a-problem" class="hash-link" aria-label="Direct link to Why is This a Problem?" title="Direct link to Why is This a Problem?">​</a></h2>
<p>If <strong>T2</strong> had rolled back instead of committing, <strong>T1</strong> would have read a value that never officially existed in the database. This can cause application bugs, data corruption, or security issues.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="visualizing-the-dirty-read">Visualizing the Dirty Read<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#visualizing-the-dirty-read" class="hash-link" aria-label="Direct link to Visualizing the Dirty Read" title="Direct link to Visualizing the Dirty Read">​</a></h2>
<p>The animation below demonstrates this scenario step-by-step. You can see how the database and transactions interact, and exactly when the dirty read occurs.</p>
<div class="flex flex-col items-center p-4 min-h-screen bg-gradient-to-br from-gray-800 to-indigo-900 font-sans"><h2 class="text-3xl font-bold mb-5 text-white shadow-sm px-4 py-1 rounded bg-black/30">Concurrency Issue: Dirty Read Visualization</h2><div class="w-full max-w-4xl"><div class="w-full mt-2 mb-6 px-6 py-4 bg-gray-800/90 backdrop-blur-sm rounded-lg shadow-md border border-gray-700"><div class="flex justify-center mb-8"><div class="relative bg-gray-900 rounded-lg border border-gray-600 p-6 w-full max-w-md shadow-lg"><div class="absolute -top-3 left-1/2 transform -translate-x-1/2 bg-blue-600 text-white px-3 py-1 rounded-md text-sm font-bold">Database</div><table class="w-full text-white border-collapse"><thead><tr><th class="border-b border-gray-700 py-2 text-left w-1/3">Key</th><th class="border-b border-gray-700 py-2 text-left w-2/3">Value</th></tr></thead><tbody><tr><td class="py-2 font-mono">name</td><td class="py-2 font-mono flex items-center gap-2"><span class="text-blue-400 whitespace-nowrap">abhishek</span><span class="text-xs text-blue-300 whitespace-nowrap">(committed)</span></td></tr></tbody></table></div></div><div class="w-full max-w-4xl mb-4 p-4 bg-gray-800/90 backdrop-blur-sm rounded-lg shadow-md text-center border border-gray-700 mx-auto"><p class="font-medium text-white text-lg leading-tight"><span class="font-bold text-indigo-300">Status:</span> <!-- -->Ready to visualize Dirty Read.<span class="ml-6 text-gray-300 text-base">(Step: <!-- -->0<!-- -->/<!-- -->7<!-- -->)</span></p></div><div class="grid grid-cols-1 md:grid-cols-2 gap-6"><div class="relative bg-gray-900 rounded-lg border border-gray-600 p-4 shadow-lg"><div class="absolute -top-3 left-4 bg-cyan-600 text-white px-3 py-1 rounded-md text-sm font-bold">Transaction 1</div><div class="mt-3"><div class="flex justify-between mb-2"><span class="text-gray-400">Status:</span><span class="font-medium text-gray-300">Idle</span></div></div></div><div class="relative bg-gray-900 rounded-lg border border-gray-600 p-4 shadow-lg"><div class="absolute -top-3 left-4 bg-orange-600 text-white px-3 py-1 rounded-md text-sm font-bold">Transaction 2</div><div class="mt-3"><div class="flex justify-between mb-2"><span class="text-gray-400">Status:</span><span class="font-medium text-gray-300">Idle</span></div></div></div></div></div></div><div class="w-full max-w-4xl"><div class="w-full mt-2 mb-6 px-6 py-4 bg-gray-800/90 backdrop-blur-sm rounded-lg shadow-md border border-gray-700"><h3 class="text-xl font-bold text-white mb-4 pb-2 border-b border-gray-600/50">Transaction Timeline</h3><div class="flex flex-wrap justify-center items-center gap-4 mb-4 text-xs text-white/90 transition-all duration-300 opacity-100 -translate-y-0"><div class="flex items-center gap-2 px-2 py-1 rounded-md bg-gray-800/30 border border-gray-700/30"><div class="w-2.5 h-2.5 rounded-full bg-cyan-500 shadow-[0_0_6px_0_rgba(34,211,238,0.4)]"></div><span>T1 Events</span></div><div class="flex items-center gap-2 px-2 py-1 rounded-md bg-gray-800/30 border border-gray-700/30"><div class="w-2.5 h-2.5 rounded-full bg-orange-500 shadow-[0_0_6px_0_rgba(249,115,22,0.4)]"></div><span>T2 Events</span></div><div class="flex items-center gap-2 px-2 py-1 rounded-md bg-gray-800/30 border border-gray-700/30"><div class="w-2.5 h-2.5 rounded-full bg-yellow-500 shadow-[0_0_6px_0_rgba(234,179,8,0.4)]"></div><span>Dirty Read</span></div><div class="flex items-center gap-2 px-2 py-1 rounded-md bg-gray-800/30 border border-gray-700/30"><div class="w-2.5 h-2.5 rounded-full bg-indigo-500 shadow-[0_0_6px_0_rgba(99,102,241,0.4)]"></div><span>System Events</span></div><div class="flex items-center gap-2 px-2 py-1 rounded-md bg-gray-800/30 border border-gray-700/30"><div class="w-2.5 h-2.5 rounded-full bg-white ring-1 ring-white/30"></div><span>Current Step</span></div></div><div class="relative h-52 bg-gray-900/50 backdrop-blur rounded-xl border border-gray-700/50 overflow-hidden px-8 py-6 mx-4 my-2 group"><div class="absolute top-1/2 left-16 right-16 h-[2px] bg-gray-700/50 rounded-full"></div><div class="absolute top-1/3 left-16 right-16 h-[2px] bg-gray-700/30"></div><div class="absolute top-2/3 left-16 right-16 h-[2px] bg-gray-700/30"></div><div class="absolute top-1/3 left-16 h-[2px] bg-cyan-500/50 backdrop-blur transition-all duration-300 shadow-[0_0_8px_0_rgba(34,211,238,0.4)]" style="width:0%"></div><div class="absolute top-2/3 left-16 h-[2px] bg-orange-500/50 backdrop-blur transition-all duration-300 shadow-[0_0_8px_0_rgba(249,115,22,0.4)]" style="width:0%"></div><div class="absolute top-1/3 left-6 -translate-y-1/2 text-sm font-medium text-cyan-400/90 px-2 py-1 rounded-md bg-cyan-950/30 border border-cyan-500/20 shadow-sm">T1</div><div class="absolute top-2/3 left-6 -translate-y-1/2 text-sm font-medium text-orange-400/90 px-2 py-1 rounded-md bg-orange-950/30 border border-orange-500/20 shadow-sm">T2</div><div class="absolute transform -translate-x-1/2 -translate-y-1/2 flex flex-col items-center" style="left:16%;top:50%"><div class="w-4 h-4 rounded-full bg-indigo-600/50 shadow-[0_0_8px_0_rgba(99,102,241,0.4)] ring-2 ring-white/30 scale-125 shadow-md flex items-center justify-center backdrop-blur-sm transition-all duration-300"><div class="w-2 h-2 rounded-full bg-white animate-pulse"></div></div><div class="absolute whitespace-nowrap text-xs font-medium text-white px-2.5 py-1.5 rounded-lg top-7 bg-indigo-600/50/10 backdrop-blur-sm border border-gray-700/30 shadow-lg font-bold scale-105 transition-all duration-300">Initial State</div></div><div class="absolute transform -translate-x-1/2 -translate-y-1/2 flex flex-col items-center" style="left:24.5%;top:33.333%"><div class="w-4 h-4 rounded-full bg-cyan-800/50 shadow-[0_0_8px_0_rgba(34,211,238,0.4)] shadow-md flex items-center justify-center backdrop-blur-sm transition-all duration-300"></div><div class="absolute whitespace-nowrap text-xs font-medium text-white px-2.5 py-1.5 rounded-lg bottom-7 bg-cyan-800/50/10 backdrop-blur-sm border border-gray-700/30 shadow-lg transition-all duration-300">Read</div><div class="absolute h-16 w-[1px] bg-cyan-800/50/30 backdrop-blur-sm" style="top:0%"></div></div><div class="absolute transform -translate-x-1/2 -translate-y-1/2 flex flex-col items-center" style="left:33%;top:66.667%"><div class="w-4 h-4 rounded-full bg-orange-800/50 shadow-[0_0_8px_0_rgba(249,115,22,0.4)] shadow-md flex items-center justify-center backdrop-blur-sm transition-all duration-300"></div><div class="absolute whitespace-nowrap text-xs font-medium text-white px-2.5 py-1.5 rounded-lg top-7 bg-orange-800/50/10 backdrop-blur-sm border border-gray-700/30 shadow-lg transition-all duration-300">Begin Write</div><div class="absolute h-16 w-[1px] bg-orange-800/50/30 backdrop-blur-sm" style="top:-100%"></div></div><div class="absolute transform -translate-x-1/2 -translate-y-1/2 flex flex-col items-center" style="left:41.5%;top:66.667%"><div class="w-4 h-4 rounded-full bg-orange-800/50 shadow-[0_0_8px_0_rgba(249,115,22,0.4)] shadow-md flex items-center justify-center backdrop-blur-sm transition-all duration-300"></div><div class="absolute whitespace-nowrap text-xs font-medium text-white px-2.5 py-1.5 rounded-lg top-7 bg-orange-800/50/10 backdrop-blur-sm border border-gray-700/30 shadow-lg transition-all duration-300">Write (Uncommitted)</div><div class="absolute h-16 w-[1px] bg-orange-800/50/30 backdrop-blur-sm" style="top:-100%"></div></div><div class="absolute transform -translate-x-1/2 -translate-y-1/2 flex flex-col items-center" style="left:50%;top:33.333%"><div class="w-4 h-4 rounded-full bg-yellow-800/50 shadow-[0_0_8px_0_rgba(234,179,8,0.4)] shadow-md flex items-center justify-center backdrop-blur-sm transition-all duration-300"></div><div class="absolute whitespace-nowrap text-xs font-medium text-white px-2.5 py-1.5 rounded-lg bottom-7 bg-yellow-800/50/10 backdrop-blur-sm border border-gray-700/30 shadow-lg transition-all duration-300">Dirty Read</div><div class="absolute h-16 w-[1px] bg-yellow-800/50/30 backdrop-blur-sm" style="top:0%"></div></div><div class="absolute transform -translate-x-1/2 -translate-y-1/2 flex flex-col items-center" style="left:58.5%;top:66.667%"><div class="w-4 h-4 rounded-full bg-orange-800/50 shadow-[0_0_8px_0_rgba(249,115,22,0.4)] shadow-md flex items-center justify-center backdrop-blur-sm transition-all duration-300"></div><div class="absolute whitespace-nowrap text-xs font-medium text-white px-2.5 py-1.5 rounded-lg top-7 bg-orange-800/50/10 backdrop-blur-sm border border-gray-700/30 shadow-lg transition-all duration-300">Commit</div><div class="absolute h-16 w-[1px] bg-orange-800/50/30 backdrop-blur-sm" style="top:-100%"></div></div><div class="absolute transform -translate-x-1/2 -translate-y-1/2 flex flex-col items-center" style="left:67%;top:33.333%"><div class="w-4 h-4 rounded-full bg-cyan-800/50 shadow-[0_0_8px_0_rgba(34,211,238,0.4)] shadow-md flex items-center justify-center backdrop-blur-sm transition-all duration-300"></div><div class="absolute whitespace-nowrap text-xs font-medium text-white px-2.5 py-1.5 rounded-lg bottom-7 bg-cyan-800/50/10 backdrop-blur-sm border border-gray-700/30 shadow-lg transition-all duration-300">Commit</div><div class="absolute h-16 w-[1px] bg-cyan-800/50/30 backdrop-blur-sm" style="top:0%"></div></div><div class="absolute transform -translate-x-1/2 -translate-y-1/2 flex flex-col items-center" style="left:75.5%;top:50%"><div class="w-4 h-4 rounded-full bg-indigo-800/50 shadow-[0_0_8px_0_rgba(99,102,241,0.4)] shadow-md flex items-center justify-center backdrop-blur-sm transition-all duration-300"></div><div class="absolute whitespace-nowrap text-xs font-medium text-white px-2.5 py-1.5 rounded-lg top-7 bg-indigo-800/50/10 backdrop-blur-sm border border-gray-700/30 shadow-lg transition-all duration-300">Final State</div></div></div></div></div><div class="w-full max-w-4xl flex flex-wrap justify-center items-center gap-3 mt-4 p-3 bg-gray-800/90 backdrop-blur-sm rounded-lg shadow-md border border-gray-700 sticky bottom-0 z-50"><button class="px-5 py-2 text-base bg-blue-600 text-white font-semibold rounded-md shadow hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-all duration-150 ease-in-out relative overflow-visible">Play</button><button disabled="" class="px-5 py-2 text-base bg-yellow-500 text-white font-semibold rounded-md shadow hover:bg-yellow-600 disabled:bg-gray-400 disabled:cursor-not-allowed transition-all duration-150 ease-in-out">Pause</button><button class="px-5 py-2 text-base bg-green-500 text-white font-semibold rounded-md shadow hover:bg-green-600 disabled:bg-gray-400 disabled:cursor-not-allowed transition-all duration-150 ease-in-out relative overflow-visible">Step Forward</button><button class="px-5 py-2 text-base bg-red-500 text-white font-semibold rounded-md shadow hover:bg-red-600 transition-all duration-150 ease-in-out relative overflow-visible">Reset</button><div class="flex items-center gap-2 ml-4 p-2 bg-gray-700 rounded border border-gray-600"><label for="speedControl" class="text-sm font-medium text-white whitespace-nowrap">Anim Speed:</label><input type="range" id="speedControl" min="0.2" max="5" step="0.1" class="w-24 h-2 bg-gray-600 rounded-lg appearance-none cursor-pointer accent-blue-500" value="1"><span class="text-sm font-medium text-white w-8 text-right">1.0<!-- -->x</span></div></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>Dirty reads are a classic example of why database isolation levels matter. By default, most production databases avoid dirty reads by using stricter isolation (like READ COMMITTED or higher). However, understanding this scenario helps you appreciate the trade-offs between performance and consistency in concurrent systems.</p>]]></content:encoded>
            <category>Databases</category>
            <category>Transactions</category>
        </item>
        <item>
            <title><![CDATA[Understanding Eventloops (Tokio Internals)]]></title>
            <link>https://twistingtwists.github.io/byte_vault/tokio-internals-visualised</link>
            <guid>https://twistingtwists.github.io/byte_vault/tokio-internals-visualised</guid>
            <pubDate>Sat, 19 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Prelude]]></description>
            <content:encoded><![CDATA[<div class="tableOfContentsInline_prmo"><ul class="table-of-contents"><li><a href="https://twistingtwists.github.io/byte_vault/tokio-internals-visualised#prelude">Prelude</a></li><li><a href="https://twistingtwists.github.io/byte_vault/tokio-internals-visualised#multi-threaded-event-loop--server">Multi-Threaded Event Loop / Server</a></li><li><a href="https://twistingtwists.github.io/byte_vault/tokio-internals-visualised#phase-0-the-problem">Phase 0: The Problem</a><ul><li><a href="https://twistingtwists.github.io/byte_vault/tokio-internals-visualised#the-thread-per-connection-resource-drain">The Thread-Per-Connection Resource Drain</a></li></ul></li></ul></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="prelude">Prelude<a href="https://twistingtwists.github.io/byte_vault/tokio-internals-visualised#prelude" class="hash-link" aria-label="Direct link to Prelude" title="Direct link to Prelude">​</a></h2>
<p>This is the first post in a four part series that will provide an understanding of the mechanics behind the Tokio runtime in Rust. This post focuses on the challenges in a multi-threaded event loop that force us to think of async runtimes like Tokio.</p>
<p>Index of the four part series:</p>
<ol>
<li>Visualizing Tokio Internals: Part I - Multi-Threaded Event Loop / Server</li>
<li>Visualizing Tokio Internals: Part II - Reactor</li>
<li>Visualizing Tokio Internals: Part III - Wakers</li>
<li>Visualizing Tokio Internals: Part IV - Executors</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="multi-threaded-event-loop--server">Multi-Threaded Event Loop / Server<a href="https://twistingtwists.github.io/byte_vault/tokio-internals-visualised#multi-threaded-event-loop--server" class="hash-link" aria-label="Direct link to Multi-Threaded Event Loop / Server" title="Direct link to Multi-Threaded Event Loop / Server">​</a></h2>
<p>What challenges in a multi-threaded event loop force us to think of async runtimes like Tokio?</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="phase-0-the-problem">Phase 0: The Problem<a href="https://twistingtwists.github.io/byte_vault/tokio-internals-visualised#phase-0-the-problem" class="hash-link" aria-label="Direct link to Phase 0: The Problem" title="Direct link to Phase 0: The Problem">​</a></h2>
<div class="my-3 sm:my-4 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-950/30 dark:to-indigo-950/30 rounded-lg overflow-hidden shadow-sm dark:shadow-blue-900/5 border-l-4 border-blue-400 dark:border-blue-600"><div class="p-3 sm:p-4 space-y-2 sm:space-y-3"><div class="flex items-center gap-3"><div class="flex-shrink-0 p-2 bg-blue-100 dark:bg-blue-900/30 rounded-md group relative"><svg class="w-4 h-4 text-blue-600 dark:text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-label="Learning Objective"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path></svg><div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-1 px-1.5 py-0.5 text-xs text-white bg-gray-800 dark:bg-gray-700 rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap pointer-events-none">Learning Objective</div></div><div class="flex-grow min-w-0"><p class="text-base font-medium text-blue-900 dark:text-blue-100 break-words">Why do we need async runtimes like Tokio?</p></div><button id="why-tokio-button" class="flex items-center gap-1 px-2 py-1 ml-auto text-2xs sm:text-xs font-medium text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition-colors duration-200 focus:outline-none" aria-expanded="true" aria-controls="why-tokio">Hide<svg class="w-2.5 h-2.5 sm:w-3 sm:h-3" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"></path></svg></button></div><div id="why-tokio" role="region" aria-labelledby="why-tokio-button" class="overflow-hidden transition-all duration-300 ease-in-out max-h-[500px] opacity-100"><div class="pt-2 border-t border-blue-100 dark:border-blue-800 text-xs sm:text-sm text-gray-700 dark:text-gray-300"><ul>
<li><strong>Resource Efficiency:</strong> Traditional thread-per-connection models waste system resources</li>
<li><strong>Scalability:</strong> Async enables handling thousands of connections with minimal overhead</li>
<li><strong>Performance:</strong> Event-driven architecture reduces context switching and memory usage</li>
<li><strong>Cost-Effective:</strong> Better resource utilization means lower infrastructure costs</li>
</ul></div></div></div></div>
<!-- -->
<p>Modern applications, especially network services, need to handle many things concurrently. Imagine a web server handling thousands of client connections simultaneously.</p>
<p>A naive approach is to dedicate one Operating System (OS) thread to each connection. Let's see why this doesn't scale well.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-thread-per-connection-resource-drain">The Thread-Per-Connection Resource Drain<a href="https://twistingtwists.github.io/byte_vault/tokio-internals-visualised#the-thread-per-connection-resource-drain" class="hash-link" aria-label="Direct link to The Thread-Per-Connection Resource Drain" title="Direct link to The Thread-Per-Connection Resource Drain">​</a></h3>
<p>The visualization below shows resource consumption (CPU/Memory) and throughput limits of a blocking thread-per-connection model.</p>
<div class="my-4 border rounded-lg border-gray-200 dark:border-gray-800"><button class="w-full px-4 py-3 flex items-center justify-between text-left bg-gray-50 dark:bg-gray-900 rounded-t-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors duration-200" id="thread-per-connection" aria-expanded="false"><span class="font-medium text-gray-900 dark:text-gray-100">How a thread-per-connection server behaves as load increases</span><svg class="w-5 h-5 transform transition-transform duration-200" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path></svg></button><div class="overflow-hidden transition-all duration-300 ease-in-out max-h-0 opacity-0"><div class="p-4 prose dark:prose-invert max-w-none"><p><strong>Description:</strong></p><p>Imagine a dashboard resembling <code>htop</code> or Task Manager:</p><ol>
<li><strong>CPU Usage:</strong> Bars representing individual CPU cores.</li>
<li><strong>Memory Usage:</strong> A single bar showing total RAM consumption.</li>
<li><strong>Active Threads:</strong> A counter or list showing running OS threads.</li>
<li><strong>Requests/Second:</strong> A throughput meter.</li>
<li><strong>Incoming Requests Queue:</strong> A visual queue of pending connections.</li>
</ol><p><strong>Simulation:</strong></p><ul>
<li><strong>Start:</strong> The server starts. CPU/Memory usage is low. Throughput is 0. Few base threads exist.</li>
<li><strong>Low Load:</strong> Simulate a few incoming connections (~10). For each, a new OS thread is created.<!-- -->
<ul>
<li><em>Visual:</em> Active Threads count increases slightly. Memory usage ticks up slightly. CPU usage might blip as threads start but stays relatively low if connections are mostly idle. Throughput matches the request rate.</li>
</ul>
</li>
<li><strong>High Load:</strong> Simulate hundreds or thousands of incoming connections. Many connections involve waiting for network I/O (reading request body, waiting for database, sending response).<!-- -->
<ul>
<li><em>Visual:</em>
<ul>
<li><strong>Active Threads:</strong> The count explodes. Each thread requires kernel resources and its own stack (~MBs).</li>
<li><strong>Memory Usage:</strong> The Memory bar shoots up dramatically, potentially hitting system limits.</li>
<li><strong>CPU Usage:</strong> CPU bars likely thrash. Even if threads are mostly <em>waiting</em> (blocked on I/O), the OS spends significant time <em>context switching</em> between them. This is overhead, not useful work.</li>
<li><strong>Requests Queue:</strong> The incoming requests queue grows rapidly because threads are created, but many quickly block on I/O. The server struggles to accept new connections.</li>
<li><strong>Requests/Second:</strong> The throughput meter hits a plateau far below the incoming request rate, possibly even decreasing as context-switching overhead dominates.</li>
</ul>
</li>
</ul>
</li>
</ul></div></div></div>
<div class="visualization-container bg-gray-100 dark:bg-gray-900 p-6 rounded-lg shadow-md space-y-6"><div class="bg-black dark:bg-gray-800 text-green-400 dark:text-green-300 p-4 rounded font-mono text-sm h-64 overflow-y-auto"><div class="mb-2"><span class="text-blue-400 dark:text-blue-300">htop - </span><span class="text-white dark:text-gray-100">Thread-Per-Connection Server</span></div><div class="mb-4"><div class="flex justify-between mb-1"><span>Active Connections:</span><span class="">10</span></div><div class="flex justify-between mb-1"><span>Threads:</span><span class="">12</span></div><div class="flex justify-between mb-1"><span>Requests/sec:</span><span class="text-red-500">0</span></div><div class="flex justify-between mb-1"><span>Request Queue:</span><span class="">0</span></div></div><div class="mb-4"><div class="text-white dark:text-gray-100 mb-1">CPU Usage</div><div class="mb-2"><div class="flex items-center justify-between"><span class="w-12">CPU 0</span><div class="w-full bg-gray-700 dark:bg-gray-600 h-4 ml-2 mr-2 rounded-sm"><div class="h-full rounded-sm bg-green-500 dark:bg-green-400" style="width:5%"></div></div><span class="w-8 text-right">5%</span></div></div><div class="mb-2"><div class="flex items-center justify-between"><span class="w-12">CPU 1</span><div class="w-full bg-gray-700 dark:bg-gray-600 h-4 ml-2 mr-2 rounded-sm"><div class="h-full rounded-sm bg-green-500 dark:bg-green-400" style="width:3%"></div></div><span class="w-8 text-right">3%</span></div></div><div class="mb-2"><div class="flex items-center justify-between"><span class="w-12">CPU 2</span><div class="w-full bg-gray-700 dark:bg-gray-600 h-4 ml-2 mr-2 rounded-sm"><div class="h-full rounded-sm bg-green-500 dark:bg-green-400" style="width:4%"></div></div><span class="w-8 text-right">4%</span></div></div><div class="mb-2"><div class="flex items-center justify-between"><span class="w-12">CPU 3</span><div class="w-full bg-gray-700 dark:bg-gray-600 h-4 ml-2 mr-2 rounded-sm"><div class="h-full rounded-sm bg-green-500 dark:bg-green-400" style="width:2%"></div></div><span class="w-8 text-right">2%</span></div></div><div class="mb-2"><div class="flex items-center justify-between"><span class="w-12">CPU 4</span><div class="w-full bg-gray-700 dark:bg-gray-600 h-4 ml-2 mr-2 rounded-sm"><div class="h-full rounded-sm bg-green-500 dark:bg-green-400" style="width:5%"></div></div><span class="w-8 text-right">5%</span></div></div><div class="mb-2"><div class="flex items-center justify-between"><span class="w-12">CPU 5</span><div class="w-full bg-gray-700 dark:bg-gray-600 h-4 ml-2 mr-2 rounded-sm"><div class="h-full rounded-sm bg-green-500 dark:bg-green-400" style="width:3%"></div></div><span class="w-8 text-right">3%</span></div></div><div class="mb-2"><div class="flex items-center justify-between"><span class="w-12">CPU 6</span><div class="w-full bg-gray-700 dark:bg-gray-600 h-4 ml-2 mr-2 rounded-sm"><div class="h-full rounded-sm bg-green-500 dark:bg-green-400" style="width:2%"></div></div><span class="w-8 text-right">2%</span></div></div><div class="mb-2"><div class="flex items-center justify-between"><span class="w-12">CPU 7</span><div class="w-full bg-gray-700 dark:bg-gray-600 h-4 ml-2 mr-2 rounded-sm"><div class="h-full rounded-sm bg-green-500 dark:bg-green-400" style="width:4%"></div></div><span class="w-8 text-right">4%</span></div></div><div class="flex items-center justify-between mt-1"><span class="w-12">Average:</span><div class="w-full bg-gray-700 dark:bg-gray-600 h-4 ml-2 mr-2 rounded-sm"><div class="h-full rounded-sm bg-green-500 dark:bg-green-400" style="width:0%"></div></div><span class="w-8 text-right">0%</span></div></div><div class="mb-4"><div class="text-white dark:text-gray-100 mb-1">Memory Usage</div><div class="flex items-center justify-between"><span class="w-12">Mem</span><div class="w-full bg-gray-700 dark:bg-gray-600 h-4 ml-2 mr-2 rounded-sm"><div class="h-full rounded-sm bg-blue-500 dark:bg-blue-400" style="width:8%"></div></div><span class="w-8 text-right">8%</span></div></div><div><div class="text-white dark:text-gray-100 mb-1">Top Threads</div><div class="grid grid-cols-12 text-xs mb-1 border-b border-gray-700 dark:border-gray-600"><div class="col-span-1">PID</div><div class="col-span-3">USER</div><div class="col-span-1">PR</div><div class="col-span-1">NI</div><div class="col-span-2">CPU%</div><div class="col-span-2">MEM%</div><div class="col-span-2">CMD</div></div><div class="grid grid-cols-12 text-xs mb-1"><div class="col-span-1">1000</div><div class="col-span-3">server</div><div class="col-span-1">20</div><div class="col-span-1">0</div><div class="col-span-2">17.0</div><div class="col-span-2">0.2</div><div class="col-span-2">http-conn</div></div><div class="grid grid-cols-12 text-xs mb-1"><div class="col-span-1">1001</div><div class="col-span-3">server</div><div class="col-span-1">20</div><div class="col-span-1">0</div><div class="col-span-2">9.0</div><div class="col-span-2">0.3</div><div class="col-span-2">http-conn</div></div><div class="grid grid-cols-12 text-xs mb-1"><div class="col-span-1">1002</div><div class="col-span-3">server</div><div class="col-span-1">20</div><div class="col-span-1">0</div><div class="col-span-2">5.0</div><div class="col-span-2">0.5</div><div class="col-span-2">http-conn</div></div><div class="grid grid-cols-12 text-xs mb-1"><div class="col-span-1">1003</div><div class="col-span-3">server</div><div class="col-span-1">20</div><div class="col-span-1">0</div><div class="col-span-2">20.0</div><div class="col-span-2">0.4</div><div class="col-span-2">http-conn</div></div><div class="grid grid-cols-12 text-xs mb-1"><div class="col-span-1">1004</div><div class="col-span-3">server</div><div class="col-span-1">20</div><div class="col-span-1">0</div><div class="col-span-2">4.0</div><div class="col-span-2">0.2</div><div class="col-span-2">http-conn</div></div><div class="grid grid-cols-12 text-xs mb-1"><div class="col-span-1">1005</div><div class="col-span-3">server</div><div class="col-span-1">20</div><div class="col-span-1">0</div><div class="col-span-2">15.0</div><div class="col-span-2">0.2</div><div class="col-span-2">http-conn</div></div><div class="grid grid-cols-12 text-xs mb-1"><div class="col-span-1">1006</div><div class="col-span-3">server</div><div class="col-span-1">20</div><div class="col-span-1">0</div><div class="col-span-2">20.0</div><div class="col-span-2">0.4</div><div class="col-span-2">http-conn</div></div><div class="grid grid-cols-12 text-xs mb-1"><div class="col-span-1">1007</div><div class="col-span-3">server</div><div class="col-span-1">20</div><div class="col-span-1">0</div><div class="col-span-2">5.0</div><div class="col-span-2">0.4</div><div class="col-span-2">http-conn</div></div><div class="grid grid-cols-12 text-xs mb-1"><div class="col-span-1">1008</div><div class="col-span-3">server</div><div class="col-span-1">20</div><div class="col-span-1">0</div><div class="col-span-2">6.0</div><div class="col-span-2">0.4</div><div class="col-span-2">http-conn</div></div><div class="grid grid-cols-12 text-xs mb-1"><div class="col-span-1">1009</div><div class="col-span-3">server</div><div class="col-span-1">20</div><div class="col-span-1">0</div><div class="col-span-2">18.0</div><div class="col-span-2">0.3</div><div class="col-span-2">http-conn</div></div><div class="text-gray-500 dark:text-gray-400 text-xs mt-1">... and <!-- -->2<!-- --> more threads</div></div></div><div class="flex justify-between items-center"><h3 class="text-lg font-bold dark:text-gray-100">Thread-Per-Connection Resource Monitor</h3><div class="flex gap-4"><button class="px-6 py-3 rounded-lg font-medium text-white shadow-lg transform transition-all duration-200 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 active:scale-95 active:shadow-md border border-white/10 hover:shadow-xl hover:border-white/20 dark:border-white/20"><span class="flex items-center gap-2"><svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>Start Simulation</span></button><button class="px-6 py-3 rounded-lg font-medium bg-gradient-to-r from-gray-600 to-gray-700 text-white shadow-lg transform transition-all duration-200 hover:from-gray-700 hover:to-gray-800 hover:scale-105 hover:-translate-y-0.5 hover:shadow-xl active:scale-95 active:shadow-md border border-white/10 hover:border-white/20 dark:border-white/20"><span class="flex items-center gap-2"><svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path></svg>Reset</span></button></div></div><div class="bg-white dark:bg-gray-800 p-4 rounded shadow space-y-6"><div><label class="block text-sm font-medium text-gray-700 dark:text-gray-200 mb-2">Simulate Connection Load</label><div class="flex gap-4 items-center"><input type="range" min="1" max="500" class="w-full" value="10"><span class="text-sm font-mono bg-gray-100 dark:bg-gray-900 dark:text-gray-100 p-1 rounded">10</span></div></div><div><label class="block text-sm font-medium text-gray-700 dark:text-gray-200 mb-2">Simulation Speed</label><div class="flex gap-4 items-center"><span class="text-xs">Slow</span><input type="range" min="0.5" max="5" step="0.5" class="w-full" value="1"><span class="text-xs">Fast</span><span class="text-sm font-mono bg-gray-100 dark:bg-gray-900 dark:text-gray-100 p-1 rounded">1<!-- -->x</span></div></div><div><h4 class="text-sm font-medium text-gray-700 dark:text-gray-200 mb-2">Performance Impact</h4><div class="relative h-64 border border-gray-300 dark:border-gray-600 rounded p-2"><div class="absolute bottom-0 left-0 right-0 border-t border-gray-300 dark:border-gray-600 flex justify-between px-2 text-xs text-gray-500 dark:text-gray-400"><div>0</div><div>100</div><div>200</div><div>300</div><div>400</div><div>500</div></div><div class="absolute left-0 top-0 bottom-10 flex items-center"><div class="transform -rotate-90 text-xs text-gray-500 dark:text-gray-400 whitespace-nowrap">Resource Utilization (%)</div></div><div class="absolute bottom-0 w-0.5 bg-red-500 h-full opacity-50" style="left:2%;height:calc(100% - 15px)"></div><div class="w-full h-full"></div><div class="absolute top-2 right-2 bg-white/80 dark:bg-gray-900/80 p-2 rounded text-xs space-y-1"><div class="flex items-center"><div class="w-3 h-3 bg-green-500 dark:bg-green-400 mr-2"></div><div>CPU Usage</div></div><div class="flex items-center"><div class="w-3 h-3 bg-blue-500 dark:bg-blue-400 mr-2"></div><div>Memory Usage</div></div><div class="flex items-center"><div class="w-3 h-3 bg-gray-500 dark:bg-gray-400 mr-2"></div><div>Thread Count</div></div><div class="flex items-center"><div class="w-3 h-3 bg-red-500 dark:bg-red-400 mr-2"></div><div>Throughput</div></div><div class="flex items-center"><div class="w-3 h-3 bg-purple-500 dark:bg-purple-400 mr-2"></div><div>Request Queue</div></div></div></div></div><div class="p-3 rounded border-2 bg-green-100 dark:bg-green-900 border-green-300 dark:border-green-700"><h4 class="font-medium mb-1 dark:text-gray-100">System Status:</h4><p class="text-sm dark:text-gray-200">System is handling connections efficiently. Resources are well-utilized with minimal overhead.</p></div></div><div class="text-center text-sm text-gray-600 dark:text-gray-300"><strong>Figure 1:</strong> Interactive visualization of thread-per-connection scaling issues. As connection count increases, resources are consumed by thread overhead, while throughput plateaus and then declines due to context switching costs.</div></div>
<div class="bg-orange-100 dark:bg-orange-900 p-6 rounded-xl mt-8 mb-4 border-l-4 border-orange-400 dark:border-orange-500 shadow-sm"><span class="block font-bold text-lg text-orange-900 dark:text-orange-200 mb-2">Insight</span><span class="text-base text-gray-900 dark:text-gray-100"><p>We need a way to handle multiple waiting tasks concurrently without needing a dedicated OS thread for each one <em>while it's waiting</em>. This leads to asynchronous programming.</p></span></div>]]></content:encoded>
            <category>Rust</category>
            <category>Tokio</category>
            <category>Async</category>
            <category>Event Loop</category>
        </item>
        <item>
            <title><![CDATA[Connection Pooling - in Depth]]></title>
            <link>https://twistingtwists.github.io/byte_vault/connection-pooling-in-depth</link>
            <guid>https://twistingtwists.github.io/byte_vault/connection-pooling-in-depth</guid>
            <pubDate>Thu, 13 Mar 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Here’s a Markdown table that maps real-life reverse proxy scenarios to recommended TCP tuning parameters for optimal performance and security:]]></description>
            <content:encoded><![CDATA[<p>Here’s a <strong>Markdown table</strong> that maps <strong>real-life reverse proxy scenarios</strong> to recommended <strong>TCP tuning parameters</strong> for optimal performance and security:</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-legend-quick-reference">✅ <strong>Legend (Quick Reference)</strong><a href="https://twistingtwists.github.io/byte_vault/connection-pooling-in-depth#-legend-quick-reference" class="hash-link" aria-label="Direct link to -legend-quick-reference" title="Direct link to -legend-quick-reference">​</a></h3>
<table><thead><tr><th><strong>Parameter</strong></th><th><strong>Purpose</strong></th></tr></thead><tbody><tr><td><code>tcp_fin_timeout</code></td><td>How long to keep closing connection in FIN state.</td></tr><tr><td><code>tcp_keepalive_time</code></td><td>Idle time before sending first keep-alive probe.</td></tr><tr><td><code>tcp_keepalive_intvl</code></td><td>Interval between successive keep-alive probes.</td></tr><tr><td><code>tcp_keepalive_probes</code></td><td>Number of probes before dropping connection.</td></tr><tr><td><code>tcp_retries2</code></td><td>Max TCP retransmissions before giving up.</td></tr></tbody></table>
<!-- -->
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-tcp-tuning-recommendations-for-reverse-proxy---real-life-scenarios">✅ <strong>TCP Tuning Recommendations for Reverse Proxy - Real Life Scenarios</strong><a href="https://twistingtwists.github.io/byte_vault/connection-pooling-in-depth#-tcp-tuning-recommendations-for-reverse-proxy---real-life-scenarios" class="hash-link" aria-label="Direct link to -tcp-tuning-recommendations-for-reverse-proxy---real-life-scenarios" title="Direct link to -tcp-tuning-recommendations-for-reverse-proxy---real-life-scenarios">​</a></h3>
<table><thead><tr><th><strong>Scenario</strong></th><th><strong>tcp_fin_timeout</strong></th><th><strong>tcp_keepalive_time</strong></th><th><strong>tcp_keepalive_intvl</strong></th><th><strong>tcp_keepalive_probes</strong></th><th><strong>tcp_retries2</strong></th><th><strong>Reasoning &amp; Trade-offs</strong></th></tr></thead><tbody><tr><td><strong>Public API Gateway (high concurrent clients)</strong></td><td><code>15</code></td><td><code>30</code></td><td><code>10</code></td><td><code>3</code></td><td><code>5</code></td><td>Quick cleanup of dead/idle connections to save resources, while allowing short keep-alives for API clients.</td></tr><tr><td><strong>Internal microservices (low latency, stable network)</strong></td><td><code>10</code></td><td><code>60</code></td><td><code>20</code></td><td><code>3</code></td><td><code>3</code></td><td>Fast connection recycling, rare need for keep-alives due to low latency, prioritizing efficiency.</td></tr><tr><td><strong>Mobile-heavy client traffic (prone to network drops)</strong></td><td><code>30</code></td><td><code>120</code></td><td><code>20</code></td><td><code>5</code></td><td><code>7</code></td><td>More lenient timeouts to account for intermittent mobile network instability; avoid prematurely dropping clients.</td></tr><tr><td><strong>WebSocket / long-lived connections (chat apps, gaming)</strong></td><td><code>60</code></td><td><code>300</code></td><td><code>60</code></td><td><code>5</code></td><td><code>8</code></td><td>Allow long idle connections; keep-alives to detect dead connections without cutting active clients abruptly.</td></tr><tr><td><strong>DDoS-prone public proxy (security-focused)</strong></td><td><code>5</code></td><td><code>30</code></td><td><code>5</code></td><td><code>2</code></td><td><code>3</code></td><td>Aggressive timeouts to prevent resource exhaustion; fast cleanup of potentially malicious connections.</td></tr><tr><td><strong>IoT Device Communication (sporadic, unstable)</strong></td><td><code>30</code></td><td><code>180</code></td><td><code>30</code></td><td><code>4</code></td><td><code>6</code></td><td>Longer keep-alives to maintain connection with low-power devices, balanced with cleanup to avoid idle hangs.</td></tr><tr><td><strong>Slow clients behind proxies (corporate clients, satellite)</strong></td><td><code>20</code></td><td><code>150</code></td><td><code>30</code></td><td><code>4</code></td><td><code>6</code></td><td>Moderate timeouts to handle slow networks without dropping legitimate users.</td></tr></tbody></table>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-notes">⚙️ <strong>Notes:</strong><a href="https://twistingtwists.github.io/byte_vault/connection-pooling-in-depth#%EF%B8%8F-notes" class="hash-link" aria-label="Direct link to ️-notes" title="Direct link to ️-notes">​</a></h3>
<ul>
<li><strong>Lower timeouts</strong>: Free up resources quickly, but risk dropping slow/legit connections.</li>
<li><strong>Higher timeouts</strong>: Improve user experience over slow networks but consume more resources.</li>
<li><strong>Keep-alive settings</strong>: Essential for long-lived or idle connections to detect dead peers.</li>
<li><strong>Retries</strong>: Trade-off between network resilience and resource use.</li>
</ul>
<hr>
<p>If you want, I can prepare a <strong><code>sysctl.conf</code> file snippet</strong> based on any of these scenarios for direct use. Let me know! 🚀</p>
<hr>
<p>source: <a href="https://github.com/brettwooldridge/HikariCP/wiki/Down-the-Rabbit-Hole" target="_blank" rel="noopener noreferrer">https://github.com/brettwooldridge/HikariCP/wiki/Down-the-Rabbit-Hole</a></p>
<hr>]]></content:encoded>
            <category>Connection</category>
            <category>Database</category>
            <category>Network</category>
        </item>
        <item>
            <title><![CDATA[Reliable Structured Outputs with LLMs]]></title>
            <link>https://twistingtwists.github.io/byte_vault/reliable-structured-outputs-with-llms</link>
            <guid>https://twistingtwists.github.io/byte_vault/reliable-structured-outputs-with-llms</guid>
            <pubDate>Sat, 01 Mar 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Ensuring Deterministic Outputs from LLMs]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="ensuring-deterministic-outputs-from-llms">Ensuring Deterministic Outputs from LLMs<a href="https://twistingtwists.github.io/byte_vault/reliable-structured-outputs-with-llms#ensuring-deterministic-outputs-from-llms" class="hash-link" aria-label="Direct link to Ensuring Deterministic Outputs from LLMs" title="Direct link to Ensuring Deterministic Outputs from LLMs">​</a></h3>
<p>There are several strategies to obtain structured outputs from LLMs.</p>
<p>In Python, libraries such as Pydantic and Instructor facilitate structured output via JSON schema-based tool invocation. If you have the capability to host your own model, sglang is a viable option.</p>
<p>Pydantic validators are highly effective, provided that the input is in the form of a valid JSON string.</p>
<p>Let's see by example. For starters, here is the schema we want to parse.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> pydantic </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> BaseModel</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ValidationError</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">BaseModel</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin">id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    email</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    active</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">bool</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">True</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># default value</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># JSON representation of the data</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">json_data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token triple-quoted-string string" style="color:#e3116c">'''</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">    "id": 123,</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">    "name": "Alice",</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">    "email": "alice@example.com"</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">'''</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">try</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic"># Directly validate and parse the JSON string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    user </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> User</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">model_validate_json</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">json_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Validated Data:"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> user</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">except</span><span class="token plain"> ValidationError </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Validation Error:"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">json</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre></div></div>
<p>This works. Pydantic has a pretty solid <em>json</em> to data model convertor. But it has to be a valid json string. Let's explore further.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># JSON representation of the data</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># typical replies of a small LLM which does not adhere well to 'output_json' command</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">json_data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token triple-quoted-string string" style="color:#e3116c">'''</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">Here is your json</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">    "id": 123,</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">    "name": "Alice",</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">    "email": "alice@example.com"</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">'''</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">try</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic"># Directly validate and parse the JSON string using the new method</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    user </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> User</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">model_validate_json</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">json_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Validated Data:"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> user</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">except</span><span class="token plain"> ValidationError </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Validation Error:"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">json</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre></div></div>
<p>Error is:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Validation Error</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">{</span><span class="token string" style="color:#e3116c">"type"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token string" style="color:#e3116c">"json_invalid"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token string" style="color:#e3116c">"loc"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token string" style="color:#e3116c">"msg"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token string" style="color:#e3116c">"Invalid JSON: expected value at line 2 column 1"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token string" style="color:#e3116c">"input"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token string" style="color:#e3116c">"\nHere is your json\n{\n    \"id\": 123,\n    \"name\": \"Alice\",\n    \"email\": \"alice@example.com\"\n}\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token string" style="color:#e3116c">"ctx"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token punctuation" style="color:#393A34">{</span><span class="token string" style="color:#e3116c">"error"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token string" style="color:#e3116c">"expected value at line 2 column 1"</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token string" style="color:#e3116c">"url"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token string" style="color:#e3116c">"https://errors.pydantic.dev/2.10/v/json_invalid"</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre></div></div>
<p>Now, let's add one more step in the mix. Let's use the json_partial_py library to parse the JSON string. and then pass it to pydantic.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> json_partial_py </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> to_json_string </span><span class="token comment" style="color:#999988;font-style:italic"># &lt;---- this is a new import</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># typical replies of a small LLM which does not adhere well to 'output_json' command</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">json_data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token triple-quoted-string string" style="color:#e3116c">'''</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">Here is your json</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">    "id": 123,</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">    "name": "Alice",</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">    "email": "alice@example.com"</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">'''</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">try</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    stringified_json </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> to_json_string</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">json_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic"># Directly validate and parse the JSON string using the new method</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    user </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> User</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">model_validate_json</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">stringified_json</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Validated Data:"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> user</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">except</span><span class="token plain"> ValidationError </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Validation Error:"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">json</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre></div></div>
<p>and voila!! Now you can rest assured that you will get clean json parsed from the LLM output.</p>
<p>P.S. I am author of the <a href="https://pypi.org/project/json_partial_python/" target="_blank" rel="noopener noreferrer"><code>json_partial_py</code> library</a>. It was extracted from <a href="https://github.com/BoundaryML/baml?tab=readme-ov-file" target="_blank" rel="noopener noreferrer">baml project</a>.</p>]]></content:encoded>
            <category>JSON Parser</category>
            <category>LLM</category>
        </item>
        <item>
            <title><![CDATA[String interning in Rust]]></title>
            <link>https://twistingtwists.github.io/byte_vault/string-interning-rust</link>
            <guid>https://twistingtwists.github.io/byte_vault/string-interning-rust</guid>
            <pubDate>Sat, 01 Mar 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[What is String Interning?]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-string-interning">What is String Interning?<a href="https://twistingtwists.github.io/byte_vault/string-interning-rust#what-is-string-interning" class="hash-link" aria-label="Direct link to What is String Interning?" title="Direct link to What is String Interning?">​</a></h3>
<p>String interning is a technique that ensures each unique string is stored only once in memory, reducing redundancy and improving performance.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-string-interning-matters-in-real-world-scenarios"><strong>Why String Interning Matters in Real-World Scenarios</strong><a href="https://twistingtwists.github.io/byte_vault/string-interning-rust#why-string-interning-matters-in-real-world-scenarios" class="hash-link" aria-label="Direct link to why-string-interning-matters-in-real-world-scenarios" title="Direct link to why-string-interning-matters-in-real-world-scenarios">​</a></h3>
<p>String interning is <strong>critical in performance-sensitive applications</strong> where <strong>redundant string storage leads to memory overhead and slower lookups</strong>. Here’s why it matters in real-world scenarios:</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="real-world-use-cases"><strong>Real-World Use Cases</strong><a href="https://twistingtwists.github.io/byte_vault/string-interning-rust#real-world-use-cases" class="hash-link" aria-label="Direct link to real-world-use-cases" title="Direct link to real-world-use-cases">​</a></h3>
<p>String interning reduces memory usage and improves performance by storing each unique string only once.</p>
<p>The following table highlights some real-world use cases where string interning is beneficial:</p>
<table><thead><tr><th>Use Case</th><th>Example</th></tr></thead><tbody><tr><td>Compiler and Interpreter Optimization</td><td>Rust’s compiler, Python’s CPython, and Java’s JVM use string interning to optimize symbol tables.</td></tr><tr><td>Embedded Systems &amp; IoT</td><td>Logging frameworks like <code>defmt</code> use interning to minimize <strong>flash storage usage</strong> on microcontrollers.</td></tr><tr><td>Web Servers &amp; API Performance</td><td>High-traffic APIs handling millions of requests often receive the same strings (e.g., headers, JSON keys).</td></tr><tr><td>Databases &amp; Search Engines</td><td>Search engines like Elasticsearch and databases like PostgreSQL intern frequently queried strings.</td></tr></tbody></table>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-it-works"><strong>How It Works</strong><a href="https://twistingtwists.github.io/byte_vault/string-interning-rust#how-it-works" class="hash-link" aria-label="Direct link to how-it-works" title="Direct link to how-it-works">​</a></h3>
<ul>
<li><code>InternedString::new()</code> returns an <strong>empty interned string</strong>.</li>
<li><code>InternedString::from(s)</code> interns a string, ensuring uniqueness.</li>
<li><code>as_str()</code>, <code>len()</code>, and <code>is_empty()</code> mimic <code>String</code> methods.</li>
<li>A <strong>global HashMap</strong> stores interned strings, avoiding duplicates.</li>
<li><strong>Thread safety</strong> is ensured using <code>Lazy&lt;Mutex&lt;HashMap&gt;&gt;</code>.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="implementation-of-string-interning-in-rust">Implementation of String Interning in Rust<a href="https://twistingtwists.github.io/byte_vault/string-interning-rust#implementation-of-string-interning-in-rust" class="hash-link" aria-label="Direct link to Implementation of String Interning in Rust" title="Direct link to Implementation of String Interning in Rust">​</a></h3>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">std</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">collections</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">HashMap</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">std</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">sync</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token punctuation" style="color:#393A34">{</span><span class="token class-name">Arc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Mutex</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">once_cell</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">sync</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Lazy</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// Ensures thread-safe global interner</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[derive(Debug, Clone, PartialEq, Eq, Hash)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token type-definition class-name">InternedString</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    inner</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Arc</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">str</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Global interner (singleton)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">INTERNER</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Lazy</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">Mutex</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">HashMap</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">Arc</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">str</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Lazy</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token plain"> </span><span class="token class-name">Mutex</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">HashMap</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">impl</span><span class="token plain"> </span><span class="token class-name">InternedString</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/// Creates an empty interned string (similar to `String::new()`)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">Self</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">Self</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">intern</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/// Interns a given string and returns an InternedString</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">from</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">S</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">AsRef</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">str</span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">S</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">Self</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">Self</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">intern</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">as_ref</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/// Returns a reference to the interned string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">as_str</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">str</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">inner</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/// Returns the length of the interned string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">usize</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">inner</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/// Checks if the interned string is empty</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">is_empty</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">bool</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">inner</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">is_empty</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/// Interns a string, ensuring no duplicates exist</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">intern</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">str</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">Self</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> interner </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">INTERNER</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">lock</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// If the string is already interned, return the existing reference</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token class-name">Some</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">existing</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> interner</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">keys</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">find</span><span class="token punctuation" style="color:#393A34">(</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token closure-params">k</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token plain"> k</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">as_ref</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token class-name">InternedString</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                inner</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Arc</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">clone</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">existing</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Otherwise, intern the new string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> arc_str </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Arc</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">from</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        interner</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">insert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Arc</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">clone</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">arc_str</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">InternedString</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> inner</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> arc_str </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[cfg(test)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">mod</span><span class="token plain"> </span><span class="token module-declaration namespace" style="opacity:0.7">tests</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">super</span><span class="token punctuation" style="color:#393A34">::</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[test]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">test_empty_string</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> empty1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">InternedString</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> empty2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">InternedString</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token macro property" style="color:#36acaa">assert_eq!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">empty1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> empty2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token macro property" style="color:#36acaa">assert!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">empty1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">is_empty</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[test]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">test_interning</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> s1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">InternedString</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">from</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"hello"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> s2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">InternedString</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">from</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"hello"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> s3 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">InternedString</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">from</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"world"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token macro property" style="color:#36acaa">assert_eq!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> s2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token macro property" style="color:#36acaa">assert_ne!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> s3</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[test]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">test_string_length</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> s </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">InternedString</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">from</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"test"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token macro property" style="color:#36acaa">assert_eq!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[test]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">test_string_content</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> s </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">InternedString</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">from</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"RustLang"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token macro property" style="color:#36acaa">assert_eq!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">as_str</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"RustLang"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>]]></content:encoded>
            <category>Rust</category>
        </item>
        <item>
            <title><![CDATA[Rust tricks for the average developer (me)]]></title>
            <link>https://twistingtwists.github.io/byte_vault/rust-tips-tricks</link>
            <guid>https://twistingtwists.github.io/byte_vault/rust-tips-tricks</guid>
            <pubDate>Sat, 18 Jan 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[001 : &str and AsRef]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="001--str-and-asrefosstr">001 : <code>&amp;str</code> and <code>AsRef&lt;OsStr&gt;</code><a href="https://twistingtwists.github.io/byte_vault/rust-tips-tricks#001--str-and-asrefosstr" class="hash-link" aria-label="Direct link to 001--str-and-asrefosstr" title="Direct link to 001--str-and-asrefosstr">​</a></h3>
<p>The change from:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">load_extension</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> path</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">str</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">&gt;</span><br></span></code></pre></div></div>
<p>to:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">load_extension</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">P</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">AsRef</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token namespace" style="opacity:0.7">std</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">ffi</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">OsStr</span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> path</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">P</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">&gt;</span><br></span></code></pre></div></div>
<p>improves flexibility and usability. The original function only accepted <code>&amp;str</code>, requiring explicit conversion for types like <code>String</code>, <code>PathBuf</code>, or <code>Path</code>. The updated version uses a generic parameter <code>P</code> with the <code>AsRef&lt;std::ffi::OsStr&gt;</code> trait, allowing it to accept any type that can be referenced as an <code>OsStr</code>, such as <code>&amp;str</code>, <code>String</code>, <code>Path</code>, or <code>PathBuf</code>.</p>
<p><strong>Original Implementation:</strong></p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">std</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">path</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Path</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> path_str </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">from</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"/some/path"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> path_ref </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Path</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"/another/path"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Example 1: Using String</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">instance</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">load_extension</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">path_str</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Example 2: Using &amp;Path</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">instance</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">load_extension</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">path_ref</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Example 3: Using Path directly</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">instance</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">load_extension</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Path</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"/yet/another/path"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre></div></div>
<p>This reduces boilerplate and improves compatibility with different path types.</p>]]></content:encoded>
            <category>Rust</category>
        </item>
    </channel>
</rss>