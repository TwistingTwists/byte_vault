<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="rss.xsl"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Byte Vault Blog</title>
        <link>https://twistingtwists.github.io/byte_vault</link>
        <description>Byte Vault Blog</description>
        <lastBuildDate>Tue, 22 Apr 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Database Isolation (dirty writes)]]></title>
            <link>https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-writes</link>
            <guid>https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-writes</guid>
            <pubDate>Tue, 22 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Understanding Dirty Writes: A Database Isolation Problem]]></description>
            <content:encoded><![CDATA[<div class="tableOfContentsInline_prmo"><ul class="table-of-contents"><li><a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-writes#understanding-dirty-writes-a-database-isolation-problem">Understanding Dirty Writes: A Database Isolation Problem</a><ul><li><a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-writes#what-is-a-dirty-write">What is a Dirty Write?</a></li><li><a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-writes#example-scenario">Example Scenario</a></li><li><a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-writes#step-by-step-dirty-write-in-action">Step-by-Step: Dirty Write in Action</a></li></ul></li><li><a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-writes#why-is-this-a-problem">Why is This a Problem?</a></li><li><a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-writes#visualizing-the-dirty-write">Visualizing the Dirty Write</a></li><li><a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-writes#conclusion">Conclusion</a></li></ul></div>
<!-- -->
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="understanding-dirty-writes-a-database-isolation-problem">Understanding Dirty Writes: A Database Isolation Problem<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-writes#understanding-dirty-writes-a-database-isolation-problem" class="hash-link" aria-label="Direct link to Understanding Dirty Writes: A Database Isolation Problem" title="Direct link to Understanding Dirty Writes: A Database Isolation Problem">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-a-dirty-write">What is a Dirty Write?<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-writes#what-is-a-dirty-write" class="hash-link" aria-label="Direct link to What is a Dirty Write?" title="Direct link to What is a Dirty Write?">​</a></h3>
<p>A <strong>dirty write</strong> occurs when multiple transactions try to update the same data concurrently without proper isolation,
potentially causing one transaction to overwrite changes made by another uncommitted transaction.</p>
<p>This can lead to inconsistent or incorrect results in applications, especially in systems where multiple users or processes are accessing and modifying the data concurrently.</p>
<!-- -->
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="example-scenario">Example Scenario<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-writes#example-scenario" class="hash-link" aria-label="Direct link to Example Scenario" title="Direct link to Example Scenario">​</a></h3>
<p>Let's walk through a concrete example to see how a dirty write can happen.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="initial-database-state">Initial Database State<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-writes#initial-database-state" class="hash-link" aria-label="Direct link to Initial Database State" title="Direct link to Initial Database State">​</a></h4>
<p>Suppose we have a simple database table:</p>
<table><thead><tr><th>key</th><th>value</th></tr></thead><tbody><tr><td>name</td><td>abhishek</td></tr><tr><td>age</td><td>42</td></tr></tbody></table>
<p>Two transactions, <strong>T1</strong> and <strong>T2</strong>, will interact with the <code>name</code> row.</p>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="step-by-step-dirty-write-in-action">Step-by-Step: Dirty Write in Action<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-writes#step-by-step-dirty-write-in-action" class="hash-link" aria-label="Direct link to Step-by-Step: Dirty Write in Action" title="Direct link to Step-by-Step: Dirty Write in Action">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-t1-reads-the-original-value">1. T1 Reads the Original Value<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-writes#1-t1-reads-the-original-value" class="hash-link" aria-label="Direct link to 1. T1 Reads the Original Value" title="Direct link to 1. T1 Reads the Original Value">​</a></h4>
<ul>
<li><strong>T1</strong> starts and reads the value of <code>name</code>.</li>
<li>It sees:<br>
<code>name = 'abhishek'</code> (the committed value).</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="2-t2-updates-the-value-but-doesnt-commit">2. T2 Updates the Value (But Doesn't Commit)<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-writes#2-t2-updates-the-value-but-doesnt-commit" class="hash-link" aria-label="Direct link to 2. T2 Updates the Value (But Doesn't Commit)" title="Direct link to 2. T2 Updates the Value (But Doesn't Commit)">​</a></h4>
<ul>
<li><strong>T2</strong> starts and updates <code>name</code> to <code>'john'</code>.</li>
<li>This change is <strong>not yet committed</strong> to the database.</li>
<li>Other transactions should ideally not see this uncommitted value.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="3-t1-reads-again-dirty-write">3. T1 Reads Again (Dirty Write!)<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-writes#3-t1-reads-again-dirty-write" class="hash-link" aria-label="Direct link to 3. T1 Reads Again (Dirty Write!)" title="Direct link to 3. T1 Reads Again (Dirty Write!)">​</a></h4>
<ul>
<li><strong>T1</strong> reads the value of <code>name</code> again.</li>
<li><strong>Because the database isolation level is low (e.g., READ UNCOMMITTED), T1 sees <code>name = 'john'</code></strong>, even though T2 hasn't committed.</li>
<li>This is a <strong>dirty write</strong>: T1 is reading data that might be rolled back.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="4-t2-commits">4. T2 Commits<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-writes#4-t2-commits" class="hash-link" aria-label="Direct link to 4. T2 Commits" title="Direct link to 4. T2 Commits">​</a></h4>
<ul>
<li><strong>T2</strong> now commits its change.</li>
<li><code>name = 'john'</code> is now the official, permanent value.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="5-t1-commits">5. T1 Commits<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-writes#5-t1-commits" class="hash-link" aria-label="Direct link to 5. T1 Commits" title="Direct link to 5. T1 Commits">​</a></h4>
<ul>
<li><strong>T1</strong> commits, possibly basing its logic on the dirty value it read earlier.</li>
</ul>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-is-this-a-problem">Why is This a Problem?<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-writes#why-is-this-a-problem" class="hash-link" aria-label="Direct link to Why is This a Problem?" title="Direct link to Why is This a Problem?">​</a></h2>
<p>If <strong>T2</strong> had rolled back instead of committing, <strong>T1</strong> would have read a value that never officially existed in the database. This can cause application bugs, data corruption, or security issues.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="visualizing-the-dirty-write">Visualizing the Dirty Write<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-writes#visualizing-the-dirty-write" class="hash-link" aria-label="Direct link to Visualizing the Dirty Write" title="Direct link to Visualizing the Dirty Write">​</a></h2>
<p>The animation below demonstrates this scenario step-by-step. You can see how the database and transactions interact, and exactly when the dirty write occurs.</p>
<div class="w-full max-w-4xl mx-auto mt-8 mb-20"><h2 class="text-2xl font-bold text-white mb-6">Dirty Write Anomaly Demonstration</h2><div class="bg-gray-800/80 backdrop-blur-sm rounded-lg border border-gray-700 p-4 mb-6 text-gray-300"><h3 class="text-xl font-semibold text-white mb-2">What is a Dirty Write?</h3><p class="mb-3">A dirty write occurs when multiple transactions try to update the same data concurrently without proper isolation, potentially causing one transaction to overwrite changes made by another uncommitted transaction.</p><p>In this example, Transaction T1 writes a new balance but doesn't commit. Before T1 commits, Transaction T2 also writes to the same record, overwriting T1's uncommitted changes. This leads to lost updates and data inconsistency.</p></div><div class="w-full mt-2 mb-6 px-6 py-4 bg-gray-800/90 backdrop-blur-sm rounded-lg shadow-md border border-gray-700"><div class="relative h-72 bg-gray-900/50 backdrop-blur rounded-xl border border-gray-700/50 overflow-hidden px-8 py-6 mx-4 my-2 group"></div></div><div class="w-full mt-2 mb-6 px-6 py-4 bg-gray-800/90 backdrop-blur-sm rounded-lg shadow-md border border-gray-700"><div class="flex justify-center mb-8"><div class="relative bg-gray-900 rounded-lg border border-gray-600 p-6 w-full max-w-md shadow-lg"><div class="absolute -top-3 left-1/2 transform -translate-x-1/2 bg-blue-600 text-white px-3 py-1 rounded-md text-sm font-bold">Database</div><table class="w-full text-white border-collapse"><thead><tr><th class="border-b border-gray-700 py-2 text-left w-1/3">Key</th><th class="border-b border-gray-700 py-2 text-left w-2/3">Value</th></tr></thead><tbody><tr><td class="py-2 font-mono">account_balance</td><td class="py-2 font-mono flex items-center gap-2"><span class="text-blue-400 whitespace-nowrap">$1000</span><span class="text-xs text-blue-300 whitespace-nowrap">(committed)</span></td></tr></tbody></table></div></div><div class="w-full max-w-4xl mb-4 p-4 bg-gray-800/90 backdrop-blur-sm rounded-lg shadow-md text-center border border-gray-700 mx-auto"><p class="font-medium text-white text-lg leading-tight"><span class="font-bold text-indigo-300">Status:</span> <!-- -->Database is in initial state<span class="ml-6 text-gray-300 text-base">(Step: <!-- -->0<!-- -->/<!-- -->9<!-- -->)</span></p></div><div class="grid grid-cols-1 md:grid-cols-2 gap-6"><div class="relative bg-gray-900 rounded-lg border border-gray-600 p-4 shadow-lg"><div class="absolute -top-3 left-4 bg-cyan-600 text-white px-3 py-1 rounded-md text-sm font-bold">Transaction 1</div><div class="mt-3"><div class="flex justify-between mb-2"><span class="text-gray-400">Status:</span><span class="font-medium text-gray-300">Idle</span></div></div></div><div class="relative bg-gray-900 rounded-lg border border-gray-600 p-4 shadow-lg"><div class="absolute -top-3 left-4 bg-orange-600 text-white px-3 py-1 rounded-md text-sm font-bold">Transaction 2</div><div class="mt-3"><div class="flex justify-between mb-2"><span class="text-gray-400">Status:</span><span class="font-medium text-gray-300">Idle</span></div></div></div></div></div><div class="w-full max-w-4xl flex flex-wrap justify-center items-center gap-3 mt-4 p-3 bg-gray-800/90 backdrop-blur-sm rounded-lg shadow-md border border-gray-700 sticky bottom-0 z-50"><button class="px-5 py-2 text-base bg-blue-600 text-white font-semibold rounded-md shadow hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-all duration-150 ease-in-out relative overflow-visible">Play</button><button disabled="" class="px-5 py-2 text-base bg-yellow-500 text-white font-semibold rounded-md shadow hover:bg-yellow-600 disabled:bg-gray-400 disabled:cursor-not-allowed transition-all duration-150">Pause</button><button class="px-5 py-2 text-base bg-purple-600 text-white font-semibold rounded-md shadow hover:bg-purple-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-all duration-150">Step</button><button class="px-5 py-2 text-base bg-red-600 text-white font-semibold rounded-md shadow hover:bg-red-700 transition-all duration-150">Reset</button><div class="flex items-center gap-3 px-3 md:px-5 py-2 bg-gray-700/50 backdrop-blur-sm rounded-md"><label for="speed-slider" class="text-white text-sm whitespace-nowrap">Speed: x<!-- -->1.0</label><input id="speed-slider" type="range" min="0.5" max="2.5" step="0.5" class="w-24 md:w-36 h-2 bg-gray-600 rounded-lg appearance-none cursor-pointer accent-blue-500" value="1"></div><div class="hidden md:flex items-center gap-2 px-3 md:px-5 py-2 bg-gray-700/50 backdrop-blur-sm rounded-md"><span class="text-white text-sm whitespace-nowrap">Progress: <!-- -->0<!-- --> / <!-- -->9</span><div class="w-24 md:w-32 bg-gray-600 rounded-full h-2.5 overflow-hidden"><div class="bg-green-600 h-2.5 rounded-full transition-all duration-300 ease-out" style="width:0%"></div></div></div></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-writes#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>Dirty writes are a classic example of why database isolation levels matter. By default, most production databases avoid dirty writes by using stricter isolation (like READ COMMITTED or higher). However, understanding this scenario helps you appreciate the trade-offs between performance and consistency in concurrent systems.</p>]]></content:encoded>
            <category>databases</category>
            <category>transactions</category>
        </item>
        <item>
            <title><![CDATA[Database Isolation (dirty reads)]]></title>
            <link>https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads</link>
            <guid>https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads</guid>
            <pubDate>Mon, 21 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Understanding Dirty Reads: A Database Isolation Problem]]></description>
            <content:encoded><![CDATA[<div class="tableOfContentsInline_prmo"><ul class="table-of-contents"><li><a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#understanding-dirty-reads-a-database-isolation-problem">Understanding Dirty Reads: A Database Isolation Problem</a><ul><li><a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#what-is-a-dirty-read">What is a Dirty Read?</a></li><li><a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#example-scenario">Example Scenario</a></li><li><a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#step-by-step-dirty-read-in-action">Step-by-Step: Dirty Read in Action</a></li></ul></li><li><a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#why-is-this-a-problem">Why is This a Problem?</a></li><li><a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#visualizing-the-dirty-read">Visualizing the Dirty Read</a></li><li><a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#conclusion">Conclusion</a></li></ul></div>
<!-- -->
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="understanding-dirty-reads-a-database-isolation-problem">Understanding Dirty Reads: A Database Isolation Problem<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#understanding-dirty-reads-a-database-isolation-problem" class="hash-link" aria-label="Direct link to Understanding Dirty Reads: A Database Isolation Problem" title="Direct link to Understanding Dirty Reads: A Database Isolation Problem">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-a-dirty-read">What is a Dirty Read?<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#what-is-a-dirty-read" class="hash-link" aria-label="Direct link to What is a Dirty Read?" title="Direct link to What is a Dirty Read?">​</a></h3>
<p>A <strong>dirty read</strong> occurs when a transaction reads data that has been written by another transaction but not yet committed. If the writing transaction rolls back, the data read by the first transaction becomes invalid—hence, "dirty."</p>
<p>This can lead to inconsistent or incorrect results in applications, especially in systems where multiple users or processes are accessing and modifying the data concurrently.</p>
<!-- -->
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="example-scenario">Example Scenario<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#example-scenario" class="hash-link" aria-label="Direct link to Example Scenario" title="Direct link to Example Scenario">​</a></h3>
<p>Let's walk through a concrete example to see how a dirty read can happen.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="initial-database-state">Initial Database State<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#initial-database-state" class="hash-link" aria-label="Direct link to Initial Database State" title="Direct link to Initial Database State">​</a></h4>
<p>Suppose we have a simple database table:</p>
<table><thead><tr><th>key</th><th>value</th></tr></thead><tbody><tr><td>name</td><td>abhishek</td></tr><tr><td>age</td><td>42</td></tr></tbody></table>
<p>Two transactions, <strong>T1</strong> and <strong>T2</strong>, will interact with the <code>name</code> row.</p>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="step-by-step-dirty-read-in-action">Step-by-Step: Dirty Read in Action<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#step-by-step-dirty-read-in-action" class="hash-link" aria-label="Direct link to Step-by-Step: Dirty Read in Action" title="Direct link to Step-by-Step: Dirty Read in Action">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-t1-reads-the-original-value">1. T1 Reads the Original Value<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#1-t1-reads-the-original-value" class="hash-link" aria-label="Direct link to 1. T1 Reads the Original Value" title="Direct link to 1. T1 Reads the Original Value">​</a></h4>
<ul>
<li><strong>T1</strong> starts and reads the value of <code>name</code>.</li>
<li>It sees:<br>
<code>name = 'abhishek'</code> (the committed value).</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="2-t2-updates-the-value-but-doesnt-commit">2. T2 Updates the Value (But Doesn't Commit)<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#2-t2-updates-the-value-but-doesnt-commit" class="hash-link" aria-label="Direct link to 2. T2 Updates the Value (But Doesn't Commit)" title="Direct link to 2. T2 Updates the Value (But Doesn't Commit)">​</a></h4>
<ul>
<li><strong>T2</strong> starts and updates <code>name</code> to <code>'john'</code>.</li>
<li>This change is <strong>not yet committed</strong> to the database.</li>
<li>Other transactions should ideally not see this uncommitted value.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="3-t1-reads-again-dirty-read">3. T1 Reads Again (Dirty Read!)<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#3-t1-reads-again-dirty-read" class="hash-link" aria-label="Direct link to 3. T1 Reads Again (Dirty Read!)" title="Direct link to 3. T1 Reads Again (Dirty Read!)">​</a></h4>
<ul>
<li><strong>T1</strong> reads the value of <code>name</code> again.</li>
<li><strong>Because the database isolation level is low (e.g., READ UNCOMMITTED), T1 sees <code>name = 'john'</code></strong>, even though T2 hasn't committed.</li>
<li>This is a <strong>dirty read</strong>: T1 is reading data that might be rolled back.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="4-t2-commits">4. T2 Commits<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#4-t2-commits" class="hash-link" aria-label="Direct link to 4. T2 Commits" title="Direct link to 4. T2 Commits">​</a></h4>
<ul>
<li><strong>T2</strong> now commits its change.</li>
<li><code>name = 'john'</code> is now the official, permanent value.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="5-t1-commits">5. T1 Commits<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#5-t1-commits" class="hash-link" aria-label="Direct link to 5. T1 Commits" title="Direct link to 5. T1 Commits">​</a></h4>
<ul>
<li><strong>T1</strong> commits, possibly basing its logic on the dirty value it read earlier.</li>
</ul>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-is-this-a-problem">Why is This a Problem?<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#why-is-this-a-problem" class="hash-link" aria-label="Direct link to Why is This a Problem?" title="Direct link to Why is This a Problem?">​</a></h2>
<p>If <strong>T2</strong> had rolled back instead of committing, <strong>T1</strong> would have read a value that never officially existed in the database. This can cause application bugs, data corruption, or security issues.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="visualizing-the-dirty-read">Visualizing the Dirty Read<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#visualizing-the-dirty-read" class="hash-link" aria-label="Direct link to Visualizing the Dirty Read" title="Direct link to Visualizing the Dirty Read">​</a></h2>
<p>The animation below demonstrates this scenario step-by-step. You can see how the database and transactions interact, and exactly when the dirty read occurs.</p>
<div class="flex flex-col items-center p-4 min-h-screen bg-gradient-to-br from-gray-800 to-indigo-900 font-sans"><h2 class="text-3xl font-bold mb-5 text-white shadow-sm px-4 py-1 rounded bg-black/30">Concurrency Issue: Dirty Read Visualization</h2><div class="w-full max-w-4xl"><div class="w-full mt-2 mb-6 px-6 py-4 bg-gray-800/90 backdrop-blur-sm rounded-lg shadow-md border border-gray-700"><div class="flex justify-center mb-8"><div class="relative bg-gray-900 rounded-lg border border-gray-600 p-6 w-full max-w-md shadow-lg"><div class="absolute -top-3 left-1/2 transform -translate-x-1/2 bg-blue-600 text-white px-3 py-1 rounded-md text-sm font-bold">Database</div><table class="w-full text-white border-collapse"><thead><tr><th class="border-b border-gray-700 py-2 text-left w-1/3">Key</th><th class="border-b border-gray-700 py-2 text-left w-2/3">Value</th></tr></thead><tbody><tr><td class="py-2 font-mono">name</td><td class="py-2 font-mono flex items-center gap-2"><span class="text-blue-400 whitespace-nowrap">abhishek</span><span class="text-xs text-blue-300 whitespace-nowrap">(committed)</span></td></tr></tbody></table></div></div><div class="w-full max-w-4xl mb-4 p-4 bg-gray-800/90 backdrop-blur-sm rounded-lg shadow-md text-center border border-gray-700 mx-auto"><p class="font-medium text-white text-lg leading-tight"><span class="font-bold text-indigo-300">Status:</span> <!-- -->Ready to visualize Dirty Read.<span class="ml-6 text-gray-300 text-base">(Step: <!-- -->0<!-- -->/<!-- -->7<!-- -->)</span></p></div><div class="grid grid-cols-1 md:grid-cols-2 gap-6"><div class="relative bg-gray-900 rounded-lg border border-gray-600 p-4 shadow-lg"><div class="absolute -top-3 left-4 bg-cyan-600 text-white px-3 py-1 rounded-md text-sm font-bold">Transaction 1</div><div class="mt-3"><div class="flex justify-between mb-2"><span class="text-gray-400">Status:</span><span class="font-medium text-gray-300">Idle</span></div></div></div><div class="relative bg-gray-900 rounded-lg border border-gray-600 p-4 shadow-lg"><div class="absolute -top-3 left-4 bg-orange-600 text-white px-3 py-1 rounded-md text-sm font-bold">Transaction 2</div><div class="mt-3"><div class="flex justify-between mb-2"><span class="text-gray-400">Status:</span><span class="font-medium text-gray-300">Idle</span></div></div></div></div></div></div><div class="w-full max-w-4xl"><div class="w-full mt-2 mb-6 px-6 py-4 bg-gray-800/90 backdrop-blur-sm rounded-lg shadow-md border border-gray-700"><h3 class="text-xl font-bold text-white mb-4 pb-2 border-b border-gray-600/50">Transaction Timeline</h3><div class="flex flex-wrap justify-center items-center gap-4 mb-4 text-xs text-white/90 transition-all duration-300 opacity-100 -translate-y-0"><div class="flex items-center gap-2 px-2 py-1 rounded-md bg-gray-800/30 border border-gray-700/30"><div class="w-2.5 h-2.5 rounded-full bg-cyan-500 shadow-[0_0_6px_0_rgba(34,211,238,0.4)]"></div><span>T1 Events</span></div><div class="flex items-center gap-2 px-2 py-1 rounded-md bg-gray-800/30 border border-gray-700/30"><div class="w-2.5 h-2.5 rounded-full bg-orange-500 shadow-[0_0_6px_0_rgba(249,115,22,0.4)]"></div><span>T2 Events</span></div><div class="flex items-center gap-2 px-2 py-1 rounded-md bg-gray-800/30 border border-gray-700/30"><div class="w-2.5 h-2.5 rounded-full bg-yellow-500 shadow-[0_0_6px_0_rgba(234,179,8,0.4)]"></div><span>Dirty Read</span></div><div class="flex items-center gap-2 px-2 py-1 rounded-md bg-gray-800/30 border border-gray-700/30"><div class="w-2.5 h-2.5 rounded-full bg-indigo-500 shadow-[0_0_6px_0_rgba(99,102,241,0.4)]"></div><span>System Events</span></div><div class="flex items-center gap-2 px-2 py-1 rounded-md bg-gray-800/30 border border-gray-700/30"><div class="w-2.5 h-2.5 rounded-full bg-white ring-1 ring-white/30"></div><span>Current Step</span></div></div><div class="relative h-52 bg-gray-900/50 backdrop-blur rounded-xl border border-gray-700/50 overflow-hidden px-8 py-6 mx-4 my-2 group"><div class="absolute top-1/2 left-16 right-16 h-[2px] bg-gray-700/50 rounded-full"></div><div class="absolute top-1/3 left-16 right-16 h-[2px] bg-gray-700/30"></div><div class="absolute top-2/3 left-16 right-16 h-[2px] bg-gray-700/30"></div><div class="absolute top-1/3 left-16 h-[2px] bg-cyan-500/50 backdrop-blur transition-all duration-300 shadow-[0_0_8px_0_rgba(34,211,238,0.4)]" style="width:0%"></div><div class="absolute top-2/3 left-16 h-[2px] bg-orange-500/50 backdrop-blur transition-all duration-300 shadow-[0_0_8px_0_rgba(249,115,22,0.4)]" style="width:0%"></div><div class="absolute top-1/3 left-6 -translate-y-1/2 text-sm font-medium text-cyan-400/90 px-2 py-1 rounded-md bg-cyan-950/30 border border-cyan-500/20 shadow-sm">T1</div><div class="absolute top-2/3 left-6 -translate-y-1/2 text-sm font-medium text-orange-400/90 px-2 py-1 rounded-md bg-orange-950/30 border border-orange-500/20 shadow-sm">T2</div><div class="absolute transform -translate-x-1/2 -translate-y-1/2 flex flex-col items-center" style="left:16%;top:50%"><div class="w-4 h-4 rounded-full bg-indigo-600/50 shadow-[0_0_8px_0_rgba(99,102,241,0.4)] ring-2 ring-white/30 scale-125 shadow-md flex items-center justify-center backdrop-blur-sm transition-all duration-300"><div class="w-2 h-2 rounded-full bg-white animate-pulse"></div></div><div class="absolute whitespace-nowrap text-xs font-medium text-white px-2.5 py-1.5 rounded-lg top-7 bg-indigo-600/50/10 backdrop-blur-sm border border-gray-700/30 shadow-lg font-bold scale-105 transition-all duration-300">Initial State</div></div><div class="absolute transform -translate-x-1/2 -translate-y-1/2 flex flex-col items-center" style="left:24.5%;top:33.333%"><div class="w-4 h-4 rounded-full bg-cyan-800/50 shadow-[0_0_8px_0_rgba(34,211,238,0.4)] shadow-md flex items-center justify-center backdrop-blur-sm transition-all duration-300"></div><div class="absolute whitespace-nowrap text-xs font-medium text-white px-2.5 py-1.5 rounded-lg bottom-7 bg-cyan-800/50/10 backdrop-blur-sm border border-gray-700/30 shadow-lg transition-all duration-300">Read</div><div class="absolute h-16 w-[1px] bg-cyan-800/50/30 backdrop-blur-sm" style="top:0%"></div></div><div class="absolute transform -translate-x-1/2 -translate-y-1/2 flex flex-col items-center" style="left:33%;top:66.667%"><div class="w-4 h-4 rounded-full bg-orange-800/50 shadow-[0_0_8px_0_rgba(249,115,22,0.4)] shadow-md flex items-center justify-center backdrop-blur-sm transition-all duration-300"></div><div class="absolute whitespace-nowrap text-xs font-medium text-white px-2.5 py-1.5 rounded-lg top-7 bg-orange-800/50/10 backdrop-blur-sm border border-gray-700/30 shadow-lg transition-all duration-300">Begin Write</div><div class="absolute h-16 w-[1px] bg-orange-800/50/30 backdrop-blur-sm" style="top:-100%"></div></div><div class="absolute transform -translate-x-1/2 -translate-y-1/2 flex flex-col items-center" style="left:41.5%;top:66.667%"><div class="w-4 h-4 rounded-full bg-orange-800/50 shadow-[0_0_8px_0_rgba(249,115,22,0.4)] shadow-md flex items-center justify-center backdrop-blur-sm transition-all duration-300"></div><div class="absolute whitespace-nowrap text-xs font-medium text-white px-2.5 py-1.5 rounded-lg top-7 bg-orange-800/50/10 backdrop-blur-sm border border-gray-700/30 shadow-lg transition-all duration-300">Write (Uncommitted)</div><div class="absolute h-16 w-[1px] bg-orange-800/50/30 backdrop-blur-sm" style="top:-100%"></div></div><div class="absolute transform -translate-x-1/2 -translate-y-1/2 flex flex-col items-center" style="left:50%;top:33.333%"><div class="w-4 h-4 rounded-full bg-yellow-800/50 shadow-[0_0_8px_0_rgba(234,179,8,0.4)] shadow-md flex items-center justify-center backdrop-blur-sm transition-all duration-300"></div><div class="absolute whitespace-nowrap text-xs font-medium text-white px-2.5 py-1.5 rounded-lg bottom-7 bg-yellow-800/50/10 backdrop-blur-sm border border-gray-700/30 shadow-lg transition-all duration-300">Dirty Read</div><div class="absolute h-16 w-[1px] bg-yellow-800/50/30 backdrop-blur-sm" style="top:0%"></div></div><div class="absolute transform -translate-x-1/2 -translate-y-1/2 flex flex-col items-center" style="left:58.5%;top:66.667%"><div class="w-4 h-4 rounded-full bg-orange-800/50 shadow-[0_0_8px_0_rgba(249,115,22,0.4)] shadow-md flex items-center justify-center backdrop-blur-sm transition-all duration-300"></div><div class="absolute whitespace-nowrap text-xs font-medium text-white px-2.5 py-1.5 rounded-lg top-7 bg-orange-800/50/10 backdrop-blur-sm border border-gray-700/30 shadow-lg transition-all duration-300">Commit</div><div class="absolute h-16 w-[1px] bg-orange-800/50/30 backdrop-blur-sm" style="top:-100%"></div></div><div class="absolute transform -translate-x-1/2 -translate-y-1/2 flex flex-col items-center" style="left:67%;top:33.333%"><div class="w-4 h-4 rounded-full bg-cyan-800/50 shadow-[0_0_8px_0_rgba(34,211,238,0.4)] shadow-md flex items-center justify-center backdrop-blur-sm transition-all duration-300"></div><div class="absolute whitespace-nowrap text-xs font-medium text-white px-2.5 py-1.5 rounded-lg bottom-7 bg-cyan-800/50/10 backdrop-blur-sm border border-gray-700/30 shadow-lg transition-all duration-300">Commit</div><div class="absolute h-16 w-[1px] bg-cyan-800/50/30 backdrop-blur-sm" style="top:0%"></div></div><div class="absolute transform -translate-x-1/2 -translate-y-1/2 flex flex-col items-center" style="left:75.5%;top:50%"><div class="w-4 h-4 rounded-full bg-indigo-800/50 shadow-[0_0_8px_0_rgba(99,102,241,0.4)] shadow-md flex items-center justify-center backdrop-blur-sm transition-all duration-300"></div><div class="absolute whitespace-nowrap text-xs font-medium text-white px-2.5 py-1.5 rounded-lg top-7 bg-indigo-800/50/10 backdrop-blur-sm border border-gray-700/30 shadow-lg transition-all duration-300">Final State</div></div></div></div></div><div class="w-full max-w-4xl flex flex-wrap justify-center items-center gap-3 mt-4 p-3 bg-gray-800/90 backdrop-blur-sm rounded-lg shadow-md border border-gray-700 sticky bottom-0 z-50"><button class="px-5 py-2 text-base bg-blue-600 text-white font-semibold rounded-md shadow hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-all duration-150 ease-in-out relative overflow-visible">Play</button><button disabled="" class="px-5 py-2 text-base bg-yellow-500 text-white font-semibold rounded-md shadow hover:bg-yellow-600 disabled:bg-gray-400 disabled:cursor-not-allowed transition-all duration-150 ease-in-out">Pause</button><button class="px-5 py-2 text-base bg-green-500 text-white font-semibold rounded-md shadow hover:bg-green-600 disabled:bg-gray-400 disabled:cursor-not-allowed transition-all duration-150 ease-in-out relative overflow-visible">Step Forward</button><button class="px-5 py-2 text-base bg-red-500 text-white font-semibold rounded-md shadow hover:bg-red-600 transition-all duration-150 ease-in-out relative overflow-visible">Reset</button><div class="flex items-center gap-2 ml-4 p-2 bg-gray-700 rounded border border-gray-600"><label for="speedControl" class="text-sm font-medium text-white whitespace-nowrap">Anim Speed:</label><input type="range" id="speedControl" min="0.2" max="5" step="0.1" class="w-24 h-2 bg-gray-600 rounded-lg appearance-none cursor-pointer accent-blue-500" value="1"><span class="text-sm font-medium text-white w-8 text-right">1.0<!-- -->x</span></div></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://twistingtwists.github.io/byte_vault/database-isolation-visualised-dirty-reads#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>Dirty reads are a classic example of why database isolation levels matter. By default, most production databases avoid dirty reads by using stricter isolation (like READ COMMITTED or higher). However, understanding this scenario helps you appreciate the trade-offs between performance and consistency in concurrent systems.</p>]]></content:encoded>
            <category>databases</category>
            <category>transactions</category>
        </item>
        <item>
            <title><![CDATA[Understanding Eventloops (Tokio Internals)]]></title>
            <link>https://twistingtwists.github.io/byte_vault/tokio-internals-visualised</link>
            <guid>https://twistingtwists.github.io/byte_vault/tokio-internals-visualised</guid>
            <pubDate>Sat, 19 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Prelude]]></description>
            <content:encoded><![CDATA[<div class="tableOfContentsInline_prmo"><ul class="table-of-contents"><li><a href="https://twistingtwists.github.io/byte_vault/tokio-internals-visualised#prelude">Prelude</a></li><li><a href="https://twistingtwists.github.io/byte_vault/tokio-internals-visualised#multi-threaded-event-loop--server">Multi-Threaded Event Loop / Server</a></li><li><a href="https://twistingtwists.github.io/byte_vault/tokio-internals-visualised#phase-0-the-problem">Phase 0: The Problem</a><ul><li><a href="https://twistingtwists.github.io/byte_vault/tokio-internals-visualised#the-thread-per-connection-resource-drain">The Thread-Per-Connection Resource Drain</a></li></ul></li></ul></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="prelude">Prelude<a href="https://twistingtwists.github.io/byte_vault/tokio-internals-visualised#prelude" class="hash-link" aria-label="Direct link to Prelude" title="Direct link to Prelude">​</a></h2>
<p>This is the first post in a four part series that will provide an understanding of the mechanics behind the Tokio runtime in Rust. This post focuses on the challenges in a multi-threaded event loop that force us to think of async runtimes like Tokio.</p>
<p>Index of the four part series:</p>
<ol>
<li>Visualizing Tokio Internals: Part I - Multi-Threaded Event Loop / Server</li>
<li>Visualizing Tokio Internals: Part II - Reactor</li>
<li>Visualizing Tokio Internals: Part III - Wakers</li>
<li>Visualizing Tokio Internals: Part IV - Executors</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="multi-threaded-event-loop--server">Multi-Threaded Event Loop / Server<a href="https://twistingtwists.github.io/byte_vault/tokio-internals-visualised#multi-threaded-event-loop--server" class="hash-link" aria-label="Direct link to Multi-Threaded Event Loop / Server" title="Direct link to Multi-Threaded Event Loop / Server">​</a></h2>
<p>What challenges in a multi-threaded event loop force us to think of async runtimes like Tokio?</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="phase-0-the-problem">Phase 0: The Problem<a href="https://twistingtwists.github.io/byte_vault/tokio-internals-visualised#phase-0-the-problem" class="hash-link" aria-label="Direct link to Phase 0: The Problem" title="Direct link to Phase 0: The Problem">​</a></h2>
<div class="my-3 sm:my-4 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-950/30 dark:to-indigo-950/30 rounded-lg overflow-hidden shadow-sm dark:shadow-blue-900/5 border-l-4 border-blue-400 dark:border-blue-600"><div class="p-3 sm:p-4 space-y-2 sm:space-y-3"><div class="flex flex-wrap sm:flex-nowrap items-start sm:items-center gap-2 sm:gap-3"><div class="flex items-center gap-2 sm:gap-3 w-full sm:w-auto"><div class="flex-shrink-0 p-1.5 sm:p-2 bg-blue-100 dark:bg-blue-900/30 rounded-md group relative"><svg class="w-3.5 h-3.5 sm:w-4 sm:h-4 text-blue-600 dark:text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-label="Learning Objective"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path></svg><div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-1 px-1.5 py-0.5 text-2xs sm:text-xs text-white bg-gray-800 dark:bg-gray-700 rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap pointer-events-none">Learning Objective</div></div><div class="flex-grow min-w-0"><div class="text-xs sm:text-xs text-gray-600 dark:text-gray-400 mb-1 mt-0">After reading this you will be able to answer:</div><p class="text-sm sm:text-base font-medium text-blue-900 dark:text-blue-100 truncate">Why do we need async runtimes like Tokio?</p></div></div><button id="why-tokio-button" class="flex items-center gap-1 px-2 py-1 ml-auto text-2xs sm:text-xs font-medium text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition-colors duration-200 focus:outline-none" aria-expanded="false" aria-controls="why-tokio">Show<svg class="w-2.5 h-2.5 sm:w-3 sm:h-3" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path></svg></button></div><div id="why-tokio" role="region" aria-labelledby="why-tokio-button" class="overflow-hidden transition-all duration-300 ease-in-out max-h-0 opacity-0"><div class="pt-2 border-t border-blue-100 dark:border-blue-800 text-xs sm:text-sm text-gray-700 dark:text-gray-300"><ul>
<li><strong>Resource Efficiency:</strong> Traditional thread-per-connection models waste system resources</li>
<li><strong>Scalability:</strong> Async enables handling thousands of connections with minimal overhead</li>
<li><strong>Performance:</strong> Event-driven architecture reduces context switching and memory usage</li>
<li><strong>Cost-Effective:</strong> Better resource utilization means lower infrastructure costs</li>
</ul></div></div></div></div>
<!-- -->
<p>Modern applications, especially network services, need to handle many things concurrently. Imagine a web server handling thousands of client connections simultaneously.</p>
<p>A naive approach is to dedicate one Operating System (OS) thread to each connection. Let's see why this doesn't scale well.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-thread-per-connection-resource-drain">The Thread-Per-Connection Resource Drain<a href="https://twistingtwists.github.io/byte_vault/tokio-internals-visualised#the-thread-per-connection-resource-drain" class="hash-link" aria-label="Direct link to The Thread-Per-Connection Resource Drain" title="Direct link to The Thread-Per-Connection Resource Drain">​</a></h3>
<p>The visualization below shows resource consumption (CPU/Memory) and throughput limits of a blocking thread-per-connection model.</p>
<div class="my-4 border rounded-lg border-gray-200 dark:border-gray-800"><button class="w-full px-4 py-3 flex items-center justify-between text-left bg-gray-50 dark:bg-gray-900 rounded-t-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors duration-200" id="thread-per-connection" aria-expanded="false"><span class="font-medium text-gray-900 dark:text-gray-100">How a thread-per-connection server behaves as load increases</span><svg class="w-5 h-5 transform transition-transform duration-200" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path></svg></button><div class="overflow-hidden transition-all duration-300 ease-in-out max-h-0 opacity-0"><div class="p-4 prose dark:prose-invert max-w-none"><p><strong>Description:</strong></p><p>Imagine a dashboard resembling <code>htop</code> or Task Manager:</p><ol>
<li><strong>CPU Usage:</strong> Bars representing individual CPU cores.</li>
<li><strong>Memory Usage:</strong> A single bar showing total RAM consumption.</li>
<li><strong>Active Threads:</strong> A counter or list showing running OS threads.</li>
<li><strong>Requests/Second:</strong> A throughput meter.</li>
<li><strong>Incoming Requests Queue:</strong> A visual queue of pending connections.</li>
</ol><p><strong>Simulation:</strong></p><ul>
<li><strong>Start:</strong> The server starts. CPU/Memory usage is low. Throughput is 0. Few base threads exist.</li>
<li><strong>Low Load:</strong> Simulate a few incoming connections (~10). For each, a new OS thread is created.<!-- -->
<ul>
<li><em>Visual:</em> Active Threads count increases slightly. Memory usage ticks up slightly. CPU usage might blip as threads start but stays relatively low if connections are mostly idle. Throughput matches the request rate.</li>
</ul>
</li>
<li><strong>High Load:</strong> Simulate hundreds or thousands of incoming connections. Many connections involve waiting for network I/O (reading request body, waiting for database, sending response).<!-- -->
<ul>
<li><em>Visual:</em>
<ul>
<li><strong>Active Threads:</strong> The count explodes. Each thread requires kernel resources and its own stack (~MBs).</li>
<li><strong>Memory Usage:</strong> The Memory bar shoots up dramatically, potentially hitting system limits.</li>
<li><strong>CPU Usage:</strong> CPU bars likely thrash. Even if threads are mostly <em>waiting</em> (blocked on I/O), the OS spends significant time <em>context switching</em> between them. This is overhead, not useful work.</li>
<li><strong>Requests Queue:</strong> The incoming requests queue grows rapidly because threads are created, but many quickly block on I/O. The server struggles to accept new connections.</li>
<li><strong>Requests/Second:</strong> The throughput meter hits a plateau far below the incoming request rate, possibly even decreasing as context-switching overhead dominates.</li>
</ul>
</li>
</ul>
</li>
</ul></div></div></div>
<div class="visualization-container bg-gray-100 dark:bg-gray-900 p-6 rounded-lg shadow-md space-y-6"><div class="bg-black dark:bg-gray-800 text-green-400 dark:text-green-300 p-4 rounded font-mono text-sm h-64 overflow-y-auto"><div class="mb-2"><span class="text-blue-400 dark:text-blue-300">htop - </span><span class="text-white dark:text-gray-100">Thread-Per-Connection Server</span></div><div class="mb-4"><div class="flex justify-between mb-1"><span>Active Connections:</span><span class="">10</span></div><div class="flex justify-between mb-1"><span>Threads:</span><span class="">12</span></div><div class="flex justify-between mb-1"><span>Requests/sec:</span><span class="text-red-500">0</span></div><div class="flex justify-between mb-1"><span>Request Queue:</span><span class="">0</span></div></div><div class="mb-4"><div class="text-white dark:text-gray-100 mb-1">CPU Usage</div><div class="mb-2"><div class="flex items-center justify-between"><span class="w-12">CPU 0</span><div class="w-full bg-gray-700 dark:bg-gray-600 h-4 ml-2 mr-2 rounded-sm"><div class="h-full rounded-sm bg-green-500 dark:bg-green-400" style="width:5%"></div></div><span class="w-8 text-right">5%</span></div></div><div class="mb-2"><div class="flex items-center justify-between"><span class="w-12">CPU 1</span><div class="w-full bg-gray-700 dark:bg-gray-600 h-4 ml-2 mr-2 rounded-sm"><div class="h-full rounded-sm bg-green-500 dark:bg-green-400" style="width:3%"></div></div><span class="w-8 text-right">3%</span></div></div><div class="mb-2"><div class="flex items-center justify-between"><span class="w-12">CPU 2</span><div class="w-full bg-gray-700 dark:bg-gray-600 h-4 ml-2 mr-2 rounded-sm"><div class="h-full rounded-sm bg-green-500 dark:bg-green-400" style="width:4%"></div></div><span class="w-8 text-right">4%</span></div></div><div class="mb-2"><div class="flex items-center justify-between"><span class="w-12">CPU 3</span><div class="w-full bg-gray-700 dark:bg-gray-600 h-4 ml-2 mr-2 rounded-sm"><div class="h-full rounded-sm bg-green-500 dark:bg-green-400" style="width:2%"></div></div><span class="w-8 text-right">2%</span></div></div><div class="mb-2"><div class="flex items-center justify-between"><span class="w-12">CPU 4</span><div class="w-full bg-gray-700 dark:bg-gray-600 h-4 ml-2 mr-2 rounded-sm"><div class="h-full rounded-sm bg-green-500 dark:bg-green-400" style="width:5%"></div></div><span class="w-8 text-right">5%</span></div></div><div class="mb-2"><div class="flex items-center justify-between"><span class="w-12">CPU 5</span><div class="w-full bg-gray-700 dark:bg-gray-600 h-4 ml-2 mr-2 rounded-sm"><div class="h-full rounded-sm bg-green-500 dark:bg-green-400" style="width:3%"></div></div><span class="w-8 text-right">3%</span></div></div><div class="mb-2"><div class="flex items-center justify-between"><span class="w-12">CPU 6</span><div class="w-full bg-gray-700 dark:bg-gray-600 h-4 ml-2 mr-2 rounded-sm"><div class="h-full rounded-sm bg-green-500 dark:bg-green-400" style="width:2%"></div></div><span class="w-8 text-right">2%</span></div></div><div class="mb-2"><div class="flex items-center justify-between"><span class="w-12">CPU 7</span><div class="w-full bg-gray-700 dark:bg-gray-600 h-4 ml-2 mr-2 rounded-sm"><div class="h-full rounded-sm bg-green-500 dark:bg-green-400" style="width:4%"></div></div><span class="w-8 text-right">4%</span></div></div><div class="flex items-center justify-between mt-1"><span class="w-12">Average:</span><div class="w-full bg-gray-700 dark:bg-gray-600 h-4 ml-2 mr-2 rounded-sm"><div class="h-full rounded-sm bg-green-500 dark:bg-green-400" style="width:0%"></div></div><span class="w-8 text-right">0%</span></div></div><div class="mb-4"><div class="text-white dark:text-gray-100 mb-1">Memory Usage</div><div class="flex items-center justify-between"><span class="w-12">Mem</span><div class="w-full bg-gray-700 dark:bg-gray-600 h-4 ml-2 mr-2 rounded-sm"><div class="h-full rounded-sm bg-blue-500 dark:bg-blue-400" style="width:8%"></div></div><span class="w-8 text-right">8%</span></div></div><div><div class="text-white dark:text-gray-100 mb-1">Top Threads</div><div class="grid grid-cols-12 text-xs mb-1 border-b border-gray-700 dark:border-gray-600"><div class="col-span-1">PID</div><div class="col-span-3">USER</div><div class="col-span-1">PR</div><div class="col-span-1">NI</div><div class="col-span-2">CPU%</div><div class="col-span-2">MEM%</div><div class="col-span-2">CMD</div></div><div class="grid grid-cols-12 text-xs mb-1"><div class="col-span-1">1000</div><div class="col-span-3">server</div><div class="col-span-1">20</div><div class="col-span-1">0</div><div class="col-span-2">11.0</div><div class="col-span-2">0.4</div><div class="col-span-2">http-conn</div></div><div class="grid grid-cols-12 text-xs mb-1"><div class="col-span-1">1001</div><div class="col-span-3">server</div><div class="col-span-1">20</div><div class="col-span-1">0</div><div class="col-span-2">8.0</div><div class="col-span-2">0.3</div><div class="col-span-2">http-conn</div></div><div class="grid grid-cols-12 text-xs mb-1"><div class="col-span-1">1002</div><div class="col-span-3">server</div><div class="col-span-1">20</div><div class="col-span-1">0</div><div class="col-span-2">18.0</div><div class="col-span-2">0.3</div><div class="col-span-2">http-conn</div></div><div class="grid grid-cols-12 text-xs mb-1"><div class="col-span-1">1003</div><div class="col-span-3">server</div><div class="col-span-1">20</div><div class="col-span-1">0</div><div class="col-span-2">13.0</div><div class="col-span-2">0.4</div><div class="col-span-2">http-conn</div></div><div class="grid grid-cols-12 text-xs mb-1"><div class="col-span-1">1004</div><div class="col-span-3">server</div><div class="col-span-1">20</div><div class="col-span-1">0</div><div class="col-span-2">18.0</div><div class="col-span-2">0.5</div><div class="col-span-2">http-conn</div></div><div class="grid grid-cols-12 text-xs mb-1"><div class="col-span-1">1005</div><div class="col-span-3">server</div><div class="col-span-1">20</div><div class="col-span-1">0</div><div class="col-span-2">11.0</div><div class="col-span-2">0.5</div><div class="col-span-2">http-conn</div></div><div class="grid grid-cols-12 text-xs mb-1"><div class="col-span-1">1006</div><div class="col-span-3">server</div><div class="col-span-1">20</div><div class="col-span-1">0</div><div class="col-span-2">7.0</div><div class="col-span-2">0.4</div><div class="col-span-2">http-conn</div></div><div class="grid grid-cols-12 text-xs mb-1"><div class="col-span-1">1007</div><div class="col-span-3">server</div><div class="col-span-1">20</div><div class="col-span-1">0</div><div class="col-span-2">20.0</div><div class="col-span-2">0.5</div><div class="col-span-2">http-conn</div></div><div class="grid grid-cols-12 text-xs mb-1"><div class="col-span-1">1008</div><div class="col-span-3">server</div><div class="col-span-1">20</div><div class="col-span-1">0</div><div class="col-span-2">15.0</div><div class="col-span-2">0.4</div><div class="col-span-2">http-conn</div></div><div class="grid grid-cols-12 text-xs mb-1"><div class="col-span-1">1009</div><div class="col-span-3">server</div><div class="col-span-1">20</div><div class="col-span-1">0</div><div class="col-span-2">12.0</div><div class="col-span-2">0.4</div><div class="col-span-2">http-conn</div></div><div class="text-gray-500 dark:text-gray-400 text-xs mt-1">... and <!-- -->2<!-- --> more threads</div></div></div><div class="flex justify-between items-center"><h3 class="text-lg font-bold dark:text-gray-100">Thread-Per-Connection Resource Monitor</h3><div class="flex gap-4"><button class="px-6 py-3 rounded-lg font-medium text-white shadow-lg transform transition-all duration-200 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 active:scale-95 active:shadow-md border border-white/10 hover:shadow-xl hover:border-white/20 dark:border-white/20"><span class="flex items-center gap-2"><svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>Start Simulation</span></button><button class="px-6 py-3 rounded-lg font-medium bg-gradient-to-r from-gray-600 to-gray-700 text-white shadow-lg transform transition-all duration-200 hover:from-gray-700 hover:to-gray-800 hover:scale-105 hover:-translate-y-0.5 hover:shadow-xl active:scale-95 active:shadow-md border border-white/10 hover:border-white/20 dark:border-white/20"><span class="flex items-center gap-2"><svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path></svg>Reset</span></button></div></div><div class="bg-white dark:bg-gray-800 p-4 rounded shadow space-y-6"><div><label class="block text-sm font-medium text-gray-700 dark:text-gray-200 mb-2">Simulate Connection Load</label><div class="flex gap-4 items-center"><input type="range" min="1" max="500" class="w-full" value="10"><span class="text-sm font-mono bg-gray-100 dark:bg-gray-900 dark:text-gray-100 p-1 rounded">10</span></div></div><div><label class="block text-sm font-medium text-gray-700 dark:text-gray-200 mb-2">Simulation Speed</label><div class="flex gap-4 items-center"><span class="text-xs">Slow</span><input type="range" min="0.5" max="5" step="0.5" class="w-full" value="1"><span class="text-xs">Fast</span><span class="text-sm font-mono bg-gray-100 dark:bg-gray-900 dark:text-gray-100 p-1 rounded">1<!-- -->x</span></div></div><div><h4 class="text-sm font-medium text-gray-700 dark:text-gray-200 mb-2">Performance Impact</h4><div class="relative h-64 border border-gray-300 dark:border-gray-600 rounded p-2"><div class="absolute bottom-0 left-0 right-0 border-t border-gray-300 dark:border-gray-600 flex justify-between px-2 text-xs text-gray-500 dark:text-gray-400"><div>0</div><div>100</div><div>200</div><div>300</div><div>400</div><div>500</div></div><div class="absolute left-0 top-0 bottom-10 flex items-center"><div class="transform -rotate-90 text-xs text-gray-500 dark:text-gray-400 whitespace-nowrap">Resource Utilization (%)</div></div><div class="absolute bottom-0 w-0.5 bg-red-500 h-full opacity-50" style="left:2%;height:calc(100% - 15px)"></div><div class="w-full h-full"></div><div class="absolute top-2 right-2 bg-white/80 dark:bg-gray-900/80 p-2 rounded text-xs space-y-1"><div class="flex items-center"><div class="w-3 h-3 bg-green-500 dark:bg-green-400 mr-2"></div><div>CPU Usage</div></div><div class="flex items-center"><div class="w-3 h-3 bg-blue-500 dark:bg-blue-400 mr-2"></div><div>Memory Usage</div></div><div class="flex items-center"><div class="w-3 h-3 bg-gray-500 dark:bg-gray-400 mr-2"></div><div>Thread Count</div></div><div class="flex items-center"><div class="w-3 h-3 bg-red-500 dark:bg-red-400 mr-2"></div><div>Throughput</div></div><div class="flex items-center"><div class="w-3 h-3 bg-purple-500 dark:bg-purple-400 mr-2"></div><div>Request Queue</div></div></div></div></div><div class="p-3 rounded border-2 bg-green-100 dark:bg-green-900 border-green-300 dark:border-green-700"><h4 class="font-medium mb-1 dark:text-gray-100">System Status:</h4><p class="text-sm dark:text-gray-200">System is handling connections efficiently. Resources are well-utilized with minimal overhead.</p></div></div><div class="text-center text-sm text-gray-600 dark:text-gray-300"><strong>Figure 1:</strong> Interactive visualization of thread-per-connection scaling issues. As connection count increases, resources are consumed by thread overhead, while throughput plateaus and then declines due to context switching costs.</div></div>
<div class="bg-orange-100 dark:bg-orange-900 p-6 rounded-xl mt-8 mb-4 border-l-4 border-orange-400 dark:border-orange-500 shadow-sm"><span class="block font-bold text-lg text-orange-900 dark:text-orange-200 mb-2">Insight</span><span class="text-base text-gray-900 dark:text-gray-100"><p>We need a way to handle multiple waiting tasks concurrently without needing a dedicated OS thread for each one <em>while it's waiting</em>. This leads to asynchronous programming.</p></span></div>]]></content:encoded>
            <category>Rust</category>
            <category>Tokio</category>
            <category>Async</category>
            <category>Event Loop</category>
        </item>
        <item>
            <title><![CDATA[Connection Pooling - in Depth]]></title>
            <link>https://twistingtwists.github.io/byte_vault/connection-pooling-in-depth</link>
            <guid>https://twistingtwists.github.io/byte_vault/connection-pooling-in-depth</guid>
            <pubDate>Thu, 13 Mar 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Here’s a Markdown table that maps real-life reverse proxy scenarios to recommended TCP tuning parameters for optimal performance and security:]]></description>
            <content:encoded><![CDATA[<p>Here’s a <strong>Markdown table</strong> that maps <strong>real-life reverse proxy scenarios</strong> to recommended <strong>TCP tuning parameters</strong> for optimal performance and security:</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-legend-quick-reference">✅ <strong>Legend (Quick Reference)</strong><a href="https://twistingtwists.github.io/byte_vault/connection-pooling-in-depth#-legend-quick-reference" class="hash-link" aria-label="Direct link to -legend-quick-reference" title="Direct link to -legend-quick-reference">​</a></h3>
<table><thead><tr><th><strong>Parameter</strong></th><th><strong>Purpose</strong></th></tr></thead><tbody><tr><td><code>tcp_fin_timeout</code></td><td>How long to keep closing connection in FIN state.</td></tr><tr><td><code>tcp_keepalive_time</code></td><td>Idle time before sending first keep-alive probe.</td></tr><tr><td><code>tcp_keepalive_intvl</code></td><td>Interval between successive keep-alive probes.</td></tr><tr><td><code>tcp_keepalive_probes</code></td><td>Number of probes before dropping connection.</td></tr><tr><td><code>tcp_retries2</code></td><td>Max TCP retransmissions before giving up.</td></tr></tbody></table>
<!-- -->
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-tcp-tuning-recommendations-for-reverse-proxy---real-life-scenarios">✅ <strong>TCP Tuning Recommendations for Reverse Proxy - Real Life Scenarios</strong><a href="https://twistingtwists.github.io/byte_vault/connection-pooling-in-depth#-tcp-tuning-recommendations-for-reverse-proxy---real-life-scenarios" class="hash-link" aria-label="Direct link to -tcp-tuning-recommendations-for-reverse-proxy---real-life-scenarios" title="Direct link to -tcp-tuning-recommendations-for-reverse-proxy---real-life-scenarios">​</a></h3>
<table><thead><tr><th><strong>Scenario</strong></th><th><strong>tcp_fin_timeout</strong></th><th><strong>tcp_keepalive_time</strong></th><th><strong>tcp_keepalive_intvl</strong></th><th><strong>tcp_keepalive_probes</strong></th><th><strong>tcp_retries2</strong></th><th><strong>Reasoning &amp; Trade-offs</strong></th></tr></thead><tbody><tr><td><strong>Public API Gateway (high concurrent clients)</strong></td><td><code>15</code></td><td><code>30</code></td><td><code>10</code></td><td><code>3</code></td><td><code>5</code></td><td>Quick cleanup of dead/idle connections to save resources, while allowing short keep-alives for API clients.</td></tr><tr><td><strong>Internal microservices (low latency, stable network)</strong></td><td><code>10</code></td><td><code>60</code></td><td><code>20</code></td><td><code>3</code></td><td><code>3</code></td><td>Fast connection recycling, rare need for keep-alives due to low latency, prioritizing efficiency.</td></tr><tr><td><strong>Mobile-heavy client traffic (prone to network drops)</strong></td><td><code>30</code></td><td><code>120</code></td><td><code>20</code></td><td><code>5</code></td><td><code>7</code></td><td>More lenient timeouts to account for intermittent mobile network instability; avoid prematurely dropping clients.</td></tr><tr><td><strong>WebSocket / long-lived connections (chat apps, gaming)</strong></td><td><code>60</code></td><td><code>300</code></td><td><code>60</code></td><td><code>5</code></td><td><code>8</code></td><td>Allow long idle connections; keep-alives to detect dead connections without cutting active clients abruptly.</td></tr><tr><td><strong>DDoS-prone public proxy (security-focused)</strong></td><td><code>5</code></td><td><code>30</code></td><td><code>5</code></td><td><code>2</code></td><td><code>3</code></td><td>Aggressive timeouts to prevent resource exhaustion; fast cleanup of potentially malicious connections.</td></tr><tr><td><strong>IoT Device Communication (sporadic, unstable)</strong></td><td><code>30</code></td><td><code>180</code></td><td><code>30</code></td><td><code>4</code></td><td><code>6</code></td><td>Longer keep-alives to maintain connection with low-power devices, balanced with cleanup to avoid idle hangs.</td></tr><tr><td><strong>Slow clients behind proxies (corporate clients, satellite)</strong></td><td><code>20</code></td><td><code>150</code></td><td><code>30</code></td><td><code>4</code></td><td><code>6</code></td><td>Moderate timeouts to handle slow networks without dropping legitimate users.</td></tr></tbody></table>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-notes">⚙️ <strong>Notes:</strong><a href="https://twistingtwists.github.io/byte_vault/connection-pooling-in-depth#%EF%B8%8F-notes" class="hash-link" aria-label="Direct link to ️-notes" title="Direct link to ️-notes">​</a></h3>
<ul>
<li><strong>Lower timeouts</strong>: Free up resources quickly, but risk dropping slow/legit connections.</li>
<li><strong>Higher timeouts</strong>: Improve user experience over slow networks but consume more resources.</li>
<li><strong>Keep-alive settings</strong>: Essential for long-lived or idle connections to detect dead peers.</li>
<li><strong>Retries</strong>: Trade-off between network resilience and resource use.</li>
</ul>
<hr>
<p>If you want, I can prepare a <strong><code>sysctl.conf</code> file snippet</strong> based on any of these scenarios for direct use. Let me know! 🚀</p>
<hr>
<p>source: <a href="https://github.com/brettwooldridge/HikariCP/wiki/Down-the-Rabbit-Hole" target="_blank" rel="noopener noreferrer">https://github.com/brettwooldridge/HikariCP/wiki/Down-the-Rabbit-Hole</a></p>
<hr>]]></content:encoded>
            <category>Connection</category>
            <category>Database</category>
            <category>Network</category>
        </item>
        <item>
            <title><![CDATA[Reliable Structured Outputs with LLMs]]></title>
            <link>https://twistingtwists.github.io/byte_vault/reliable-structured-outputs-with-llms</link>
            <guid>https://twistingtwists.github.io/byte_vault/reliable-structured-outputs-with-llms</guid>
            <pubDate>Sat, 01 Mar 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Ensuring Deterministic Outputs from LLMs]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="ensuring-deterministic-outputs-from-llms">Ensuring Deterministic Outputs from LLMs<a href="https://twistingtwists.github.io/byte_vault/reliable-structured-outputs-with-llms#ensuring-deterministic-outputs-from-llms" class="hash-link" aria-label="Direct link to Ensuring Deterministic Outputs from LLMs" title="Direct link to Ensuring Deterministic Outputs from LLMs">​</a></h3>
<p>There are several strategies to obtain structured outputs from LLMs.</p>
<p>In Python, libraries such as Pydantic and Instructor facilitate structured output via JSON schema-based tool invocation. If you have the capability to host your own model, sglang is a viable option.</p>
<p>Pydantic validators are highly effective, provided that the input is in the form of a valid JSON string.</p>
<p>Let's see by example. For starters, here is the schema we want to parse.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> pydantic </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> BaseModel</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ValidationError</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">BaseModel</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin">id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    email</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    active</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">bool</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">True</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># default value</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># JSON representation of the data</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">json_data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token triple-quoted-string string" style="color:#e3116c">'''</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">    "id": 123,</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">    "name": "Alice",</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">    "email": "alice@example.com"</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">'''</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">try</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic"># Directly validate and parse the JSON string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    user </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> User</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">model_validate_json</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">json_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Validated Data:"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> user</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">except</span><span class="token plain"> ValidationError </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Validation Error:"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">json</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This works. Pydantic has a pretty solid <em>json</em> to data model convertor. But it has to be a valid json string. Let's explore further.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># JSON representation of the data</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># typical replies of a small LLM which does not adhere well to 'output_json' command</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">json_data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token triple-quoted-string string" style="color:#e3116c">'''</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">Here is your json</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">    "id": 123,</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">    "name": "Alice",</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">    "email": "alice@example.com"</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">'''</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">try</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic"># Directly validate and parse the JSON string using the new method</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    user </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> User</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">model_validate_json</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">json_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Validated Data:"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> user</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">except</span><span class="token plain"> ValidationError </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Validation Error:"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">json</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Error is:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Validation Error</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">{</span><span class="token string" style="color:#e3116c">"type"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token string" style="color:#e3116c">"json_invalid"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token string" style="color:#e3116c">"loc"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token string" style="color:#e3116c">"msg"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token string" style="color:#e3116c">"Invalid JSON: expected value at line 2 column 1"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token string" style="color:#e3116c">"input"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token string" style="color:#e3116c">"\nHere is your json\n{\n    \"id\": 123,\n    \"name\": \"Alice\",\n    \"email\": \"alice@example.com\"\n}\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token string" style="color:#e3116c">"ctx"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token punctuation" style="color:#393A34">{</span><span class="token string" style="color:#e3116c">"error"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token string" style="color:#e3116c">"expected value at line 2 column 1"</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token string" style="color:#e3116c">"url"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token string" style="color:#e3116c">"https://errors.pydantic.dev/2.10/v/json_invalid"</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now, let's add one more step in the mix. Let's use the json_partial_py library to parse the JSON string. and then pass it to pydantic.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> json_partial_py </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> to_json_string </span><span class="token comment" style="color:#999988;font-style:italic"># &lt;---- this is a new import</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># typical replies of a small LLM which does not adhere well to 'output_json' command</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">json_data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token triple-quoted-string string" style="color:#e3116c">'''</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">Here is your json</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">    "id": 123,</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">    "name": "Alice",</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">    "email": "alice@example.com"</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">'''</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">try</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    stringified_json </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> to_json_string</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">json_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic"># Directly validate and parse the JSON string using the new method</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    user </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> User</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">model_validate_json</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">stringified_json</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Validated Data:"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> user</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">except</span><span class="token plain"> ValidationError </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Validation Error:"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">json</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>and voila!! Now you can rest assured that you will get clean json parsed from the LLM output.</p>
<p>P.S. I am author of the <a href="https://pypi.org/project/json_partial_python/" target="_blank" rel="noopener noreferrer"><code>json_partial_py</code> library</a>. It was extracted from <a href="https://github.com/BoundaryML/baml?tab=readme-ov-file" target="_blank" rel="noopener noreferrer">baml project</a>.</p>]]></content:encoded>
            <category>JSON Parser</category>
            <category>LLM</category>
        </item>
        <item>
            <title><![CDATA[String interning in Rust]]></title>
            <link>https://twistingtwists.github.io/byte_vault/string-interning-rust</link>
            <guid>https://twistingtwists.github.io/byte_vault/string-interning-rust</guid>
            <pubDate>Sat, 01 Mar 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[What is String Interning?]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-string-interning">What is String Interning?<a href="https://twistingtwists.github.io/byte_vault/string-interning-rust#what-is-string-interning" class="hash-link" aria-label="Direct link to What is String Interning?" title="Direct link to What is String Interning?">​</a></h3>
<p>String interning is a technique that ensures each unique string is stored only once in memory, reducing redundancy and improving performance.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-string-interning-matters-in-real-world-scenarios"><strong>Why String Interning Matters in Real-World Scenarios</strong><a href="https://twistingtwists.github.io/byte_vault/string-interning-rust#why-string-interning-matters-in-real-world-scenarios" class="hash-link" aria-label="Direct link to why-string-interning-matters-in-real-world-scenarios" title="Direct link to why-string-interning-matters-in-real-world-scenarios">​</a></h3>
<p>String interning is <strong>critical in performance-sensitive applications</strong> where <strong>redundant string storage leads to memory overhead and slower lookups</strong>. Here’s why it matters in real-world scenarios:</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="real-world-use-cases"><strong>Real-World Use Cases</strong><a href="https://twistingtwists.github.io/byte_vault/string-interning-rust#real-world-use-cases" class="hash-link" aria-label="Direct link to real-world-use-cases" title="Direct link to real-world-use-cases">​</a></h3>
<p>String interning reduces memory usage and improves performance by storing each unique string only once.</p>
<p>The following table highlights some real-world use cases where string interning is beneficial:</p>
<table><thead><tr><th>Use Case</th><th>Example</th></tr></thead><tbody><tr><td>Compiler and Interpreter Optimization</td><td>Rust’s compiler, Python’s CPython, and Java’s JVM use string interning to optimize symbol tables.</td></tr><tr><td>Embedded Systems &amp; IoT</td><td>Logging frameworks like <code>defmt</code> use interning to minimize <strong>flash storage usage</strong> on microcontrollers.</td></tr><tr><td>Web Servers &amp; API Performance</td><td>High-traffic APIs handling millions of requests often receive the same strings (e.g., headers, JSON keys).</td></tr><tr><td>Databases &amp; Search Engines</td><td>Search engines like Elasticsearch and databases like PostgreSQL intern frequently queried strings.</td></tr></tbody></table>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-it-works"><strong>How It Works</strong><a href="https://twistingtwists.github.io/byte_vault/string-interning-rust#how-it-works" class="hash-link" aria-label="Direct link to how-it-works" title="Direct link to how-it-works">​</a></h3>
<ul>
<li><code>InternedString::new()</code> returns an <strong>empty interned string</strong>.</li>
<li><code>InternedString::from(s)</code> interns a string, ensuring uniqueness.</li>
<li><code>as_str()</code>, <code>len()</code>, and <code>is_empty()</code> mimic <code>String</code> methods.</li>
<li>A <strong>global HashMap</strong> stores interned strings, avoiding duplicates.</li>
<li><strong>Thread safety</strong> is ensured using <code>Lazy&lt;Mutex&lt;HashMap&gt;&gt;</code>.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="implementation-of-string-interning-in-rust">Implementation of String Interning in Rust<a href="https://twistingtwists.github.io/byte_vault/string-interning-rust#implementation-of-string-interning-in-rust" class="hash-link" aria-label="Direct link to Implementation of String Interning in Rust" title="Direct link to Implementation of String Interning in Rust">​</a></h3>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">std</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">collections</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">HashMap</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">std</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">sync</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token punctuation" style="color:#393A34">{</span><span class="token class-name">Arc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Mutex</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">once_cell</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">sync</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Lazy</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// Ensures thread-safe global interner</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[derive(Debug, Clone, PartialEq, Eq, Hash)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token type-definition class-name">InternedString</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    inner</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Arc</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">str</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Global interner (singleton)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">INTERNER</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Lazy</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">Mutex</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">HashMap</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">Arc</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">str</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Lazy</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token plain"> </span><span class="token class-name">Mutex</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">HashMap</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">impl</span><span class="token plain"> </span><span class="token class-name">InternedString</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/// Creates an empty interned string (similar to `String::new()`)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">Self</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">Self</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">intern</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/// Interns a given string and returns an InternedString</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">from</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">S</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">AsRef</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">str</span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">S</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">Self</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">Self</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">intern</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">as_ref</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/// Returns a reference to the interned string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">as_str</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">str</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">inner</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/// Returns the length of the interned string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">usize</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">inner</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/// Checks if the interned string is empty</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">is_empty</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">bool</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">inner</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">is_empty</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/// Interns a string, ensuring no duplicates exist</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">intern</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">str</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">Self</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> interner </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">INTERNER</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">lock</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// If the string is already interned, return the existing reference</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token class-name">Some</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">existing</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> interner</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">keys</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">find</span><span class="token punctuation" style="color:#393A34">(</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token closure-params">k</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token plain"> k</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">as_ref</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token class-name">InternedString</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                inner</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Arc</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">clone</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">existing</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Otherwise, intern the new string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> arc_str </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Arc</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">from</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        interner</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">insert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Arc</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">clone</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">arc_str</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">InternedString</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> inner</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> arc_str </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[cfg(test)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">mod</span><span class="token plain"> </span><span class="token module-declaration namespace" style="opacity:0.7">tests</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">super</span><span class="token punctuation" style="color:#393A34">::</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[test]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">test_empty_string</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> empty1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">InternedString</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> empty2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">InternedString</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token macro property" style="color:#36acaa">assert_eq!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">empty1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> empty2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token macro property" style="color:#36acaa">assert!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">empty1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">is_empty</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[test]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">test_interning</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> s1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">InternedString</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">from</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"hello"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> s2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">InternedString</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">from</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"hello"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> s3 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">InternedString</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">from</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"world"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token macro property" style="color:#36acaa">assert_eq!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> s2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token macro property" style="color:#36acaa">assert_ne!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> s3</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[test]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">test_string_length</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> s </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">InternedString</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">from</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"test"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token macro property" style="color:#36acaa">assert_eq!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[test]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">test_string_content</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> s </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">InternedString</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">from</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"RustLang"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token macro property" style="color:#36acaa">assert_eq!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">as_str</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"RustLang"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
            <category>Rust</category>
        </item>
        <item>
            <title><![CDATA[Rust tricks for the average developer (me)]]></title>
            <link>https://twistingtwists.github.io/byte_vault/rust-tips-tricks</link>
            <guid>https://twistingtwists.github.io/byte_vault/rust-tips-tricks</guid>
            <pubDate>Sat, 18 Jan 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[001 : &str and AsRef]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="001--str-and-asrefosstr">001 : <code>&amp;str</code> and <code>AsRef&lt;OsStr&gt;</code><a href="https://twistingtwists.github.io/byte_vault/rust-tips-tricks#001--str-and-asrefosstr" class="hash-link" aria-label="Direct link to 001--str-and-asrefosstr" title="Direct link to 001--str-and-asrefosstr">​</a></h3>
<p>The change from:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">load_extension</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> path</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">str</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>to:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">load_extension</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">P</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">AsRef</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token namespace" style="opacity:0.7">std</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">ffi</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">OsStr</span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> path</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">P</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>improves flexibility and usability. The original function only accepted <code>&amp;str</code>, requiring explicit conversion for types like <code>String</code>, <code>PathBuf</code>, or <code>Path</code>. The updated version uses a generic parameter <code>P</code> with the <code>AsRef&lt;std::ffi::OsStr&gt;</code> trait, allowing it to accept any type that can be referenced as an <code>OsStr</code>, such as <code>&amp;str</code>, <code>String</code>, <code>Path</code>, or <code>PathBuf</code>.</p>
<p><strong>Original Implementation:</strong></p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">std</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">path</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Path</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> path_str </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">from</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"/some/path"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> path_ref </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Path</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"/another/path"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Example 1: Using String</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">instance</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">load_extension</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">path_str</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Example 2: Using &amp;Path</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">instance</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">load_extension</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">path_ref</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Example 3: Using Path directly</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">instance</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">load_extension</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Path</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"/yet/another/path"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This reduces boilerplate and improves compatibility with different path types.</p>]]></content:encoded>
            <category>Rust</category>
        </item>
        <item>
            <title><![CDATA[Streaming HTTP to Disk]]></title>
            <link>https://twistingtwists.github.io/byte_vault/streaming-http-to-disk</link>
            <guid>https://twistingtwists.github.io/byte_vault/streaming-http-to-disk</guid>
            <pubDate>Fri, 10 Jan 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[HTTP responses can be quite large and memory consumption can be a concern. In]]></description>
            <content:encoded><![CDATA[<p>HTTP responses can be quite large and memory consumption can be a concern. In
some cases, it is important to be able to handle large responses without
loading the entire response into memory.</p>
<p>One such scenario is when you want to download a large file from a server. If
you were to load the entire file into memory, it would require a large amount
of memory and would be inefficient. Instead, you can use a streaming approach
to download the file directly to disk.</p>
<p>This example will show you how to do just that using the <code>reqwest</code> and <code>tokio</code>
crates (Rust). Here is the rough flow.</p>
<!-- -->
<!-- -->
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="understanding-the-streaming-process">Understanding the Streaming Process<a href="https://twistingtwists.github.io/byte_vault/streaming-http-to-disk#understanding-the-streaming-process" class="hash-link" aria-label="Direct link to Understanding the Streaming Process" title="Direct link to Understanding the Streaming Process">​</a></h2>
<p>In the provided streaming implementation, the key to avoiding loading the entire response into memory lies in <strong>how the response body is processed</strong>. Let's break down the relevant parts of the code:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// Send the GET request and get the response</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> resp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> client</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">url</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">header</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"User-Agent"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"rust-zip-extractor"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">send</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token operator" style="color:#393A34">?</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">error_for_status</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// Ensure the request was successful</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Convert the response body into a stream of bytes</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> stream </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> resp</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">bytes_stream</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Iterate over the stream and write each chunk to the file</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token class-name">Some</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">chunk</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> stream</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> chunk</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// Handle potential stream errors</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    file</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">write_all</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="key-points">Key Points:<a href="https://twistingtwists.github.io/byte_vault/streaming-http-to-disk#key-points" class="hash-link" aria-label="Direct link to Key Points:" title="Direct link to Key Points:">​</a></h3>
<ol>
<li>
<p><strong><code>send().await?</code> Does Not Buffer the Entire Response:</strong></p>
<ul>
<li>The <code>.send().await?</code> method initiates the HTTP request and returns a <code>Response</code> object <strong>without</strong> reading the entire response body into memory.</li>
<li>The response body is <strong>lazy-loaded</strong>, meaning it fetches data incrementally as you process the stream.</li>
</ul>
</li>
<li>
<p><strong>Using <code>bytes_stream()</code> for Streaming:</strong></p>
<ul>
<li>The <code>.bytes_stream()</code> method converts the response body into a <code>Stream</code> of <code>Bytes</code> chunks.</li>
<li><strong>Crucially</strong>, this stream processes the response incrementally, allowing you to handle large files without high memory consumption.</li>
</ul>
</li>
<li>
<p><strong>Writing Chunks Directly to Disk:</strong></p>
<ul>
<li>By iterating over <code>stream.next().await</code>, you handle each chunk as it arrives and immediately write it to the file.</li>
<li><strong><code>send().await?</code></strong>: Initiates the request and prepares to receive the response without buffering the entire body.</li>
<li><strong><code>bytes_stream()</code></strong>: Explicitly creates a stream that processes the response body chunk by chunk, preventing full buffering.</li>
</ul>
</li>
</ol>
<p>Therefore, <strong>the provided code does indeed stream the response directly to disk without loading the entire response into memory</strong>.</p>
<p>Full code:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">reqwest</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Client</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">std</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">path</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">PathBuf</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">tokio</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">fs</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">File</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">tokio</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">io</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">AsyncWriteExt</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">uuid</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Uuid</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">futures</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">StreamExt</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/// Async function to download the repository as a ZIP file by streaming the response to disk.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/// Returns the path to the saved ZIP file.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">///</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/// # Arguments</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">///</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/// * `owner` - The owner of the GitHub repository.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/// * `repo` - The name of the repository.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/// * `reference` - The branch, tag, or commit reference.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">///</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/// # Errors</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">///</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/// Returns an error if the HTTP request fails or if writing to disk fails.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">download_repo_as_zip</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    owner</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">str</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    repo</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">str</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    reference</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">str</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">PathBuf</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Box</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">dyn</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">std</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">error</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Error</span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> url </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token macro property" style="color:#36acaa">format!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string" style="color:#e3116c">"https://api.github.com/repos/{owner}/{repo}/zipball/{reference}"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        owner </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> owner</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        repo </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> repo</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        reference </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> reference</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> client </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Client</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// GitHub requires a User-Agent header</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> resp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> client</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">url</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">header</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"User-Agent"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"rust-zip-extractor"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">send</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token operator" style="color:#393A34">?</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">error_for_status</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// Ensure the request was successful</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Generate a unique filename using UUID</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> filename </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token macro property" style="color:#36acaa">format!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"{}_{}_{}.zip"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> owner</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> repo</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Uuid</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new_v4</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> filepath </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">PathBuf</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">from</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">filename</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Create the file asynchronously</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> file </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">File</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">create</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">filepath</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Convert the response body into a stream of bytes</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> stream </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> resp</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">bytes_stream</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Iterate over the stream and write each chunk to the file</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token class-name">Some</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">chunk</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> stream</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> chunk</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// Handle potential stream errors</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        file</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">write_all</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Ensure all data is written to disk</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    file</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">flush</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">Ok</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">filepath</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
            <category>Rust</category>
        </item>
        <item>
            <title><![CDATA[Deep Flattening in Rust - Using Recursive Types ]]></title>
            <link>https://twistingtwists.github.io/byte_vault/deep-flattening-in-rust-using-recursive-types</link>
            <guid>https://twistingtwists.github.io/byte_vault/deep-flattening-in-rust-using-recursive-types</guid>
            <pubDate>Tue, 31 Dec 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Deep Flattening in Rust: A Recursive Adventure]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="deep-flattening-in-rust-a-recursive-adventure">Deep Flattening in Rust: A Recursive Adventure<a href="https://twistingtwists.github.io/byte_vault/deep-flattening-in-rust-using-recursive-types#deep-flattening-in-rust-a-recursive-adventure" class="hash-link" aria-label="Direct link to Deep Flattening in Rust: A Recursive Adventure" title="Direct link to Deep Flattening in Rust: A Recursive Adventure">​</a></h3>
<p>Flattening nested data structures is a common problem in programming. However, flattening structures with an arbitrary depth—like nested <code>Vec</code>s within <code>Vec</code>s—can be tricky. Rust, with its strong type system and trait-based polymorphism, allows us to implement elegant solutions to such problems. In this post, we'll explore a recursive approach to deep flattening in Rust using traits, type inference, and iterators.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="the-goal">The Goal<a href="https://twistingtwists.github.io/byte_vault/deep-flattening-in-rust-using-recursive-types#the-goal" class="hash-link" aria-label="Direct link to The Goal" title="Direct link to The Goal">​</a></h4>
<p>Given a deeply nested structure, such as:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> nested_vec </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token macro property" style="color:#36acaa">vec!</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property" style="color:#36acaa">vec!</span><span class="token punctuation" style="color:#393A34">[</span><span class="token macro property" style="color:#36acaa">vec!</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token macro property" style="color:#36acaa">vec!</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property" style="color:#36acaa">vec!</span><span class="token punctuation" style="color:#393A34">[</span><span class="token macro property" style="color:#36acaa">vec!</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">6</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token macro property" style="color:#36acaa">vec!</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">7</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">8</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">9</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Our goal is to flatten it into:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> flattened </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token macro property" style="color:#36acaa">vec!</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">6</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">7</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">8</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">9</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<!-- -->
<p>The depth of nesting is not fixed—it could be <code>Vec&lt;Vec&lt;Vec&lt;T&gt;&gt;&gt;</code>, <code>Vec&lt;Vec&lt;Vec&lt;Vec&lt;T&gt;&gt;&gt;&gt;</code>, or deeper.</p>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="tldr-high-level-idea">TL;DR: high level idea<a href="https://twistingtwists.github.io/byte_vault/deep-flattening-in-rust-using-recursive-types#tldr-high-level-idea" class="hash-link" aria-label="Direct link to TL;DR: high level idea" title="Direct link to TL;DR: high level idea">​</a></h3>
<p>Rust’s iterators and traits allow us to create a type-safe, recursive implementation to handle deep flattening. The solution uses three key components:</p>
<ol>
<li>**The <strong>Trait</strong>: A recursive trait defining how to flatten iterators.</li>
<li><strong>Base and Recursive Implementations</strong>: Separate implementations for handling the base case (non-nested items) and recursive case (nested items).</li>
<li><strong>A Wrapper Struct</strong>: A helper type to simplify type inference.</li>
</ol>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="implementation">Implementation<a href="https://twistingtwists.github.io/byte_vault/deep-flattening-in-rust-using-recursive-types#implementation" class="hash-link" aria-label="Direct link to Implementation" title="Direct link to Implementation">​</a></h3>
<p>The fun part lies in using Rust's types as in recursive way.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="the-deepflatteniteratorof-trait">The <code>DeepFlattenIteratorOf</code> Trait<a href="https://twistingtwists.github.io/byte_vault/deep-flattening-in-rust-using-recursive-types#the-deepflatteniteratorof-trait" class="hash-link" aria-label="Direct link to the-deepflatteniteratorof-trait" title="Direct link to the-deepflatteniteratorof-trait">​</a></h4>
<p>This trait defines the recursive structure of our flattening logic:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">trait</span><span class="token plain"> </span><span class="token type-definition class-name">DeepFlattenIteratorOf</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">Depth</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token type-definition class-name">DeepFlatten</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Iterator</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">Item</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">deep_flatten</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">this</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">Self</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">Self</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">DeepFlatten</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li><code>Depth</code> tracks the nesting level.</li>
<li><code>T</code> is the type of the innermost element.</li>
<li><code>DeepFlatten</code> is the resulting iterator after flattening.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="base-case-no-nesting">Base Case: No Nesting<a href="https://twistingtwists.github.io/byte_vault/deep-flattening-in-rust-using-recursive-types#base-case-no-nesting" class="hash-link" aria-label="Direct link to Base Case: No Nesting" title="Direct link to Base Case: No Nesting">​</a></h4>
<p>The base condition stops recursion when the structure is already flat:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">impl</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">I</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Iterator</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token class-name">DeepFlattenIteratorOf</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">I</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Item</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token class-name">I</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token type-definition class-name">DeepFlatten</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">Self</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">deep_flatten</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">this</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">Self</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">Self</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">DeepFlatten</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Here, when <code>Depth</code> is <code>()</code>, no further flattening is needed, and the iterator is returned as-is.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="recursive-case-flatten-nested-items">Recursive Case: Flatten Nested Items<a href="https://twistingtwists.github.io/byte_vault/deep-flattening-in-rust-using-recursive-types#recursive-case-flatten-nested-items" class="hash-link" aria-label="Direct link to Recursive Case: Flatten Nested Items" title="Direct link to Recursive Case: Flatten Nested Items">​</a></h4>
<p>For nested structures, the recursion continues until reaching the base case:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">impl</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">Depth</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">I</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token class-name">DeepFlattenIteratorOf</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Depth</span><span class="token punctuation" style="color:#393A34">,</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token class-name">I</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">Flatten</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">I</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">DeepFlattenIteratorOf</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">Depth</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">I</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Iterator</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">I</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Item</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">IntoIterator</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token type-definition class-name">DeepFlatten</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">Flatten</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">I</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token class-name">DeepFlattenIteratorOf</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">Depth</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">DeepFlatten</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">deep_flatten</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">this</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">Self</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">Self</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">DeepFlatten</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">DeepFlattenIteratorOf</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">deep_flatten</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">flatten</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li><code>Flatten&lt;I&gt;</code> handles one level of flattening.</li>
<li>The recursion continues until it reaches the base case.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="wrapper-struct-for-type-inference">Wrapper Struct for Type Inference<a href="https://twistingtwists.github.io/byte_vault/deep-flattening-in-rust-using-recursive-types#wrapper-struct-for-type-inference" class="hash-link" aria-label="Direct link to Wrapper Struct for Type Inference" title="Direct link to Wrapper Struct for Type Inference">​</a></h4>
<p>The <code>DeepFlatten</code> struct simplifies type inference by wrapping the recursive logic:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token type-definition class-name">DeepFlatten</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">Depth</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">I</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">I</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">DeepFlattenIteratorOf</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">Depth</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    inner</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">I</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">DeepFlatten</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">impl</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">I</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Iterator</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token class-name">DeepFlattenExt</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token class-name">I</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This allows users to call the <code>.deep_flatten()</code> method directly:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">trait</span><span class="token plain"> </span><span class="token type-definition class-name">DeepFlattenExt</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Iterator</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token class-name">Sized</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">deep_flatten</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">Depth</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">DeepFlatten</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">Depth</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">Self</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">Self</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">DeepFlattenIteratorOf</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">Depth</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">DeepFlatten</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            inner</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">DeepFlattenIteratorOf</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">deep_flatten</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="iterator-implementation-for-deepflatten">Iterator Implementation for <code>DeepFlatten</code><a href="https://twistingtwists.github.io/byte_vault/deep-flattening-in-rust-using-recursive-types#iterator-implementation-for-deepflatten" class="hash-link" aria-label="Direct link to iterator-implementation-for-deepflatten" title="Direct link to iterator-implementation-for-deepflatten">​</a></h4>
<p>Finally, the iterator implementation allows seamless iteration over flattened items:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">impl</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">Depth</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">I</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token class-name">Iterator</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token class-name">DeepFlatten</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">Depth</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">I</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">I</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">DeepFlattenIteratorOf</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">Depth</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token type-definition class-name">Item</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Option</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">Self</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Item</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">inner</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="example-usage">Example Usage<a href="https://twistingtwists.github.io/byte_vault/deep-flattening-in-rust-using-recursive-types#example-usage" class="hash-link" aria-label="Direct link to Example Usage" title="Direct link to Example Usage">​</a></h3>
<p>Here’s how you can use the <code>deep_flatten</code> method to flatten nested structures:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> nested_vec </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token macro property" style="color:#36acaa">vec!</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token macro property" style="color:#36acaa">vec!</span><span class="token punctuation" style="color:#393A34">[</span><span class="token macro property" style="color:#36acaa">vec!</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token macro property" style="color:#36acaa">vec!</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token macro property" style="color:#36acaa">vec!</span><span class="token punctuation" style="color:#393A34">[</span><span class="token macro property" style="color:#36acaa">vec!</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">6</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token macro property" style="color:#36acaa">vec!</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">7</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">8</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">9</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> flattened</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Vec</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">i32</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nested_vec</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">into_iter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">deep_flatten</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">collect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property" style="color:#36acaa">assert_eq!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">flattened</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token macro property" style="color:#36acaa">vec!</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">6</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">7</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">8</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">9</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property" style="color:#36acaa">println!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Flattened result: {:?}"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> flattened</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<p>This code gist was prepared by Joel is <a href="https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=dbd26d3c4e89abbf50cde86dec296cd7" target="_blank" rel="noopener noreferrer">available on rust playground</a>!</p>
<p>Thanks Joel once again for bringing light to this pattern!
That's a wrap for this year!</p>
<p>See you in next year!</p>]]></content:encoded>
            <category>Rust</category>
        </item>
        <item>
            <title><![CDATA[Caddy Reverse Proxy Performance: 300% Boost with Unix Sockets]]></title>
            <link>https://twistingtwists.github.io/byte_vault/how-to-solve-reverse-proxy-performance-issues-in-caddy-server-a-300-performance-boost-using-unix-sockets</link>
            <guid>https://twistingtwists.github.io/byte_vault/how-to-solve-reverse-proxy-performance-issues-in-caddy-server-a-300-performance-boost-using-unix-sockets</guid>
            <pubDate>Mon, 23 Dec 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[A recent GitHub issue  #6751  in the Caddy server repository revealed an interesting performance bottleneck when using multiple layers of reverse proxying. Here's what was discovered and how it was resolved.]]></description>
            <content:encoded><![CDATA[<p>A recent GitHub issue  <a href="https://github.com/caddyserver/caddy/issues/6751" target="_blank" rel="noopener noreferrer">#6751</a>  in the Caddy server repository revealed an interesting performance bottleneck when using multiple layers of reverse proxying. Here's what was discovered and how it was resolved.</p>
<!-- -->
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-problem">The Problem<a href="https://twistingtwists.github.io/byte_vault/how-to-solve-reverse-proxy-performance-issues-in-caddy-server-a-300-performance-boost-using-unix-sockets#the-problem" class="hash-link" aria-label="Direct link to The Problem" title="Direct link to The Problem">​</a></h2>
<p>A user reported significant performance degradation when implementing multiple layers of reverse proxies in Caddy v2.8.4. The setup consisted of a chain of reverse proxies:</p>
<ul>
<li>Port 8081: Serving static files</li>
<li>Port 8082: Proxying to 8081</li>
<li>Port 8083: Proxying to 8082</li>
<li>Port 8084: Proxying to 8083</li>
</ul>
<p>When testing with a 1000MB file download, the performance metrics showed a clear pattern of degradation:</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="multi-threading-performance-impact">Multi-Threading Performance Impact<a href="https://twistingtwists.github.io/byte_vault/how-to-solve-reverse-proxy-performance-issues-in-caddy-server-a-300-performance-boost-using-unix-sockets#multi-threading-performance-impact" class="hash-link" aria-label="Direct link to Multi-Threading Performance Impact" title="Direct link to Multi-Threading Performance Impact">​</a></h3>
<ul>
<li>Direct file server (8081): ~300 Mbps with 5 threads</li>
<li>First proxy layer (8082): ~60 Mbps with 5 threads</li>
<li>Second proxy layer (8083): ~16 Mbps with 5 threads</li>
<li>Third proxy layer (8084): ~16 Mbps with 5 threads</li>
</ul>
<p>What made this particularly interesting was that the server's CPU usage remained surprisingly low (1-5%), suggesting that the bottleneck wasn't in processing power.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-investigation">The Investigation<a href="https://twistingtwists.github.io/byte_vault/how-to-solve-reverse-proxy-performance-issues-in-caddy-server-a-300-performance-boost-using-unix-sockets#the-investigation" class="hash-link" aria-label="Direct link to The Investigation" title="Direct link to The Investigation">​</a></h2>
<p>The investigation, led by Caddy maintainers including Matt Holt, involved:</p>
<ol>
<li>Gathering system metrics</li>
<li>Analyzing CPU and memory profiles</li>
<li>Testing different network configurations</li>
<li>Examining kernel settings</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="table-1-system-metrics">Table 1: System Metrics<a href="https://twistingtwists.github.io/byte_vault/how-to-solve-reverse-proxy-performance-issues-in-caddy-server-a-300-performance-boost-using-unix-sockets#table-1-system-metrics" class="hash-link" aria-label="Direct link to Table 1: System Metrics" title="Direct link to Table 1: System Metrics">​</a></h3>
<table><thead><tr><th><strong>Commands</strong></th><th><strong>Why It Is Relevant to Debugging</strong></th><th><strong>Output and Conclusion</strong></th></tr></thead><tbody><tr><td><code>ulimit -a</code></td><td>Checks system limits such as maximum number of open files and other resource constraints that could impact performance.</td><td>No bottlenecks identified in file descriptors or resource limits.</td></tr><tr><td><code>sysctl -p</code></td><td>Confirms network-related kernel parameters such as buffer sizes, default queuing discipline, and TCP congestion control settings.</td><td><br><code>net.core.rmem_max = 2097152</code><br><code>net.core.wmem_max = 2097152</code><br><code>net.core.default_qdisc = fq</code><br><code>net.ipv4.tcp_congestion_control = bbr</code><br><br> Settings were optimized for high-speed networking.<br>TCP congestion control was correctly set to<code>bbr</code>.</td></tr><tr><td>General hardware specs (CPU, RAM, NIC, etc.)</td><td>baseline hardware information</td><td>Verified adequate resources (1 Core Ryzen 5950X, 1024MB RAM, 10Gbps NIC). No resource-related constraints.</td></tr></tbody></table>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="table-2-profile-analysis">Table 2: Profile Analysis<a href="https://twistingtwists.github.io/byte_vault/how-to-solve-reverse-proxy-performance-issues-in-caddy-server-a-300-performance-boost-using-unix-sockets#table-2-profile-analysis" class="hash-link" aria-label="Direct link to Table 2: Profile Analysis" title="Direct link to Table 2: Profile Analysis">​</a></h3>
<table><thead><tr><th><strong>Commands</strong></th><th><strong>Why It Is Relevant to Debugging</strong></th><th><strong>Output and Conclusion</strong></th></tr></thead><tbody><tr><td>Attempted to collect goroutine profiles</td><td>Helps identify bottlenecks or inefficiencies in goroutines that may be causing performance issues.</td><td>Could not identify significant bottlenecks in goroutines.</td></tr><tr><td>Accessed CPU Profile via browser</td><td>Provides CPU usage details to determine if high CPU usage is a factor affecting performance.</td><td>No high CPU usage detected. CPU load was between 1-5%.</td></tr><tr><td><code>wget http://127.0.0.1:2019/debug/pprof/profile?seconds=1000</code></td><td>Downloads detailed CPU profiles for offline analysis.</td><td>Profiles downloaded successfully. Further analysis confirmed no CPU bottlenecks or inefficiencies.</td></tr><tr><td>Collected heap profiles</td><td>Helps analyze memory usage and potential leaks in the application.</td><td>Memory usage was within acceptable limits, with no indication of memory leaks.</td></tr></tbody></table>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="table-3-network-testing">Table 3: Network Testing<a href="https://twistingtwists.github.io/byte_vault/how-to-solve-reverse-proxy-performance-issues-in-caddy-server-a-300-performance-boost-using-unix-sockets#table-3-network-testing" class="hash-link" aria-label="Direct link to Table 3: Network Testing" title="Direct link to Table 3: Network Testing">​</a></h3>
<table><thead><tr><th><strong>Commands</strong></th><th><strong>Why It Is Relevant to Debugging</strong></th><th><strong>Output and Conclusion</strong></th></tr></thead><tbody><tr><td>Tests from multiple locations (Singapore, Los Angeles, Seoul)</td><td>Evaluates network performance across different regions to identify geographical bottlenecks.</td><td>Performance was consistent across all regions.</td></tr><tr><td>Tests with different file sizes (100MiB, 1000MiB)</td><td>Determines if performance issues are related to file size or payload.</td><td>No significant performance variance with different file sizes.</td></tr><tr><td><code>curl -o /dev/null http://host.domain:port/1000MiB</code></td><td>Single-threaded test evaluates download performance under minimal concurrency.</td><td>acceptable network speed</td></tr><tr><td><code>echo 1 1 1 1 1 | xargs -n1 -P5 curl -s -o /dev/null http://host.domain:port/1000MiB</code></td><td></td><td>Multi-threaded test assesses network performance under concurrent load.</td></tr></tbody></table>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="table-4-kernel-analysis">Table 4: Kernel Analysis<a href="https://twistingtwists.github.io/byte_vault/how-to-solve-reverse-proxy-performance-issues-in-caddy-server-a-300-performance-boost-using-unix-sockets#table-4-kernel-analysis" class="hash-link" aria-label="Direct link to Table 4: Kernel Analysis" title="Direct link to Table 4: Kernel Analysis">​</a></h3>
<table><thead><tr><th><strong>Commands</strong></th><th><strong>Why It Is Relevant to Debugging</strong></th><th><strong>Output and Conclusion</strong></th></tr></thead><tbody><tr><td>Checked systemd service file settings</td><td>Confirms that the maximum number of open files is sufficient for high-concurrency workloads.</td><td>Verified<code>LimitNOFILE=1048576</code>. No issues found.</td></tr></tbody></table>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-solution">The Solution<a href="https://twistingtwists.github.io/byte_vault/how-to-solve-reverse-proxy-performance-issues-in-caddy-server-a-300-performance-boost-using-unix-sockets#the-solution" class="hash-link" aria-label="Direct link to The Solution" title="Direct link to The Solution">​</a></h2>
<p>The breakthrough came when testing with Unix sockets instead of TCP connections. By modifying the Caddyfile to use Unix sockets for inter-process communication, the performance issues were completely resolved. Here's what the optimized configuration looked like:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">:8081 {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    bind 0.0.0.0 unix//dev/shm/8081.sock</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    file_server browse</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    root * /opt/www</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">:8082 {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    bind 0.0.0.0 unix//dev/shm/8082.sock</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    reverse_proxy unix//dev/shm/8081.sock</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">:8083 {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    bind 0.0.0.0 unix//dev/shm/8083.sock</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    reverse_proxy unix//dev/shm/8082.sock</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">:8084 {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    reverse_proxy unix//dev/shm/8083.sock</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="key-takeaways">Key Takeaways<a href="https://twistingtwists.github.io/byte_vault/how-to-solve-reverse-proxy-performance-issues-in-caddy-server-a-300-performance-boost-using-unix-sockets#key-takeaways" class="hash-link" aria-label="Direct link to Key Takeaways" title="Direct link to Key Takeaways">​</a></h2>
<ol>
<li>TCP connection overhead can significantly impact performance in multi-layer reverse proxy setups</li>
<li>Unix sockets provide a more efficient alternative for local inter-process communication</li>
<li>Low CPU usage doesn't always mean optimal performance - network stack overhead can be the bottleneck</li>
<li>When dealing with multiple local reverse proxies, consider using Unix sockets instead of TCP connections</li>
</ol>]]></content:encoded>
            <category>Performance</category>
            <category>Caddy</category>
        </item>
    </channel>
</rss>